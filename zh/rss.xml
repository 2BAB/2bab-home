<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>El&#39;s Blog</title>
  <subtitle>El is blogging about tech and life.</subtitle>
  <link href="https://2bab.me/zh/rss.xml" rel="self"/>
  <link href="https://2bab.me/"/>
  <updated>2023-05-14T00:00:00Z</updated>
  <id>https://2bab.me/</id>
  <author>
    <name>2BAB</name>
  </author>
  
  <entry>
    <title>新书上架！《Android 构建与架构实战》系统学习 Gradle 与 AGP。</title>
    <link href="https://2bab.me/zh/blog/2023-05-14-extend-android-build-zh-unevils/"/>
    <updated>2023-05-14T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2023-05-14-extend-android-build-zh-unevils/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/Android%E6%9E%84%E5%BB%BA%E4%B8%8E%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98-%E7%94%B5%E5%AD%90%E7%89%88%E5%B0%81%E9%9D%A2-%E7%AB%8B%E4%BD%93.png?imageslim&quot; alt=&quot;&quot; /&gt;
Android 开发经过十多年的技术演进，如今 Gradle 对于开发者，已是必备工具。&lt;strong&gt;一个企业级的 Android 项目，仅使用 Android Studio 项目里的默认配置，不通过 Gradle 定制编译测试流程、不与 Android Gradle Plugin（下文简称 AGP）深度交互，几乎是不可能的&lt;/strong&gt;。常见的基础应用场景，例如多渠道打包分发、自动化多语言包下载，APK、AAR、AAB 上传与发布等等，是不少团队会面临的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上述问题我搜索、复制、粘贴，一气呵成，感觉不需要深入学习呀？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;的确，不少人对于 Gradle 在 Android 开发中的印象如上所述，公司里讨论 Gradle 的人好像都是高级工程师或架构负责人。这其中可能的原因是：&lt;strong&gt;因为大部分人都没有“真正”学过，所以在碰到一些场景时你并不会想到“我需要它”&lt;/strong&gt;。举一个夸张的例子，例如：没人会招聘“能使用喷气飞行器（Jetpack）”的高工作业工人，对吧？但如果真的有低成本又安全的喷气飞行器出现了，你觉得老板会说“不，我们不需要这样的技能、工具”吗？&lt;/p&gt;
&lt;p&gt;Gradle 作为一个平台型工具，背后关联的知识体系复杂、学习曲线陡峭，涉及到多门语言（Groovy、Java、Kotlin）、Maven 仓库与依赖、Android Build Tools（例如 AAPT、Kotlin Compiler、D8/R8 等）、资源/源码/字节码等文件、格式的解析与流程扩展（例如 KSP/ASM），以及最终的插件开发（例如 Gradle 和 AGP 的 API）等等。在实际工程中，&lt;strong&gt;这类问题多数是由公司的个别高级工程师或基础架构团队负责，因此网上的讨论度并不高，一些有价值的场景和话题也就难以大面积暴露。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，Android 开发者掌握 Gradle 及关联技术对于工作的帮助是多方面的。当你把这个技能运用在团队合作，通过对基础架构和 CI/CD 的贡献，会发现大家对你的依赖逐步加重；当把知识技能写在简历上，可以反应个人高水平的工程能力，也拓宽回答问题的思路，为整个面试加分添彩。进一步说，&lt;strong&gt;越大的团队对于 Gradle 就有越强的需求，不管是考虑到公司的成长、团队的扩张，抑或面试大公司时，构建与架构的能力都是查缺补漏的关键一环。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%9C%AC%E4%B9%A6%E7%89%B9%E8%89%B2&quot; tabindex=&quot;-1&quot;&gt;本书特色&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;那...这些我都不懂呀，一直看大家说 Gradle 难，网上也没有系统性的资料，该怎么学？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这便是本书编写的目的所在：本书瞄准的人群，不仅仅是国内外各 Android 团队的高级工程师或架构负责人，还包括&lt;strong&gt;有志成为这样角色的人&lt;/strong&gt;。市面上不乏讲解 Gradle 的书籍，但均使用 Groovy 且已年久失修，不利于快速上手。进一步地，若要涉及到 Android 构建流程（AGP）和对应的架构实战资料，更是寥寥无几，无法满足系统性学习的需求。&lt;/p&gt;
&lt;p&gt;本书采用 &lt;strong&gt;Kotlin&lt;/strong&gt; 编写，基于最新的 &lt;strong&gt;Gradle 7 和 AGP 7&lt;/strong&gt;（含部分 AGP 8 前瞻）。它不局限于 build.gradle(.kts) 的脚本配置，&lt;strong&gt;而是引入大量 Gradle 的进阶内容为铺垫，超过 40 个自定义的生态协同插件为载体，带你探讨新版 AGP 的接口与原理&lt;/strong&gt;，思考如何在 AGP 相对闭环的容器中定制项目所需的构建流程。&lt;/p&gt;
&lt;p&gt;通过这些内容，你对于 &lt;strong&gt;Gradle、AGP 的理解，以及插件编写的技术&lt;/strong&gt;可提高数个层级，如下问题便能轻松解决了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Android App 的构建流程涉及哪些关键步骤？我们写的插件通常与哪些组件交互？&lt;/li&gt;
&lt;li&gt;如何快速入门 Gradle 插件编写？插件怎么样与 Android 开发环境相兼容？如何保持长期可测试、可维护性？&lt;/li&gt;
&lt;li&gt;为什么 Gradle/AGP API 经常变化，特别是迁移到最新 Gradle/AGP 7.x 的大量底层 API 变化？哪些是该重点掌握的？&lt;/li&gt;
&lt;li&gt;Gradle 的文档太浅显，外部的开源插件项目又存在很多没见过的 API ？大部分数据类型、文件类型和 JDK 常用的完全不一样，怎么转换？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在此基础上，后期我们还设定了一系列的&lt;strong&gt;架构实践章节&lt;/strong&gt;，涵盖资源任务扩展、Kotlin 源码任务扩展、JVM 字节码任务扩展、构建优化技巧等多个部分，巩固对 Android App 构建与架构的认知。我们将引导你从 App 基础架构设计的角度深入思考更多问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么说自动化打包、上传、测试只是 Gradle 关联应用场景的冰山一角？&lt;/li&gt;
&lt;li&gt;如何调试 Gradle、AGP、AAPT2、注解处理器、R8/D8 等等工具的源码？从源码中我们又能发现哪些核心设计，从而做到以不变应万变？&lt;/li&gt;
&lt;li&gt;日常开发工作中，有什么工作可以被沉淀成基础设施，提高团队效能？例如 BundleTool 作为一个很基础的工具，否能利用 Gradle 自动化其流程？&lt;/li&gt;
&lt;li&gt;KSP 是注解处理器吗？KSP 能否处理多模块的源码？Kotlin/Java 的源码还有什么可以扩展的应用场景？&lt;/li&gt;
&lt;li&gt;字节码修改是不是银弹？组件化路由表的生成如何实现？从架构设计的角度如何字节码修改 API 的升级迭代？&lt;/li&gt;
&lt;li&gt;构建增速的核心要点是什么？如何在茫茫的构建日志中分析出瓶颈？如何结合 Android 的 Variant 区别开关不同的插件？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;通过系统性地学习 Gradle 与 AGP 的高级应用，你将筑起厚实的技术壁垒，包括 Gradle 技术与 Android 构建的理解已能超过大多数的 Android 开发者。&lt;/strong&gt; 倘若成为该领域的专家需要 10 分的知识储备（例如 &lt;a href=&quot;https://gradle.org/fellowship/&quot;&gt;Gradle Fellowship&lt;/a&gt; 的官方认证专家），完整消化本书能帮你达到 7-8 分。&lt;/p&gt;
&lt;h2 id=&quot;%E6%9C%AC%E4%B9%A6%E7%9B%AE%E5%BD%95&quot; tabindex=&quot;-1&quot;&gt;本书目录&lt;/h2&gt;
&lt;p&gt;按照传统 A5 大小的纸书估算，本书有近 700 页的容量，是市面上一般技术图书的 2 倍。本书所配套的材料，包括示例源码、参考资料均以开源至我的 Github &lt;a href=&quot;https://github.com/2BAB/Extend-Android-Builds-zh&quot;&gt;仓库&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;（篇幅所限此处仅展示了 2 级目录，完整的 3 级目录参见&lt;a href=&quot;https://github.com/2BAB/Extend-Android-Builds-zh/blob/main/TOC.md&quot;&gt;资料仓库&lt;/a&gt;）。&lt;/p&gt;
&lt;h4 id=&quot;%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%8E%AF%E5%A2%83%E4%B8%8E%E6%A6%82%E5%BF%B5&quot; tabindex=&quot;-1&quot;&gt;第一章  环境与概念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1.1  开篇介绍&lt;/li&gt;
&lt;li&gt;1.2  Android App 构建与架构&lt;/li&gt;
&lt;li&gt;1.3  构建工具发展历史&lt;/li&gt;
&lt;li&gt;1.4  手动构建一个 App&lt;/li&gt;
&lt;li&gt;1.5  Run 按钮背后&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B&quot; tabindex=&quot;-1&quot;&gt;第二章  快速上手&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2.1  Gradle 项目的工程结构&lt;/li&gt;
&lt;li&gt;2.2  Gradle 生命周期基础梳理&lt;/li&gt;
&lt;li&gt;2.3  Kotlin 和 Gradle Kotlin DSL&lt;/li&gt;
&lt;li&gt;2.4  第一个插件：发送构建通知到 Slack&lt;/li&gt;
&lt;li&gt;2.5  Gradle 插件分类&lt;/li&gt;
&lt;li&gt;2.6  Gradle 任务基础梳理&lt;/li&gt;
&lt;li&gt;2.7  源码与调试&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%89%A9%E5%B1%95-android-%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;第三章 扩展 Android 构建流程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;3.1  变体（Variant）&lt;/li&gt;
&lt;li&gt;3.2  Variant &amp;amp; Artifact API v1&lt;/li&gt;
&lt;li&gt;3.3  Variant &amp;amp; Artifact API v2&lt;/li&gt;
&lt;li&gt;3.4  溯源 AGP 入口流程&lt;/li&gt;
&lt;li&gt;3.5  溯源 Artifact API&lt;/li&gt;
&lt;li&gt;3.6  创建自己的 Artifact 集合 - Polyfill 工具库&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%B7%B1%E5%85%A5-gradle-%E5%8E%9F%E7%94%9F-api&quot; tabindex=&quot;-1&quot;&gt;第四章  深入 Gradle 原生 API&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;4.1  生命周期的钩子（Hook）&lt;/li&gt;
&lt;li&gt;4.2  插件扩展的属性/任务的属性&lt;/li&gt;
&lt;li&gt;4.3  DSL 嵌套&lt;/li&gt;
&lt;li&gt;4.4  任务编排&lt;/li&gt;
&lt;li&gt;4.5  缓存与增量机制&lt;/li&gt;
&lt;li&gt;4.6  插件测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%B5%84%E6%BA%90%E6%9E%84%E5%BB%BA%E6%89%A9%E5%B1%95&quot; tabindex=&quot;-1&quot;&gt;第五章  资源构建扩展&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;5.1  AGP 资源交互 API 的进阶使用&lt;/li&gt;
&lt;li&gt;5.2  深入资源编译与打包&lt;/li&gt;
&lt;li&gt;5.3  架构应用：为启动图标加上蒙层 - ScratchPaper 插件&lt;/li&gt;
&lt;li&gt;5.4  架构应用：自动化 BundleTool 转换流程 - BundleTool 插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;%E7%AC%AC%E5%85%AD%E7%AB%A0-%E4%BB%A3%E7%A0%81%E6%9E%84%E5%BB%BA%E6%89%A9%E5%B1%95%E4%B9%8B-kotlin-%E6%BA%90%E7%A0%81&quot; tabindex=&quot;-1&quot;&gt;第六章  代码构建扩展之 Kotlin 源码&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;6.1  AGP 源码交互 API 进阶使用&lt;/li&gt;
&lt;li&gt;6.2  Kotlin Symbol Processing (KSP)&lt;/li&gt;
&lt;li&gt;6.3  架构应用：源码阶段的路由表生成 - Koncat 插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;%E7%AC%AC%E4%B8%83%E7%AB%A0-%E4%BB%A3%E7%A0%81%E6%9E%84%E5%BB%BA%E6%89%A9%E5%B1%95%E4%B9%8B-jvm-%E5%AD%97%E8%8A%82%E7%A0%81&quot; tabindex=&quot;-1&quot;&gt;第七章  代码构建扩展之 JVM 字节码&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;7.1  字节码简介&lt;/li&gt;
&lt;li&gt;7.2  AGP 7.0 之前的字节码修改 API：Transform API&lt;/li&gt;
&lt;li&gt;7.3  AGP 7.0（含）之后的字节码修改 API：Artifacts API&lt;/li&gt;
&lt;li&gt;7.4  AGP 7.0（含）之后的字节码修改 API：Instrumentation API&lt;/li&gt;
&lt;li&gt;7.5  架构应用：敏感 API 调用的监控与代理 - Caliper 插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%8F%90%E5%8D%87%E6%9E%84%E5%BB%BA%E4%BD%93%E9%AA%8C&quot; tabindex=&quot;-1&quot;&gt;第八章  提升构建体验&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;8.1  构建分析&lt;/li&gt;
&lt;li&gt;8.2  构建提速技巧&lt;/li&gt;
&lt;li&gt;8.3  根据 Variant 决定是否启用插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%A6%82%E4%BD%95%E8%B4%AD%E4%B9%B0&quot; tabindex=&quot;-1&quot;&gt;如何购买&lt;/h2&gt;
&lt;p&gt;本书目前上架了&lt;a href=&quot;https://t.zsxq.com/0eF9jWLpY&quot;&gt;电子版&lt;/a&gt;：定价 ¥499，点击链接或扫描下面二维码购买，进入后请点击“专栏”阅读（推荐使用网页版获得最佳阅读体验）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/51112188854524T3.JPG?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/Screenshot%202023-05-14%20at%203.19.38%20PM.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;为了对等待本书的朋友表示感谢，即日起只要关注&lt;em&gt;&lt;strong&gt;Android高效开发&lt;/strong&gt;&lt;/em&gt;公众号，回复“Android 构建与架构实战”即可领取&lt;strong&gt;高达 150 元的早鸟优惠券&lt;/strong&gt;。首批 150 元优惠券为 50 张，领完后我会再更新 50 张 100 元，然后再 50 张 50 元，最后恢复原价。（活动最终解释权归本人所有）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/%E5%85%AC%E4%BC%97%E5%8F%B7.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;既然选择&lt;em&gt;知识星球&lt;/em&gt;作为专栏输出，我就打算再送一些额外福利给大家，目前星球计划的主营内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;《Android 构建与架构实战》电子专栏&lt;/strong&gt;：可能是市面上独一份（统计包括中英文）、系统性学习 Gradle 和 AGP 实战的书籍。随着 Android 的发展，封禁的系统 API 越来越多，Runtime 的黑科技已经越来越没有发挥空间，编译构建的工具却热度不减。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新知预告&lt;/strong&gt;，不仅是英文社区的一手 Android 架构方面资料，还包括作为 GDE 参与到各个会议、与行业专家交流等了解到的前沿资讯。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会员播客&lt;/strong&gt;：包括软技能分享、行业观察、职场思考、海外的互联网公司发展等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会员问答&lt;/strong&gt;：技术问题包括 AGP、Gradle、Android 架构、Kotlin 编译器等我和嘉宾探索的领域，均可提供一定的帮助；软实力和职业发展方向的问题亦可提供指引。此外，&lt;strong&gt;读者终于拥有一个便捷的可直接与书籍作者交流的平台&lt;/strong&gt;，你可学习的过程中于任意小节留下评论，写下你的疑惑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本书于编写尾期进行了第一轮校对，几位一线的 Android 基础架构工程师提出了数十个宝贵的修改建议。目前正在进行的第二轮校对中，我邀请了十多位 Android 各垂直领域的专家。他们将提供更加全面的审阅视角，而校对的评论将公开于星球当中，因为我相信这些高水平的思想碰撞亦是富有价值的学习材料。&lt;/p&gt;
&lt;h2 id=&quot;%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85&quot; tabindex=&quot;-1&quot;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;我是 AB，常用 ID 为 &lt;em&gt;2BAB&lt;/em&gt;。Android 开发者、开源贡献者、技术书籍&lt;a href=&quot;https://2bab.me/zh/blog/2023-05-05-kotlin-for-gradle/&quot;&gt;《KOGE》&lt;/a&gt;和《Android 构建与架构实战》作者，以及《二分电台》播客主理人。&lt;/p&gt;
&lt;p&gt;于 2013 年开始接触 Android 与 Gradle 相关开发，活跃于 Android 技术社区，创作包括文章、书籍、演讲、播客等形式，乐于交流、与他人碰撞思想。曾在阿里巴巴等国际公司就职，主要从事移动基础架构研发。同时，我是中国大陆八位 &lt;a href=&quot;https://developers.google.com/community/experts/directory/profile/profile-el-zhang-2bab&quot;&gt;Android GDE&lt;/a&gt;（Google 开发者专家）之一。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/202305142100680.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;你可以在我的博客主页找到全部的作品。&lt;a href=&quot;https://2bab.me/zh/&quot;&gt;https://2bab.me/zh/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8-kotlin-%E7%BC%96%E5%86%99%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;为什么使用 Kotlin 编写？&lt;/h2&gt;
&lt;p&gt;Kotlin DSL 现在成为新 Gradle 构建的默认设置。Gradle Kotlin DSL 带来的好处有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译时检查。&lt;/li&gt;
&lt;li&gt;更好的 IDE 体验，包括自动补全，源代码导航，重构等。&lt;/li&gt;
&lt;li&gt;简化的声明式插件语法。&lt;/li&gt;
&lt;li&gt;丰富的 Kotlin 社区支持。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尤其第二点，“自动补全”是过去使用 Groovy DSL 编写 Gradle 脚本的一大痛点，而现在 Kotlin 为我们解决了这个问题。而作为 Android 开发者，一门语言带来的统一体验（App 主体开发和构建工具开发）亦是令人欣喜。&lt;/p&gt;
&lt;h2 id=&quot;%E5%92%8C%E3%80%8Akoge%E3%80%8B%E5%B0%8F%E5%86%8C%E7%9A%84%E5%85%B3%E7%B3%BB%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;和《KOGE》小册的关系？&lt;/h2&gt;
&lt;p&gt;很多人应该看到了最近 Kotlin 官方和 Gradle 官方在转发我的另外一本开源小册 &lt;a href=&quot;https://2bab.me/zh/blog/2023-05-05-kotlin-for-gradle/&quot;&gt;《KOGE》&lt;/a&gt;和《Android 构建与架构实战》又有哪些不同？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/Screenshot%202023-05-15%20at%209.51.49%20AM.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《KOGE》小册是一道开胃小菜，它&lt;strong&gt;面向 Android 和 Gradle 的新手&lt;/strong&gt;，搞懂脚本的配置与简单的自定义任务，大多数内容均为互联网上的公开文章和资料——而遍数全网，Gradle 与 AGP 的内容多数能找到仅为入门的内容。&lt;/li&gt;
&lt;li&gt;《Android 构建与架构实战》是一桌宴席，它面向&lt;strong&gt;想要成为高级工程师甚至架构工程师的人&lt;/strong&gt;，不再局限于一般的脚本配置与小修小补，而是真枪实弹地编写 Gradle 插件（大小共 40+ 个案例），实战编译构建方向的架构设计，结合 Android 领域的特定场景去理解 AGP 的最佳实践等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样是使用 Kotlin 作为 Gradle 脚本/插件的编写语言，&lt;strong&gt;《KOGE》完美地成为了本书的前置课程&lt;/strong&gt;——事实上《KOGE》便是本书在写作过程中产生的想法：如果能把基础概念都归纳到一本小册子，《Android 构建与架构实战》就能更流畅地专注在插件编写、AGP、架构、最佳实践等进阶命题。&lt;/p&gt;
&lt;p&gt;借用前文的比喻，倘若成为该领域的专家需要 10 分的知识储备，《KOGE》能做到 2 分，而完整消化本书能帮你提升至 7-8 分。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/zh&quot;&gt; Github / 公众号 / 播客 / Twitter&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Kotlin 成为 Gradle 默认语言！如何快速上手？KOGE 小册来帮忙！</title>
    <link href="https://2bab.me/zh/blog/2023-05-05-kotlin-for-gradle/"/>
    <updated>2023-05-05T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2023-05-05-kotlin-for-gradle/</id>
    <content type="html">&lt;p&gt;自 4 月中 Kotlin Conf 上宣布了这条消息：“Kotlin DSL 现在成为新 Gradle 构建的默认设置”，不少 Android 技术群就热烈地在转发/讨论相关消息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“Compose 只用 Kotlin，现在连 Gradle 也默认用 Kotlin 了！”&lt;/li&gt;
&lt;li&gt;“Kotlin DSL 是什么？我 Groovy 已经学不过来了，原来写个构建脚本还可以用 Kotlin 吗？”&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kotlin-is-the%20-default-lang-of-gradle-banner.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（能让三家公司一起发新闻稿，说明这事...真的稳！！！）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没错，Kotlin 其实在 2016 就被引入了 Gradle 的构建工具中。并且，历经多年的集成和调优，终于在今年成为所有开发者的默认选项。只要你打开最新版的 Android Studio/IntelliJ IDEA，选择新建项目即可看到如下的提示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/20230505191241.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;IDE 将为开发者默认创建 &lt;code&gt;Kotlin DSL (buidl.gradle.kts)&lt;/code&gt; 的相关脚本。&lt;/p&gt;
&lt;p&gt;Gradle Kotlin DSL 带来的好处有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译时检查。&lt;/li&gt;
&lt;li&gt;更好的 IDE 体验，包括自动补全，源代码导航，重构等。&lt;/li&gt;
&lt;li&gt;简化的声明式插件语法。&lt;/li&gt;
&lt;li&gt;丰富的 Kotlin 社区支持。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尤其第二点，“自动补全”是过去使用 Groovy DSL 编写 Gradle 脚本的一大痛点，现在 Kotlin 为我们解决了这个问题。而作为 Android 开发者的我，也十分享受一门语言带来的统一体验（App 主体开发和构建工具开发）。&lt;/p&gt;
&lt;p&gt;不过，虽然 Kotlin 和 Gradle 大家都不陌生，但是二者的结合却对很多 Android 开发者有些新奇。&lt;strong&gt;如何能快速上手 Gradle Kotlin DSL？甚至借这次千载难逢的机会，补足以前难以上手 Gradle 的遗憾？有请 &lt;a href=&quot;https://koge.2bab.me/#/zh-cn/&quot;&gt;KOGE&lt;/a&gt; 小册！（点击链接即可阅读，开源项目）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/koge-book-cover.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;KOGE 是 Kotlin-oriented Gradle Essentials 的缩写，顾名思义是面向 Kotlin 的 Gradle 基础手册&lt;/strong&gt;。我们按照合理的先后顺序，列出新手最困惑的概念，再从一些互联网上已有的问题、源码、示例项目中去学习。它不是 “Awesome Gradle” 的项目收藏夹，&lt;strong&gt;而是一份大纲，一本简练的自学手册。&lt;/strong&gt; 手册选择了 &lt;strong&gt;Kotlin&lt;/strong&gt; 作为介绍 DSL 脚本和插件开发的语言，链接和用例以 &lt;strong&gt;Android&lt;/strong&gt; 构建场景为主。&lt;/p&gt;
&lt;p&gt;另外，“基础”的定义范围十分明确，它覆盖了下方第 1 点和部分第 2 点中的内容（源自我之前的一个&lt;a href=&quot;https://mp.weixin.qq.com/s/TmHYKMU1KYOTdN_ytZNWZA&quot;&gt;问卷调查&lt;/a&gt;）。重点解决&lt;strong&gt;理解脚本、编写脚本，和常见 Gradle 工程化实践。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;“仅基础使用”（初级）：我能读懂、修改 build.gradle(.kts)，对 Gradle、AGP 有基础的认知，例如了解 Gradle 的任务机制，但碰到非 App 源码的编译错误有点不知所措；&lt;/li&gt;
&lt;li&gt;“实现高效自动化、工程化”（中级）：我对工程化、自动化有一定的认知、追求，可以通过构建脚本拆分、自定义 Task 来实现日常事务的优化，例如使用 buildSrc 模块抽取并统一管理依赖、使用自定义 Task 组合 CICD 的流程，运用一些最佳实践来提高编译构建效率；&lt;/li&gt;
&lt;li&gt;“编译构建增强”（高级）：我可以通过查阅 Gradle 文档、Debug AGP、编译期的 Profiler 日志，来自定义 Annotation Processor、Gradle Plugin 等解决一个项目碰到实际问题，抽象成一套可复用的工具；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个基础内容点都大致按如下四个步骤组织：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它是什么？&lt;/li&gt;
&lt;li&gt;它能用来做什么？&lt;/li&gt;
&lt;li&gt;它的自学要点？&lt;/li&gt;
&lt;li&gt;主体内容，重点文档/文章链接、摘要、代码、运行结果等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/20230505193725.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;手册目前涵盖了 2 大部分，共 10 个章节，涉及了新手上路的方方面面。虽然有不少链接内容是英文，但详细的知识点阐述、代码实战其实都在这些链接的文章、文档中，有困难的朋友也可借助一些翻译工具进行学习。&lt;/p&gt;
&lt;p&gt;！！！再放一次在线阅读地址：&lt;a href=&quot;https://koge.2bab.me/#/zh-cn/&quot;&gt;KOGE&lt;/a&gt; ！！！&lt;/p&gt;
&lt;p&gt;想参与手册编辑，请访问 KOGE 的 &lt;a href=&quot;https://github.com/2BAB/KOGE&quot;&gt;Github 仓库&lt;/a&gt;。觉得这个项目好的朋友也欢迎点个 Github Star，并分享给你的同事朋友。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt; Github / 公众号 / 播客 / 微博 / Twitter&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>KotlinConf 2023 参会体验</title>
    <link href="https://2bab.me/zh/blog/2023-04-15-kotlin-conf-23-exp/"/>
    <updated>2023-04-15T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2023-04-15-kotlin-conf-23-exp/</id>
    <content type="html">&lt;p&gt;刚刚结束了 KotlinConf 2023 的旅程，心潮澎湃，趁余温尚在，记录下我的所见所闻。短短两天内，我获得了大量从未有过的人生体验。大会的议程安排，展位设置，高质量的参会人员和内容分享，甚至包括餐食、咖啡、Party 乐队等周边配套都是一级水平。&lt;/p&gt;
&lt;p&gt;注：这是一篇手机上编写的速记，格式编排等难免有些问题，望见谅。&lt;/p&gt;
&lt;h2 id=&quot;%E2%80%8B%E4%BC%9A%E5%9C%BA&quot; tabindex=&quot;-1&quot;&gt;​会场&lt;/h2&gt;
&lt;p&gt;今年是 KotlinConf 第二次在荷兰阿姆斯特丹举办，上一次是疫情前。地点在 Beurs van Berlage，是当地的历史建筑，翻新装修后现在成为会议租借的场地。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-01.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-02.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-03.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;​混合历史与现代的主会场，承载了厚实的内容与记忆。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-04.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;不少从其他国家来的人纷纷表示这是最美的会场，最好吃的食物。当然，既然是在欧洲举办，大部分现场的观众，包括展台的工作人员很多也是欧洲本土过来的，例如英国法国德国捷克比利时意大利等等。剩下一部分感觉有北美过来的，以及少数亚非拉的。综合来看，现场其实有各种各样的语言在交流，而大部分人不是 English Native Speaker，一起聊天讲英语时彼此压力都不大。&lt;/p&gt;
&lt;h2 id=&quot;%E2%80%8B%E8%AE%AE%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;​议程&lt;/h2&gt;
&lt;p&gt;Kotlin 语言自然是会议的主题，但 Kotlin 生态发展到今天，已远不止传统 JVM 的内容。我们会看到 Android，Backend，Multiplatform，Infrastructure &amp;amp; Tools，QA 和自动化等等主题。除了每天早上的  Opening Keynotes，其余时间都是有五六场活动并轨的情况，你需要在多个 Session 之间做出选择——这实际上是一件好事，因为会议质量的判断是极其主观的。主题分享找对了听众，听众找到最对自己胃口的内容，才能发挥出最佳的化学反应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-05.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;（部分收藏的主题）&lt;/p&gt;
&lt;p&gt;例如我选择的多是 Kotlin Multiplatform、Kotlin Compiler、Compose for iOS 以及生态工具相关的主题，偏新奇或硬核向。&lt;/p&gt;
&lt;p&gt;这次在现场听分享，最重要两点体会是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;老生常谈，你可以和 speaker 在结束后畅谈更多问题。例如我听完 K2 Compiler Plugins 后私下和 Mikhail 又聊了一会儿，其中他解释了“文档已释出”主要指 API doc，而不是 Tutorial doc，然后现场打开 Kotlin 源码翻了翻，一起看看刚刚他讲的公开接口都在哪里，代码规范、注释清晰，那后续生成的文档自然就不错。配合上这次的分享视频，以及官方的几个真实案例，相信 KCP 在 K2 的加持下会衍生出更多社区生态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-06.png?imageslim&quot; alt=&quot;&quot; /&gt;
2. 前面提到并轨的分享已经把人群分流了，因此你在这个分会场见到的人一定是十分契合这个主题的。同样以 K2 Compiler Plugins 为例，虽主题小众、分会场也不大，Speaker 做调研时问有多少人写过 Compiler Plugin，竟然有 3-4 成的人举手，到提问环节也有四五个人举手。因此这个小屋子内有非常多值得认识的新朋友，可以抓住机会！&lt;/p&gt;
&lt;h2 id=&quot;%E2%80%8B%E7%BA%BF%E4%B8%8B%E7%A4%BE%E4%BA%A4&quot; tabindex=&quot;-1&quot;&gt;​线下社交&lt;/h2&gt;
&lt;p&gt;延续上一段的分享，我作为最后一个提问者，由于英语水平有限表达较为啰嗦，演讲者听着有些困惑——于是我们结束了这个环节，待他下场后在旁边又和其他几位开发者，一起探讨了 K2 的 KCP 计划取消 Gradle SubPlugin 的设定有哪些利弊。其中结识了一位比利时的年轻小哥，应届毕业没多久，聊起这些话题却已经十分老练，在回主会场的路上顺利和他交换了联系方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-07.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;紧接着，detekt 的那场则又认识了两位相见恨晚的朋友，Nicola 和 Chao，来自 detekt 的主要维护团队。我和 Chao 甚至在短短认识一小时后就一起去参与了 Kotlin 炉边漫谈的录制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-08.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
（Nicola，Chao，我，圣佑）&lt;/p&gt;
&lt;p&gt;除了从分会场的人脉延伸，我还从第一天早饭时间起就马不停蹄地在大厅或者休息室找人唠嗑。事实上，你甚至可以牺牲一点点听分享的时间，来参与到这个一年一度的面基时刻。比如今天实在听了太多场，那剩下的一小时分享就留着等回放上线后再看吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-09.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-10.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-12-1.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-11.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-13.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-14.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-14-1.png?imageslim&quot; alt=&quot;&quot; /&gt;
上图几位既是行业里的专家，也是 fo 他们了多年的单向网友，后两位还是搭档做分享的嘉宾。由于社交媒体都是放的真人头像，一到现场很容易就能认出。拿杯水，凑过去，先听听别人在聊什么，再慢慢打招呼，互相介绍了解更多。比如我刚开始听到的话题有：Maven Central 发布流程繁琐，骑车从巴黎去阿姆斯特丹的经历，做的 side project 等等。后续第二第三次碰面深入聊聊时，就可以探讨更多，例如职业规划，技术问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-15.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
（我的 E-ink 手机让很多人驻足围观 / 打开话题）&lt;/p&gt;
&lt;p&gt;第三种搭讪的方式就是直接去 Booth，比如 Google 的分享会后，Jeffrey 带我去了 Google 的展台。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-16.png?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-17.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-18.png?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-19.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-20.png?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-21.png?imageslim&quot; alt=&quot;&quot; /&gt;
​
在那里他介绍认识了 Ivan。Ivan 是 AS &amp;amp; AGP 等工具的开发者之一，解答了大量我对目前 API 设计，版本更迭，Bug 提交和修复的一些疑惑，最重要的是现场帮我看了我写的书的英文目录，探讨后他给了多个实用的建议。&lt;/p&gt;
&lt;p&gt;之后我又在 Google 这见到 Marton，他是 Android Worldwide 大会的组织者之一，当时我去当讲师时就曾有过线上交流。而最近他整理和发布了不少 KSP 与 Android 开发的资讯（如上图），因此我们现场还一起找出了之前我那期 KSP 分享的视频（由于分享标题忘记了，我们找了一两分钟，差点尬住）。&lt;/p&gt;
&lt;p&gt;还有 Florina 等布道师也在现场，时间有限就仅仅是打打招呼，互相分享下在从事哪方面工作等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-22.jpg?imageslim&quot; alt=&quot;&quot; /&gt;​
展台通常会有很多周边，这里分享一部分我拿到的贴纸，Pinner 等周边。后续我希望在其他活动上，分享给本地的开发者，传递 KotlinConf 的盛况和热情给大家。当然，这里也有 Kotlin 的展台及周边，还有他们的工作人员、工程师等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-23.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-24.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-25.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-26.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-27.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;特别感谢圣佑带我认识了更多的 JetBrains 的朋友，还一起参加晚上的 Party，和几个德国的小伙伴拍照留念，大家畅聊了近一小时。更多和圣佑的对话请关注 Kotlin 的官方公众号，以及 Kotlin 炉边漫谈 播客！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-28.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
最后的彩蛋是——和 Jake Wharton 的合影：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-29.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
(YOU KNOW WHO)&lt;/p&gt;
&lt;h2 id=&quot;%E5%85%B6%E4%BB%96&quot; tabindex=&quot;-1&quot;&gt;其他&lt;/h2&gt;
&lt;p&gt;​我之前参加过的线下会议不多，早几年在大陆参加过一些 GDG 的活动，18 19 22 年在新加坡参加过几场 Google 和 DroidCon 的活动。从我和现场朋友们对技术会议的探讨回顾中，这次的 KotlinConf 依然是在众多会议中可圈可点的一个。&lt;/p&gt;
&lt;p&gt;与全世界同行业最有趣的人交流，认识新的朋友，在一个轻松的氛围下汲取新知、产生灵感。经历过 Covid-19 我想大家更加珍惜能面对面谈话的机会，而如果我没有提前一年订下这次的早鸟票，也一定会后悔。&lt;/p&gt;
&lt;p&gt;明年，再相见！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-30.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-31.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/kt-conf-23-32.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #12 根据 Variant 决定是否启用插件</title>
    <link href="https://2bab.me/zh/blog/2021-12-21-enable-feature-by-variant/"/>
    <updated>2021-12-21T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-12-21-enable-feature-by-variant/</id>
    <content type="html">&lt;p&gt;在 Android 开发中使用过第三方 Gradle 插件的同学都应该碰到过这个问题：&lt;strong&gt;我只想在某一些 buildType 或者 flavor 中应用这个插件，但是找不到合适的办法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个问题的根本原因在于 Variant（buildType + flavor) 不是一个 Gradle 概念，而是源于 Android Gralde Plugin（AGP）的多渠道配置。所以从 Gradle 平台的角度很难向上提供便捷的支持：一个工程内的插件引入是全局的、平台性的，不以某一个插件的意志（AGP）而改变下层平台的机制。&lt;/p&gt;
&lt;p&gt;OK，但我们的问题还是要解决的，所以便了有下面四种问题的解法（大雾。我们按照无效到高效的顺序一一解释其中的思路。&lt;/p&gt;
&lt;h2 id=&quot;%E6%A0%B9%E6%8D%AE-variant-%E5%8E%BB-apply-%E6%8F%92%E4%BB%B6%EF%BC%88%E6%97%A0%E6%95%88-x&quot; tabindex=&quot;-1&quot;&gt;根据 Variant 去 apply 插件（无效 X&lt;/h2&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;flavorDimensions &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;productFlavors &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        dimension &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        applicationIdSuffix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.production&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        versionNameSuffix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-production&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        versionCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 无效&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很多 Android 或者 Gradle 的初学者会觉得，我把 &lt;code&gt;apply(...)&lt;/code&gt; 放在这里不就好了？（当然，你肯定不能用 &lt;code&gt;plugins { id(&amp;quot;xxx&amp;quot;) }&lt;/code&gt;）这里的误区在于，&lt;strong&gt;&lt;code&gt;apply(...)&lt;/code&gt; 方法和当前上下文对象并没有关联&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/20211221205845.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/20211221210042.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create(&amp;quot;...&amp;quot;){}&lt;/code&gt; 的闭包上下文是 &lt;code&gt;this:ApplicationProductFlavor&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apply(...)&lt;/code&gt; 则为挂载于 PluginAware 的一个扩展方法（以 &lt;code&gt;build.gradle.kts&lt;/code&gt;），作用于整个 Project，这样一来你的插件还是会被全局引入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样的经典误区：&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    dimension &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    applicationIdSuffix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.production&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    versionNameSuffix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-production&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    versionCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;    packagingOptions &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        jniLibs &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            excludes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/20211221212514.png?imageslim&quot; alt=&quot;&quot; /&gt;
你可能觉得这样可以为这个 flavor 设置单独的 &lt;code&gt;packageingOptions&lt;/code&gt;，但实际上这个方法是 &lt;code&gt;CommonExtension&lt;/code&gt; 接口的一个方法，并不属于 &lt;code&gt;ApplicationProductFlavor&lt;/code&gt;。也即它是为整个 Android Gradle Plugin 进行设置，而不是单一 flavor，如果你在每个 flavor 中都进行不同的设置，最后一次的设置会覆盖前面所有的。针对这个问题的解决方法，可参考我之前 &lt;a href=&quot;https://www.bilibili.com/video/BV1WP4y1G71h&quot;&gt;GDG 分享&lt;/a&gt;中的“二次配置”部分。&lt;/p&gt;
&lt;h2 id=&quot;%E6%A0%B9%E6%8D%AE%E5%91%BD%E4%BB%A4%E5%8E%BB-apply-%E6%8F%92%E4%BB%B6%EF%BC%88%E9%83%A8%E5%88%86%E6%9C%89%E6%95%88-x&quot; tabindex=&quot;-1&quot;&gt;根据命令去 apply 插件（部分有效 X&lt;/h2&gt;
&lt;p&gt;我们本次讨论的问题在一些 StackOverflow 问答中也能查到，其中有大量的答案是关于“解析键入的命令”来进行判断。&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;startParameter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;taskRequests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种做法能够解决你输入的命令为 &lt;code&gt;./gradlew clean assembleProductionRelease&lt;/code&gt; 等等的情况，因为这类命令中仅包含了一个 Variant 的信息（也就是 Production + Release）。然而如果输入的命令是 &lt;code&gt;./gradlew clean assembleRelease&lt;/code&gt;，它同时打包 &lt;code&gt;Staging&lt;/code&gt; 和 &lt;code&gt;Production&lt;/code&gt; 两个 flavors，这时上面的 &lt;code&gt;if(...)&lt;/code&gt; 条件就完全不成立，你的构建也会因此遭到破坏。&lt;/p&gt;
&lt;p&gt;多数情况 &lt;code&gt;taskRequests&lt;/code&gt; 下对第三方 Android 构建插件的开发者都是不应去获取和使用的，和第一条误区一样它是 Gradle 平台自身的 API，没有为上层 AGP 的 Variant 概念做优化。&lt;/p&gt;
&lt;h2 id=&quot;%E7%A6%81%E7%94%A8%E5%AF%B9%E5%BA%94-variant-%E7%9A%84%E6%8F%92%E4%BB%B6-task%EF%BC%88%E6%9C%89%E6%95%88-y&quot; tabindex=&quot;-1&quot;&gt;禁用对应 Variant 的插件 Task（有效 Y&lt;/h2&gt;
&lt;p&gt;当然，SO 上也有人提到了正确、有效、且通用的做法——&lt;strong&gt;不要动态禁用（或开启）插件，而是去禁用插件内的 Task。&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;plugins &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.example.ua&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// or apply(&quot;com.example.ua&quot;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;tasks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;whenTaskAdded&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;release&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;UploadArchive&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        enabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;假设有一个上传构建结果的插件叫做 &lt;code&gt;com.example.ua&lt;/code&gt;，我们不管什么情况，都在&lt;code&gt;build.gradle.kts&lt;/code&gt; 内引用它。但是往下看，我们基于 &lt;code&gt;whenTaskAdded {...}&lt;/code&gt; 做了类似上一条误区的 &lt;code&gt;if(...)&lt;/code&gt; 判断，然后符合条件的 task 的 &lt;code&gt;enabled&lt;/code&gt; 属性设置为 &lt;code&gt;false&lt;/code&gt;。为什么上一个方法不行，而这个可以？&lt;/p&gt;
&lt;p&gt;我们要复习下这条 Gradle 脚本和 &lt;code&gt;android{}&lt;/code&gt; DSL 规则：不管你 shell 键入的命令是什么，你键入的是 &lt;code&gt;clean&lt;/code&gt; 也好 &lt;code&gt;help&lt;/code&gt; 也好，这份脚本都是会完整地被执行，所有 Variant 的 Task 都会被注册（当然现在通常都是惰性注册了 &lt;code&gt;register(...)&lt;/code&gt; 而不用 &lt;code&gt;create()&lt;/code&gt;）。&lt;strong&gt;而 &lt;code&gt;whenTaskAdded{...}&lt;/code&gt; 是 Gradle 平台的 API，它才不管你上层注册的 Task 分不分 Variant，它只管把所有注册后且确定会添加进运行图（是个有向无环图 DAG）的 Task 在这里提供一个回调的时机给开发者。与此同时，几乎所有的 Android 生态协同插件都会基于 Variant 的名字去给自己 Task 命名（如果它需要是一个 VariantAware Task 的话），例如 “UploadArchiveWithLogForProductionRelease”。这个不成文的规则给了我们字符串匹配的机会，也即你看到的上述代码。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于插件怎么找到对应的所有 Task，目前没有自动化的办法，也没有 API（但是最近的一个 AGP Team Q&amp;amp;A 上，他们提到在和 Gradle 推进这个功能）。你可以做的就是：&lt;strong&gt;引入插件前打印下 Task List，引入后再打印一遍，找二者的 Diff。&lt;/strong&gt; 当然对于一些比较简单的插件，直接看下文档或者源码，整理下有哪几个 Task 也行。&lt;/p&gt;
&lt;p&gt;所以这个方案小结下就一句话：总是引用插件，但禁用掉不需要的 Task。&lt;/p&gt;
&lt;h2 id=&quot;%E5%9C%A8-task-%E6%B3%A8%E5%86%8C%E6%97%B6%E6%8B%A6%E6%88%AA%EF%BC%88%E9%AB%98%E6%95%88-y&quot; tabindex=&quot;-1&quot;&gt;在 Task 注册时拦截（高效 Y&lt;/h2&gt;
&lt;p&gt;我在上一篇[《构建指北 #11 BundleTool Gradle Plugin》](&lt;a href=&quot;https://2bab.me/2021/12/19/bundle-tool-plugin&quot;&gt;https://2bab.me/2021/12/19/bundle-tool-plugin&lt;/a&gt;]中提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bundle-tool-gradle-plugin 支持按不同 variant 渠道去开启插件的几个功能特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这光听起来就和上一个方案就有点神似了，难不成就是把 &lt;code&gt;enabled = false&lt;/code&gt; 藏 Plugin 里，再吐个 DSL 的开关配置出来给用户选择？其实不然，解决思路上已经大差不差了。但稍微思考下还有两个可以改进的空间：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;既然我们想要在插件内部控制开关，何必使用 &lt;code&gt;task.enabled = false&lt;/code&gt;，&lt;strong&gt;直接把注册流程跳过就好了&lt;/strong&gt;（当然，这个做法不适用于所有情况，有时候还是需要动态禁用的）。&lt;/li&gt;
&lt;li&gt;对于大部分的 Android 生态协同插件，其 DSL 一般都是 Variant 无关的静态配置，如果要设计一个 Variant 有关的配置，可能只能传入一堆自定义 rules（如下代码）：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 静态的 DSL 配置&lt;/span&gt;&lt;br /&gt;bundletool &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    enableByVariantRules &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;debugStaging&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            enabledFeature1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;            enabledFeature2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;            enabledFeature3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;debugProduction&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种 rules 的复杂度比较难控制，在上述代码里它是一个 2 * 2 * 3 的笛卡尔积，配置起来十分不变。解决的方法也很容易想到，&lt;strong&gt;如果它能做成传入一个 Kotlin Lambda（或者 Groovy Closure），不就很方便了？就像我们做二次配置时使用的 &lt;code&gt;onVariants(...) {...}&lt;/code&gt; 方法一样，我们需要一些“动态”的东西，用户可以与之互动的东西，减少配置的复杂度。&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// “动态”的 DSL 配置，基于 Kotlin Lambda 和 Groovy Closure &lt;/span&gt;&lt;br /&gt;bundleTool &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    enableByVariant &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variant&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; feature &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; feature &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; BundleToolFeature&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GET_SIZE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 &lt;code&gt;variant&lt;/code&gt; 参数是 &lt;code&gt;com.android.build.api.variant.Variant&lt;/code&gt;，即我们平时使用的 Variant API v2 的 Variant 对象；&lt;code&gt;feature&lt;/code&gt; 参数是一个自定义的 enum 类，方便每个插件定制。然后我们看下实现：&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt; * Extract `enableByVariant(...)` function, can be reused in other plugins.&lt;br /&gt; * Currently the Lambda and Closure are defined by raw types, they can be encapsulated&lt;br /&gt; * by [Property] as well to fulfill &quot;lazily produced/consumed&quot; purpose.&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; EnableByFeatureExtension&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; kotlinEnableByVariant&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; EnableByVariant&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; groovyEnableByVariant&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Closure&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Boolean&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// For Gradle Kotlin DSL&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;enableByVariant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;selector&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; EnableByVariant&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        kotlinEnableByVariant &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; selector&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// For Gradle Groovy DSL&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;enableByVariant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;selector&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Closure&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Boolean&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        groovyEnableByVariant &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; selector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dehydrate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isFeatureEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variant&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Variant&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; T&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Boolean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        kotlinEnableByVariant &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            kotlinEnableByVariant&lt;span class=&quot;token operator&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variant&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        groovyEnableByVariant &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            groovyEnableByVariant&lt;span class=&quot;token operator&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variant&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typealias&lt;/span&gt; EnableByVariant&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variant&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Variant&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; T&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; Boolean&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; BundleToolExtension&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; EnableByFeatureExtension&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;BundleToolFeature&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; buildApks&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; NamedDomainObjectContainer&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;BuildApksRule&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; getSize&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; NamedDomainObjectContainer&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;GetSizeRule&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; BundleToolFeature &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// It&#39;s currently a predecessor for GET_SIZE,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// and the first job that plugin does,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// disable it will cause the task registry got removed.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// The work action that transforms .aab to .apks using `build-apks` command.&lt;/span&gt;&lt;br /&gt;    BUILD_APKS&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// The work action that gets the transformed .apks file size using `get-size total` command.&lt;/span&gt;&lt;br /&gt;    GET_SIZE&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我们分别定义了针对 Groovy 和 Kotlin 两种 Gradle DSL 的 Closure/Lambda，它们接受 &lt;code&gt;Variant&lt;/code&gt; 和自定义的一个泛型参数，返回一个 Boolean 值表示是否开启对应功能。接着我们定义了 &lt;code&gt;isFeatureEnabled(..,): Boolean&lt;/code&gt; 方法对两个语言分支进行整合，方便插件内部的调用。当实际使用该 &lt;code&gt;EnableByFeatureExtension&lt;/code&gt; 时，实际上我们会让插件的 &lt;code&gt;BundleToolExtension&lt;/code&gt; 继承于它，从而隔离出插件本体功能和通用的开关特性，任意其他的插件可以方便地拷走这个类加入到自己的 Extension 中。&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;androidExtension&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onVariants&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variant &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isFeatureEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variant&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; BundleToolFeature&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BUILD_APKS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token label symbol&quot;&gt;@onVariants&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; featureGetSize &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isFeatureEnabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variant&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; BundleToolFeature&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GET_SIZE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; buildApksTaskProvider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tasks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;BundleToolTask&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;TransformApksFromBundleFor&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;variantName&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        enableGetSizeFeature &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; featureGetSize&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; BundleToolTask &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DefaultTask&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation builtin&quot;&gt;@get:Input&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; enableGetSizeFeature&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Boolean &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token annotation builtin&quot;&gt;@TaskAction&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;enableGetSizeFeature&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后，我们展示了在两个地方使用这个开关的例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果某个 Feature 影响的是整个 Task，我们可以使用开关跳过它的注册。&lt;/li&gt;
&lt;li&gt;如果某个 Feature 只影响了一个 Task 内的部分功能，我们将开关的值传入 Task 内部再进行判断。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述的流程并非完全不可变，这个思路可以结合其他的开关方式进行调整。目前我已经在 &lt;a href=&quot;https://github.com/2BAB/bundle-tool-gradle-plugin&quot;&gt;bundle-tool-gradle-plugin&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/2BAB/ScratchPaper&quot;&gt;ScratchPaper&lt;/a&gt; 使用了这个方案，让插件功能的引入更加灵活。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当然，你可能也已经发现，这个方案其实是从插件开发的角度入手，除非所有的插件开发者都使用了类似的方案进行优化，否则方案 3 仍然是从用户角度出发的目前唯一的通用办法。但是这个方案的优势在于控制粒度更精细、也更方便，开发者可以任意定制。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文主要讨论了插件功能根据不同 Variant 渠道进行开启的解决方案，可能也是全网第一次有如此详细和完整的多种方案对比讨论。文章的思考和方案其实还可以被运用到其他的一些 Gradle 场景中，大家可以自行发挥想象。那 2021 年的最后一篇技术文章就到这边啦，咱们明年再见。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt; Github / 公众号 / 播客 / 微博 / Twitter&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>《Androids》的一些有趣书摘</title>
    <link href="https://2bab.me/zh/blog/2021-12-21-androids-funny-sections/"/>
    <updated>2021-12-21T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-12-21-androids-funny-sections/</id>
    <content type="html">&lt;p&gt;Pieces of &amp;quot;Androids&amp;quot; book which are really interesting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Haase, Chet. Androids: The Team That Built the Android Operating System . Chet Haase. Kindle Edition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;About the HTC G1 and hidden memory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the legends of Brian Swetland was how he “found” extra memory on the G1 shortly before it shipped. He submitted a fix in the run-up to the release, expanding the available RAM on the device from 160 Mbytes to 192 Mbytes, giving the OS and all applications 20% more memory to play with, which was a significant boost on this very memory-constrained system.
The trick was that he knew where to find that memory because he had hidden it in the first place. The kernel is responsible for making memory available for the rest of the system to use. When he first brought up the kernel on the G1, he configured it to report less memory that it actually had. To the rest of the system, there was effectively 32Mb less memory for use than was physically available in the hardware. He did this with the certain knowledge that every developer would use all available memory if it was there, but they’d work within a tighter budget if they had to.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #11 BundleTool Gradle Plugin</title>
    <link href="https://2bab.me/zh/blog/2021-12-19-bundle-tool-plugin/"/>
    <updated>2021-12-19T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-12-19-bundle-tool-plugin/</id>
    <content type="html">&lt;p&gt;App Bundle（.aab) 作为 Android 官方力推的新交付格式已经存在了一段时间，而今年 PlayStore 的政策强制“所有新应用必须使用 .aab”进行提交也成为了大家转换过去的一大动力。兼容和打包 .aab 文件格式其实并不复杂，简单添加对应的 DSL 配置并替换掉执行的打包命令为 &lt;code&gt;bundle${VariantName}&lt;/code&gt; 即可。但是，打包后得到的 .aab 并不能直接在本地直接使用 adb 安装到调试设备，需要借助 &lt;a href=&quot;https://github.com/google/bundletool&quot;&gt;bundletool&lt;/a&gt; 转换到 .apks 后再调用其安装命令进行安装。&lt;/p&gt;
&lt;h2 id=&quot;%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF&quot; tabindex=&quot;-1&quot;&gt;常见场景&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/studio/command-line/bundletool#build_app_bundle&quot;&gt;BundleTool 官方文档&lt;/a&gt; 列举了 CLI 命令的各类用途；放到更复杂的环境中，你可能碰到过 BundleTool 的这些场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地测试时，需要使用 BundleTool 的 CLI 手动运行转换和安装命令；&lt;/li&gt;
&lt;li&gt;CI 环境下，需要配置 BundleTool CLI 工具，再编写一些 Shell 脚本进行打包后的转换流程控制；&lt;/li&gt;
&lt;li&gt;真机实验室的测试、真机云平台的测试，需要集成 BundleTool 到相对应的测试中，方便生成对应机型的 apks 包。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些场景常常伴随着下列的一些问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一些内部测试包发布渠道不支持 aab 和 apks，我们需要在这些非 GP 非真机实验平台做快速的功能测试，universal apk 才是这类场景的最好选择（但是从头再打一个 apk 显然是浪费资源）；&lt;/li&gt;
&lt;li&gt;在 aab 包上传至 GP 的 Console 后，可以清晰得看到所有支持机型的预计下载大小，但是这个数据指标不方便在 CI 上直接用 Shell 脚本来做收集和量化（硬上或者用 Python 大概也可以）；&lt;/li&gt;
&lt;li&gt;AGP 其实集成了，BundleTool 包，每次又要单独配置 BundleTool 的 CLI 其实显得有些多余。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不禁思考，AGP 有 BundleTool 的依赖，没有这些 BundleTool 后续转换的 Task 吗？使用 Gradle 来做这些后续的操作其实更适合？&lt;/p&gt;
&lt;h2 id=&quot;%E6%B7%B1%E5%85%A5-agp-%26-bundletool&quot; tabindex=&quot;-1&quot;&gt;深入 AGP &amp;amp; BundleTool&lt;/h2&gt;
&lt;p&gt;如果我们打开 IDE 的 Gradle Task 列表，查询 “Bundle“ 关键词，很容易就会发现 &lt;code&gt;makeApkFromBundleForXxxx&lt;/code&gt; 等任务，它们的实现是 &lt;code&gt;com.android.build.gradle.internal.tasks.BundleToApkTask&lt;/code&gt; 这个类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/20211219_bundle_tool_bundle_to_apk_task.png?imageslim&quot; alt=&quot;Task 列表和 BundleToApkTask 截图&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在源码中查看该类的关联使用，你会发现除了注册没有任何地方有该类的使用痕迹。而这个任务自身的具体作用其实只是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖 &lt;code&gt;PackageXxxBundle&lt;/code&gt;，等它打出一个未签名的 Bundle；&lt;/li&gt;
&lt;li&gt;输入上一步的 Bundle，执行 BundleTool 包里的 &lt;code&gt;BuildApksCommand&lt;/code&gt; 命令打出一个 .apks 包。&lt;/li&gt;
&lt;li&gt;从它的输入参数可以看出，用户需要的&lt;strong&gt;配置&lt;/strong&gt;它其实只暴露了一个 &lt;code&gt;enableLocalTesting&lt;/code&gt;，其余的都使用 BundleTool &lt;code&gt;build-apks&lt;/code&gt; 命令的&lt;strong&gt;默认值&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;从它的输出结果（见下方）可以发现，它竟然只是一个“&lt;strong&gt;中间产物&lt;/strong&gt;”（位于 &lt;code&gt;/intermediates&lt;/code&gt; 文件夹中），而非最终产物。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/20211219_bundle_tool_tasks_1.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这就有点食之无味、弃之可惜了：有现成的 Task 但使用范围十分局限。不如...咱借助 BundleTool 库自己封装一个 Gradle Plugin？&lt;/p&gt;
&lt;h2 id=&quot;bundle-tool-gradle-plugin-%E6%80%8E%E4%B9%88%E5%B0%81%E8%A3%85%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;bundle-tool-gradle-plugin 怎么封装？&lt;/h2&gt;
&lt;p&gt;简单分析下 BundleTool 的几个命令，我们发现它们的依赖关系如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/20211219_bundle_tool_commands.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从顺序来看 &lt;code&gt;build-apks&lt;/code&gt; 是其他几个命令的必选前置任务（实线），&lt;code&gt;get-device-sepc&lt;/code&gt; 是几个命令的可选前置任务（虚线）。&lt;/li&gt;
&lt;li&gt;从交互来看，&lt;code&gt;build-apks&lt;/code&gt; 和 &lt;code&gt;get-size&lt;/code&gt;（斜体部分）和构建流程关系紧密，不需要测试设备参与；其余命令需要测试设备参与。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get-device-spec&lt;/code&gt; 导出 json 文件是一次性的任务，我们可以假设这部分已经完成；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如此，我们&lt;strong&gt;涉及的领域&lt;/strong&gt;也清楚了：&lt;code&gt;build-apks&lt;/code&gt; 和 &lt;code&gt;get-size&lt;/code&gt; 等和最终产物直接相关的命令。&lt;code&gt;install-apks&lt;/code&gt; 和 &lt;code&gt;extract-apks&lt;/code&gt; 在本地测试可以根据当前设备使用 CLI 完成，在 CI 或者云真机测试平台等一般有专用的脚本去结合 BundleTool 处理。&lt;/p&gt;
&lt;p&gt;然后我们考虑获取&lt;strong&gt;如何获取最终输出的 Bundle 并修改&lt;/strong&gt;。新版 Variant API 其实已经提供了方便修改和获取最终 Bundle 的方法，整个流程可以参考如下的运行截图。可以看到对比之前的中间产物模式，Variant API 的产物都已经输出到 &lt;code&gt;/outputs&lt;/code&gt; 文件夹了。由于我们不需要中间 aab，所以我们只要简单调用 &lt;code&gt;variants.get(SingleArtifact.BUNDLE)&lt;/code&gt;，把获取的 .aab 文件传入自定义 Task，之后再借鉴 AGP 的代码包装下各类命令即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/20211219_bundle_tool_tasks_2.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 一个验证想法的简单 Task，完整插件的实现比这个复杂一些，请直接参考文末的仓库链接&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; ConsumeBundleFileTask &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DefaultTask&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation builtin&quot;&gt;@get:InputFiles&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; finalBundleProperty&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; RegularFileProperty&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation builtin&quot;&gt;@get:Internal&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; buildToolInfo&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Property&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;BuildToolInfo&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation builtin&quot;&gt;@get:Nested&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; signingConfigData&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; SigningConfigDataProvider&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation builtin&quot;&gt;@get:OutputFile&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; apksFileProperty&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; RegularFileProperty&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation builtin&quot;&gt;@TaskAction&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;taskAction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; aapt2Path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; buildToolInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BuildToolInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PathId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AAPT2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.get(SingleArtifact.BUNDLE)&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[ConsumeBundleFileTask][input]:&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; finalBundleProperty&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;asFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;absolutePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[ConsumeBundleFileTask][output]:&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; apksFileProperty&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;asFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;absolutePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; signingConfigData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; signingConfigData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!!&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; command &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; BuildApksCommand&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setBundlePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;finalBundleProperty&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;asFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setOutputFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apksFileProperty&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;asFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAapt2Command&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                Aapt2Command&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createFromExecutablePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token function&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aapt2Path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setSigningConfiguration2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                keystoreFile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; signingConfigData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;storeFile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                keystorePassword &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; signingConfigData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;storePassword&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                keyAlias &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; signingConfigData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keyAlias&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                keyPassword &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; signingConfigData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keyPassword&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setLocalTestingMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        command&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不了解&lt;strong&gt;新版 Variant API&lt;/strong&gt; 的朋友可以参考我这个月在 GDG 社区的分享《扩展 Android 构建流程 - 基于新版 Variant/Artifact APIs》（&lt;a href=&quot;https://www.bilibili.com/video/BV1WP4y1G71h?share_source=copy_web&quot;&gt;回放地址&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;最后我们简单看下 BundleTool 的 BuildApksCommand.Builder，这个 Builder 的 setXxx 相关的 &lt;strong&gt;API&lt;/strong&gt; 过去一年也就两个小改动，其中还有一个是新增方法，不太影响原有的兼容性，相比 AGP 来说整体&lt;strong&gt;相对稳定&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;至此，整个插件的理论构建成本和维护成本都在可接受范围内。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6&quot; tabindex=&quot;-1&quot;&gt;使用插件&lt;/h2&gt;
&lt;p&gt;插件的开发和我之前写过的几个并无差别，我们直接来看插件的使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;0x01. Add the plugin to classpath:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;buildscript &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    repositories &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    dependencies &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;classpath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.android.tools.build:gradle:7.0.4&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;classpath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;me.2bab:bundle-tool-plugin:1.1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;0x02. Apply Plugin:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// For your application module&lt;/span&gt;&lt;br /&gt;plugins &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;me.2bab.bundletool&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;0x03. Advanced Configurations&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; me&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xx2bab&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bundletool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;bundleTool &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 这里是一个很有趣的配置项，它可以按不同 variant 渠道去&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 开启插件的几个功能特性，例如这里我们把 debug + Get_SIZE 功能的组合禁掉了。&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 你可以根据项目实际的 buildtype 和 flavor 去调整和开启需要的功能。&lt;/span&gt;&lt;br /&gt;    enableByVariant &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variant&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; feature &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; feature &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; BundleToolFeature&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GET_SIZE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 每个配置项会对应到一个 `build-apks` 命令的执行&lt;/span&gt;&lt;br /&gt;    buildApks &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;universal&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            buildMode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ApkBuildMode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UNIVERSAL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pixel4a&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            deviceSpec&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./pixel4a.json&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 每个配置项都会依次计算上面 `buildApks` 所有输出的 apks 的大小，&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 按当前的配置会输出 2 * 1 = 2 份 csv 文件&lt;/span&gt;&lt;br /&gt;    getSize &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            dimensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                GetSizeDimension&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SDK&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                GetSizeDimension&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ABI&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                GetSizeDimension&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SCREEN_DENSITY&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                GetSizeDimension&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LANGUAGE&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;0x04. Build your App and Enjoy!&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 确保执行命令里的 Variant 是 `enableByVariant` 中允许的&lt;/span&gt;&lt;br /&gt;./gradlew TransformApksFromBundleForProductionRelease&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后可以在 &lt;code&gt;/app/outputs/bundle/${variantName}/bundletool&lt;/code&gt; 中找到输出的结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/20211219_bundle_tool_outputs2.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;希望这个小工具可以帮助大家在集成新的 Android Bundle 时提供一些帮助，插件已经开源到我 Github：&lt;a href=&quot;https://github.com/2BAB/bundle-tool-gradle-plugin&quot;&gt;bundle-tool-gradle-plugin&lt;/a&gt;。关于按 Variant 开关插件功能的思路，请参考下一篇构建指北#12。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt; Github / 公众号 / 播客 / 微博 / Twitter&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>AB 的工程效率小集 #2 九月刊</title>
    <link href="https://2bab.me/zh/blog/2021-09-30-dev-exp-monthly-update-02/"/>
    <updated>2021-09-30T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-09-30-dev-exp-monthly-update-02/</id>
    <content type="html">&lt;p&gt;关于为什么要做一份 Android 的工程效率小集，详见&lt;a href=&quot;https://2bab.me/zh/blog/2021-09-30-dev-exp-monthly-update-02/&quot;&gt;小集第一期&lt;/a&gt;。如果你想加入或者投稿一些有意思的内容，欢迎通过&lt;a href=&quot;https://2bab.me/about&quot;&gt;这些方式&lt;/a&gt;联系我。&lt;/p&gt;
&lt;p&gt;本期开始我们加入了 &amp;quot;News(N)&amp;quot; 新知的内容。OK，那我们进入第二期的正文。&lt;strong&gt;2021 年 8 月工程效率小集：&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%9E%84%E5%BB%BA%EF%BC%9Agradle%2Fagp%2Fci%2F...&quot; tabindex=&quot;-1&quot;&gt;构建：Gradle/AGP/CI/...&lt;/h2&gt;
&lt;h3 id=&quot;n1%EF%BC%9A%E4%B8%80%E4%B8%AA%E8%BD%AC%E6%8D%A2-gradle-%E5%88%B0-bazel-%E7%9A%84%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%B9%B6%E6%94%AF%E6%8C%81%E8%9E%8D%E5%90%88%E7%BC%96%E8%AF%91%EF%BC%8C%E5%8F%AF%E6%B8%90%E8%BF%9B%E5%BC%8F%E8%BF%81%E7%A7%BB%E3%80%82&quot; tabindex=&quot;-1&quot;&gt;N1：一个转换 Gradle 到 Bazel 的工具，并支持融合编译，可渐进式迁移。&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/grab/Grazel&quot;&gt;https://github.com/grab/Grazel&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;n2%EF%BC%9A&quot; tabindex=&quot;-1&quot;&gt;N2：&lt;/h3&gt;
&lt;h2 id=&quot;q1%3A&quot; tabindex=&quot;-1&quot;&gt;Q1:&lt;/h2&gt;
&lt;p&gt;is it possible to use Kotlin DSL functions, in a plugin, without applying the kotlin-dsl plugin? The functions make writing plugins in Kotlin much nicer in many ways, but I don&#39;t see why they should be coupled to the Kotlin DSL per se.
In other words, are those functions in a separate jar I could declare as a normal dependency?&lt;/p&gt;
&lt;p&gt;The gradleKotlinDsl() dependency notation (available only in Kotlin scripts) should give you the required libraries.&lt;/p&gt;
&lt;h2 id=&quot;q2%3A&quot; tabindex=&quot;-1&quot;&gt;Q2:&lt;/h2&gt;
&lt;p&gt;how can I kill all gradle daemon’s, regardless of version?&lt;/p&gt;
&lt;p&gt;You need to use the task manager, search for java processes that are daemons and kill them
Or loop through Gradle versions and use --stop for all of them&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br /&gt;jps &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$2==&quot;GradleWorkerMain&quot;|| $2==&quot;GradleDaemon&quot;{print $1}&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;xargs&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;kill&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;kotlin-%E5%91%A8%E8%BE%B9%EF%BC%9Akoin%2Fktor%2Fcoil%2F...&quot; tabindex=&quot;-1&quot;&gt;Kotlin 周边：Koin/Ktor/Coil/...&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt; Github / 公众号 / 播客 / 微博 / Twitter&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>编译构建知识的调查结果&amp;新企划！&quot;</title>
    <link href="https://2bab.me/zh/blog/2021-09-24-android-build-survey_result/"/>
    <updated>2021-09-24T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-09-24-android-build-survey_result/</id>
    <content type="html">&lt;p&gt;上周的&lt;a href=&quot;https://2bab.me/2021/09/14/android-build-survey&quot;&gt;《Android App 编译构建知识的小调查》&lt;/a&gt;，收到了预期的问卷数量 101 份（剔除我自己正好100份，也太巧了？）。仅基于个人的理解，我编写了下方五个选项（下文的 1/2/3/4 指代这五个层级）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;”仅基础使用“（初级）：我能读懂、修改 &lt;code&gt;build.gradle(.kts)&lt;/code&gt;，对 Gradle、AGP 有基础的认知，例如了解 Gradle 的任务机制，但碰到非 App 源码的编译错误有点不知所措；&lt;/li&gt;
&lt;li&gt;”实现高效自动化、工程化“（中级）：我对工程化、自动化有一定的认知、追求，可以通过构建脚本拆分、自定义 Task 来实现日常事务的优化，例如使用 &lt;code&gt;buildSrc&lt;/code&gt; 模块抽取并统一管理依赖、使用自定义 Task 组合 CICD 的流程，运用一些最佳实践来提高编译构建效率；&lt;/li&gt;
&lt;li&gt;”编译构建增强“（高级）：我可以通过查阅 Gradle 文档、Debug AGP、编译期的 Profiler 日志，来自定义 Annotation Processor、Gradle Plugin 等解决一个项目碰到实际问题，抽象成一套可复用的工具；&lt;/li&gt;
&lt;li&gt;”对编译构建有较为全面的理解“（资深）：我了解编译构建的主要环节实现，常见架构应用的原理，实践过多个编译构建增强工具，对项目的基础架构梳理得井井有条；&lt;/li&gt;
&lt;li&gt;”深度参与“：我了解 Android App 编译构建的前沿发展，积极参与社区 Discussion、Proposal、PR、Review，灵活运用、修改各类工具，对于不同类型的问题、需求能给出优解、多解。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E8%B0%83%E6%9F%A5%E7%BB%93%E6%9E%9C&quot; tabindex=&quot;-1&quot;&gt;调查结果&lt;/h2&gt;
&lt;p&gt;虽说有一百份，但是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一天我就收到了“为什么没有0基础的选项”反馈；&lt;/li&gt;
&lt;li&gt;大部分投票的同学都是我公众号的读者 + 社区比较活跃且对 Gradle/Android 构建有兴趣的朋友；&lt;/li&gt;
&lt;li&gt;所以从整个社区的角度来看，结果应比下图更往“初级”靠拢。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/2021-09-24-android-survey-result-1.jpg?imageslim&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/2021-09-24-android-survey-result-2.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;简单分析了几个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现在处于的位置：
&lt;ul&gt;
&lt;li&gt;是典型的倒金字塔结构，并不意外，不管哪门技术调研都会是这个结果；&lt;/li&gt;
&lt;li&gt;但前面提到，实际“初级”的占比应比上述数据更多，原本预计可能就 50% 的“初级”现在看来其实有 70%，所以收到“希望多写点基础内容”的反馈非常真实；&lt;/li&gt;
&lt;li&gt;我很想知道“深度参与”的那一票是谁投的（不是我），很想和业界大佬交流交流ヾ(◍°∇°◍)ﾉﾞ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;努力达到的位置：
&lt;ul&gt;
&lt;li&gt;是比较正态分布的结果，即便考虑到误差，也是令我感到欣慰的；&lt;/li&gt;
&lt;li&gt;这和现在的市场需求还比较贴切，初级工程师的供给较为均衡，高级工程师仍然供不应求，掌握构建相关的知识可能是一块不错的向上跃迁的敲门砖；&lt;/li&gt;
&lt;li&gt;如果有更优质的内容在社区传播，我相信填“深度参与”的人一定能做到，并且可以更多。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E6%89%80%E4%BB%A5...%E6%88%91%E6%83%B3%E8%BE%93%E5%87%BA%E7%9A%84%E6%98%AF...%3F&quot; tabindex=&quot;-1&quot;&gt;所以...我想输出的是...?&lt;/h2&gt;
&lt;p&gt;不少读者（特别是“Android&amp;amp;英语群”里的朋友）知道我已经做了很长一段时间的 Android 构建高级进阶的内容，为了系统性地解决&lt;strong&gt;从位置 1 或 2 进阶到 3+ 的多个难题&lt;/strong&gt;，还需要一段时间的整理和编写，预计在明年会放出。&lt;/p&gt;
&lt;p&gt;而从这段时间的社区讨论、问卷反馈中，我也不断在思考&lt;strong&gt;从 0 到 1 或 2 的内容该怎么做&lt;/strong&gt;？社区上这块的内容虽然不及 UI 方面的多，但鉴于每个 Android 开发者都必须使用 Gradle，业务上也有多渠道打包、加固等绕不过去的技术需要集成，Android 构建基础的内容还是零星有人分享的，中文社区中例如掘金的 Android 类目下还专门有 Gradle 的小类。那，大家缺的是什么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我认为是一个方向，一份大纲。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从 Gradle 的角度切入的系统性教程出现了多年断层，你能找到的图书很多还在使用 “&amp;lt;&amp;lt;” 等过时的 API（“doLast(...)” 的符号重载）；&lt;/li&gt;
&lt;li&gt;而 Gradle 官方的文档按 &lt;a href=&quot;https://docs.gradle.org/current/userguide/userguide.pdf&quot;&gt;PDF&lt;/a&gt; 版来算有 1200+ 页，面之广，直接覆盖了 1-4 的各层级内容，英文不错的朋友快速读一遍都得花上几天；&lt;/li&gt;
&lt;li&gt;从 Android 构建的角度切入的系统性教程几乎没有，一旦碰到复杂点的需求，要求自定义一个简单的 Task 和 AGP 进行交互，就发现缺漏的知识太多，更不知从何入手学起。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;理顺出一条学习路径，加上诸多实例，可能几个篇章就能做出不错的效果，再加上 Kotlin First 的原则，以 KTS 和 Kotlin 编写的插件为例，减少一些 Groovy 的学习成本，我想应该妙极了！&lt;/strong&gt; 不出意外的话，十月份我会放出一些有意思的东西。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BB%8E-kmm-%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E6%B4%BB%E5%8A%A8%E5%88%B0-koge&quot; tabindex=&quot;-1&quot;&gt;从 KMM 文档翻译活动到 KOGE&lt;/h2&gt;
&lt;p&gt;几个月前，由于我工作中使用了 KMM（Kotlin Multi-platform Mobile)，所以决定做点什么—— “kotlin-mobile-docs” 的&lt;a href=&quot;https://github.com/2BAB/kotlin-mobile-docs&quot;&gt;中文文档翻译计划&lt;/a&gt;。以我为初始翻译者，到后来的另外五个小伙伴加入，我们做了大概 60% 的文档翻译。很可惜我们最后没有完成所有的内容，具体原因如项目 README：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210924174118.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而上述 Android 构建 0 到 1 的内容，在确定了路线并做好一部分内容后，我依旧想开源到社区，和大家共同打造这个有价值的项目。我起了个项目名字叫 KOGE，意味 &lt;em&gt;Kotlin-oriented Gradle Essential&lt;/em&gt;。这次，我们不做翻译，我们做更有意思的自学大纲，做一手的内容，做反向输出到英文社区的内容。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，还没有加过“Android&amp;amp;英语群”的朋友，欢迎来群里玩~ 这里日常吹水的东西很少，但是一手的新知识、新资料很多呀~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210924174641.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的 &lt;a href=&quot;https://2bab.me/about&quot;&gt; Github / 公众号 / 播客 / Twitter&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Android App 编译构建知识的小调查</title>
    <link href="https://2bab.me/zh/blog/2021-09-14-android-build-survey/"/>
    <updated>2021-09-14T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-09-14-android-build-survey/</id>
    <content type="html">&lt;p&gt;不久前写了篇文章&lt;a href=&quot;https://2bab.me/2021/06/17/google-io-21-agp-recap&quot;&gt;《Google I/O 21 Android Gradle Plugin 更新总结》&lt;/a&gt;，今天被 Google 的 “Android 开发者” 转载了。但收到了一些反馈是：能不能也写一些更基础的文章。确实我接触过的绝大多数 Android 开发者都对 Android 构建方面的知识有种敬畏感，Gradle + Android Gradle Plugin（AGP）的组合复杂度不低，而互联网上能找到的系统性资料稀少（英文都不多，中文就更少啦）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;底层技术：Gradle、AGP、Annotation Processor（AP）、AAPT、D8&amp;amp;R8、ByteCode modification、Dex modification、Kotlin Compiler、ZIP&amp;amp;APK&amp;amp;AAR&amp;amp;AAB、IDE Plugin、etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;架构应用：依赖注入、组件化、插件化、多渠道包、SDK 按需接入、白牌应用、多维度测试（单元、集成、功能测试）、安全防护（混淆、加壳、native 加密...），Jetpack Compose、CICD 以及更多其他的自动化流程；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编译构建的知识不仅是单独的加快构建速度，也，还作用于运行期。才疏学浅，下方的选项仅基于个人的理解来编写，有不足之处欢迎私信我提建议~&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;”仅基础使用“（初级）：我能读懂、修改 &lt;code&gt;build.gradle(.kts)&lt;/code&gt;，对 Gradle、AGP 有基础的认知，例如了解 Gradle 的任务机制，但碰到非 App 源码的编译错误有点不知所措；&lt;/li&gt;
&lt;li&gt;”实现高效自动化、工程化“（中级）：我对工程化、自动化有一定的认知、追求，可以通过构建脚本拆分、自定义 Task 来实现日常事务的优化，例如使用 &lt;code&gt;buildSrc&lt;/code&gt; 模块抽取并统一管理依赖、使用自定义 Task 组合 CICD 的流程，运用一些最佳实践来提高编译构建效率；&lt;/li&gt;
&lt;li&gt;”编译构建增强“（高级）：我可以通过查阅 Gradle 文档、Debug AGP、编译期的 Profiler 日志，来自定义 Annotation Processor、Gradle Plugin 等解决一个项目碰到实际问题，抽象成一套可复用的工具；&lt;/li&gt;
&lt;li&gt;”对编译构建有较为全面的理解“（资深）：我了解编译构建的主要环节实现，常见架构应用的原理，实践过多个编译构建增强工具，对项目的基础架构梳理得井井有条；&lt;/li&gt;
&lt;li&gt;”深度参与“：我了解 Android App 编译构建的前沿发展，积极参与社区 Discussion、Proposal、PR、Review，灵活运用、修改各类工具，对于不同类型的问题、需求能给出优解、多解。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210924115821.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;（为方便统计，参与调研请关注公众号“Android高效开发”进行填写）&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt; Github / 公众号 / 播客 / 微博 / Twitter&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #10 Android 开发工具兼容性</title>
    <link href="https://2bab.me/zh/blog/2021-08-07-android-dev-tool-composition-on-m1/"/>
    <updated>2021-08-07T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-08-07-android-dev-tool-composition-on-m1/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;『构建指北』是探索 Android 构建相关的一系列文章，涵盖了 Gradle、Android Gradle Plugin、Kotlin Script 等工具，以及相关架构上的应用。发现问题，解决问题，传递新知，提高效率。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;由于几个月前电脑 CPU 烧了，被迫换了 M1 的 Mac Mini，所以整个开发环境重新搭建了一遍。趁这个机会，我想整理几个基础工具的版本搭配策略、兼容性、以及在 M1 芯片上的表现。对于版本搭配和兼容性的一些讨论不局限于当前使用的版本和平台。&lt;/p&gt;
&lt;p&gt;下方提及的版本分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zulu JDK: 11.0.11&lt;/li&gt;
&lt;li&gt;Kotlin: 1.5.21&lt;/li&gt;
&lt;li&gt;Gradle: 7.1.1&lt;/li&gt;
&lt;li&gt;Android Gradle Plugin（AGP）: 7.0 &amp;amp; 7.1&lt;/li&gt;
&lt;li&gt;Android Studio: Arctic Fox 2020.3.1 &amp;amp; BumbleBee 2021.1.1 Canary 6&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;jdk&quot; tabindex=&quot;-1&quot;&gt;JDK&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;自 AGP 7.0 起，JDK 11 便是最低要求&lt;/strong&gt;。JDK 11 成为 LTS（Long-term Support) 版本已经有将近 3 年历史（Sep 2018），自身经历了 12 个小版本（11.0.12）的迭代目前相对成熟了。作为对比，上一个 LTS 的 JDK 8 2014 年发布，已经陪着我们走过了 7 年时光和 300 个小版本迭代。事实上作为 Android 开发者，即便目前项目是 Java 为主的情况，一般 Language Level 也仅 target to 1.8（一些 9-12 的特性 D8、R8 有支持，Android 11 12 也有融入）。Android 官方虽然说不会放弃 Java，但实际上对 Kotlin 的支持确实更给力。&lt;/p&gt;
&lt;p&gt;从这个角度来看，JDK 11 带来给我们的更多是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kotlin Compiler、Gradle、IDE 层面上性能的升级；&lt;/li&gt;
&lt;li&gt;JDK 8 将停止维护的情况下（3 年后），安全层面的持续保障；&lt;/li&gt;
&lt;li&gt;适应新的发布机制，每半年一个小版本，三年一个 LTS 大版本，减少历史包袱跑得更快；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 JDK 的升级策略我认为是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保守派：如果不在意新语言特性，可以等每年 AGP 升级的情况来决定 JDK 的版本，因为 IDE 一般 bundle 了一个 JDK，Kotlin 编译器、Gradle 一直追着最新 JDK 并有不错的向下兼容——所以根据木桶原理等 AGP 升级了再升即可，目前看来 AGP 可能也只跟进比较稳定的 LTS 版本；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;激进派：Gradle 支持后即可测试；&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 M1 Mac 上，由于 Oracle 还未有的 ARM64 版本，所以目前主流的做法是安装 &lt;a href=&quot;https://www.azul.com/downloads/?package=jdk&quot;&gt;Azul&lt;/a&gt; 维护的 &lt;code&gt;Zulu JDK11&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210805160844.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，常用的 JDK 管理工具 &lt;code&gt;SDKMAN!&lt;/code&gt; 在我的测试中依旧跑在 &lt;code&gt;Rosetta 2&lt;/code&gt; 的转译环境中。这会造成即便你是安装的 &lt;code&gt;Zulu JDK11&lt;/code&gt;，通过 &lt;code&gt;SDKMAN!&lt;/code&gt; 的脚本启动依然会显示 Gradle &lt;code&gt;java&lt;/code&gt; 的进程跑在 Intel ABI 下。故目前建议从官网下载安装，等后续配套工具支持后再考虑切换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210805162529.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;kotlin&quot; tabindex=&quot;-1&quot;&gt;Kotlin&lt;/h2&gt;
&lt;p&gt;Kotlin 的版本搭配限制相对不多，一般我考虑三个点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有没有特别吸引人的新功能，比如刚放出稳定版的 Coroutine、Flow，或者新版本 Kotlin Multiplatform Mobile 的更好支持等；&lt;/li&gt;
&lt;li&gt;用不用大迭代的第一个版本，例如观察刚发布时的 &lt;code&gt;1.4.0&lt;/code&gt;，&lt;code&gt;1.5.0&lt;/code&gt;，这条其实广泛适用于各类 Library；&lt;/li&gt;
&lt;li&gt;Gradle 目前 bundle/test 的 Kotlin 的版本，例如最新的 7.1.1 stable 依旧是用的 &lt;code&gt;1.4.31&lt;/code&gt; 的 Kotlin（7.2 RC 则跳到 &lt;code&gt;1.5.21&lt;/code&gt; 了）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于最后一点，如果使用的 Kotlin 版本和 Gradle bundle 的不一致，会出现如下 Warning：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;w: Runtime JAR files in the classpath should have the same version. &amp;gt;These files were found in the classpath:
...
/Users/2bab/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.4.31/84ce8e85f6e84270b2b501d44e9f0ba6ff64fa71/kotlin-stdlib-jdk7-1.4.31.jar (version 1.4)
/Users/2bab/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.5.21/2f537cad7e9eeb9da73738c8812e1e4cf9b62e4e/kotlin-stdlib-1.5.21.jar (version 1.5)
/Users/2bab/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.5.21/cc8bf3586fd2ebcf234058b9440bb406e62dfacb/kotlin-stdlib-common-1.5.21.jar (version 1.5)
w: Consider providing an explicit dependency on kotlin-reflect 1.5 to prevent strange errors
w: Some runtime JAR files in the classpath have an incompatible version. Consider removing them from the&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用一个简单的例子看下问题是怎么发生的：&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;plugins &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.android.application&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 没有指定版本，用的就是 Gradle bundle 的版本，&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Gradle 7.1.1 对应的就是 Kotlin 1.4.31 的各种类库和编译工具&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;android&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;dependencies &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 而这里我们却用了 1.5.21 的最新版 Kotlin，就会出现如上问题&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;org.jetbrains.kotlin:kotlin-stdlib:1.5.21&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解决起来也很简单：&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;plugins &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.android.application&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 手动指定版本&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;android&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; version &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1.5.21&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Kotlin &lt;a href=&quot;https://kotlinlang.org/docs/gradle.html&quot;&gt;官方的文档&lt;/a&gt;直接就演示了加版本号的写法。&lt;strong&gt;但是，这个版本是 Kotlin 基于 Gradle 测试通过，而 Gradle 自身还没有基于它&lt;a href=&quot;https://docs.gradle.org/7.1.1/userguide/compatibility.html&quot;&gt;测试&lt;/a&gt;过并打包进去（见 Gradle 部分的配图），若出现了问题可能难以解决&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;所以我推荐的升级策略是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保守派：等 Gradle 升级的时候再升级，例如 1.5.0 到 1.5.21 中间仅隔了两个月，Gradle 就跟进了；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;激进派：有实用的新功能或者大版本迭代后的第一个补丁版本就升。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gradle&quot; tabindex=&quot;-1&quot;&gt;Gradle&lt;/h2&gt;
&lt;p&gt;前面提到 Kotlin 的官方文档解释了各类和 Gradle 配合兼容的情况，反过来 Gradle 这边也有一个标明了 Java、Kotlin、Android 等各语言和平台的&lt;a href=&quot;https://docs.gradle.org/7.1.1/userguide/compatibility.html&quot;&gt;支持文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210805214442.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;像前面提到的 Java 版本支持，Kotlin 版本支持在这里便一目了然。除了 Kotlin 的支持会稍落后一两个月，其他工具的最新版本兼容都不成问题。而 Gradle 自身的向下兼容我觉得还不错，我基本上每个版本都升级。而上层的 AGP DSL，特别是老版本，则挺经常有大改动（好在 7.0 后终于强多了）。&lt;/p&gt;
&lt;p&gt;所以我推荐的升级策略是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保守派：根据 AGP 的&lt;a href=&quot;https://developer.android.com/studio/releases/gradle-plugin&quot;&gt;文档&lt;/a&gt;按最低版本进行升级（详见下图），例如 AGP 4.2.0+ 对应 Gradle 6.7.1+；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;激进派：每个补丁版本(x.y.1/2/3)或者每个版本都升（Gradle 没有 -betaX 的版本习惯，一般就是 Nightly 和 RC）。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210806211434.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;另外，Gradle 7.0 后的版本原生支持了 M1，我个人的使用体验还不错。&lt;/p&gt;
&lt;h2 id=&quot;android-gradle-plugin&quot; tabindex=&quot;-1&quot;&gt;Android Gradle Plugin&lt;/h2&gt;
&lt;p&gt;AGP 的版本搭配限制我们在前面基本都介绍完了，以 7.0 为例，我们来看官方 Release Note 的兼容说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210806214019.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;额外补充一点：从 AGP 7.0 起，其版本会&lt;a href=&quot;https://android-developers.googleblog.com/2020/12/announcing-android-gradle-plugin.html&quot;&gt;同步 Gradle 的 major 版本&lt;/a&gt;，严格遵守 Semantic Versioning 体系（之前同步的是 AS 的版本）。也即 AGP 7.x 会适配 Gradle 7.x 的版本。不过 AGP 的发布时间依旧是随着 AS 一起发布，并且目前来看其 alpha/beta 的数字是跟随 AS 的，所以其实可以当成三者形成了某种默契的同步机制。&lt;/p&gt;
&lt;p&gt;所以我推荐的升级策略是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保守派：随 AS 正式版升级（或适当跳过第一个大版本更迭）；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;激进派：每个版本都升，或从 alpha/beta 开始升级，例如要做 Gradle 插件适配。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;android-studio&quot; tabindex=&quot;-1&quot;&gt;Android Studio&lt;/h2&gt;
&lt;p&gt;AS 基本上没有什么搭配限制，只要你用的之前正式版的 AGP，AS 就可以向下兼容。我推荐的升级策略是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保守派：适当跳过第一个大版本更迭；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;激进派：每个版本都升，或从 alpha/beta 开始升级，例如要做 IDE 插件适配或者对 Compose、调试工具新功能等有需求的。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，由于 AS 基于的 IDEA 社区版二次开发，整体稳定性、新特性支持的速度都不如 IDEA Ultimate，例如 Gradle 的 nesting Composite Build 目前就不在 AS 支持范围，见该 &lt;a href=&quot;https://issuetracker.google.com/issues/189366120&quot;&gt;issue&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后，自 Arctic Fox 2020.3.1 起，AS 原生支持了 M1，但如果想有更流畅的体验，我认为 BumbleBee 2021.1.1 Canary 效果更好一些。&lt;/p&gt;
&lt;h2 id=&quot;idea&quot; tabindex=&quot;-1&quot;&gt;IDEA&lt;/h2&gt;
&lt;p&gt;IDEA 的主要搭配限制来自于 Android Plugin（Android IDE 插件）的版本适配。一般来说，在 AS 新的正式版本发布之后，下一个 IDEA 的正式版本就会带上该新版插件，从而对Android 开发包括 AGP 做支持。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210807154410.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;偶尔也有等比较久的时候，比如今年 AS&amp;amp;AGP 4.2 在 4 月发布，而直到 7 月 IDEA 2021.2 &lt;a href=&quot;https://www.jetbrains.com/idea/whatsnew/#Other&quot;&gt;发布&lt;/a&gt;时，才更新了 Android Plugin，官方的说法是 Google 放出 AGP 4.2 的源码时间晚了些，导致没赶上 2021.1 的版本。&lt;/p&gt;
&lt;p&gt;我推荐的升级策略是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保守派：仅升级正式版本；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;激进派：从 EAP 或 RC 开始升级，例如会获得比较好的 Kotlin 支持、更早的 AGP 支持，以及 M1 平台的优化等。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，2021.2 也是让我在 M1 感觉终于不再有什么卡顿的版本了。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;我自己由于使用 M1 的平台 + 适配一些 &lt;a href=&quot;https://github.com/2BAB&quot;&gt;Gradle Plugin&lt;/a&gt;，经常会使用 beta 甚至 alpha 的 AGP（作为 Runtime 的 library），配合最新的 IDEA Ultimate 开发起来还是挺顺手。&lt;/p&gt;
&lt;p&gt;而公司项目，现阶段 x86 平台我觉得可以使用如下配置，ARM M1 则根据上文调整对应的工具版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK 11（由于 AGP 升了迟早要升级）&lt;/li&gt;
&lt;li&gt;Gradle 7.1.1（7.2 支持 1.5.21 后可以升级）&lt;/li&gt;
&lt;li&gt;Kotlin 1.4.31&lt;/li&gt;
&lt;li&gt;AGP 4.2.2（7.0 稳定了新版的 Variant API，马上 7.1 也稳定新版的 DSL，不需要 Compose 的话可以观望观望）&lt;/li&gt;
&lt;li&gt;AS 4.2.2（不需要 Compose 的话可以观望观望）&lt;/li&gt;
&lt;li&gt;IDEA 2021.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt; Github / 公众号 / 播客 / 微博 / Twitter&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>AB 的工程效率小集 #1 七月刊</title>
    <link href="https://2bab.me/zh/blog/2021-07-11-dev-exp-monthly-update-01/"/>
    <updated>2021-07-11T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-07-11-dev-exp-monthly-update-01/</id>
    <content type="html">&lt;p&gt;约是年初开始，我持续不断地在一些较有讨论氛围的社区、社群，参与我感兴趣的技术话题互动。经过半年的体验，这类持续输入输出对我个人有不少的收获。一方面我能从这些社区社群看到不少新东西，例如第一时间看到世界各地的技术访谈、博客、新闻、活动；另外一方面我的知识体系在反哺社区和讨论的过程中逐步完善。&lt;/p&gt;
&lt;p&gt;可惜，不少的社区社群并不能被搜索引擎记录，例如 Slack、星球、以及各种普通 IM 工具内的群组。在第八期&lt;a href=&quot;https://binary.2bab.me/episodes/008-enlightenment-n-self-innovation&quot;&gt;“二分电台”&lt;/a&gt;讨论”持续学习“话题时，Randy 和我聊到了&lt;a href=&quot;https://www.swyx.io/learn-in-public/&quot;&gt;《Learn in Public》&lt;/a&gt;这篇文章——是的，&lt;strong&gt;固然加入了某个 Slack 社区后可以在里面搜索历史记录，但是它依然不是搜索引擎可见的&lt;/strong&gt;。特别像 Gradle 这类大家“熟悉的陌生人”，我们每天都在用，但真碰到一个什么奇怪的问题想赶紧知道（不一定是 bug，可能只是一个用法、一个 API 的理解等），目前最好的办法还是去他们的 Slack 社区互动，纵然他们有论坛和 StackOverflow 的 tag。&lt;strong&gt;这些“封闭”的内容无法有效地被更广泛的人群接受，新手很难从外部获取到最新的资讯、讨论；以至于我有时候甚至觉得技术分享的视频如果不把 timeline 和关键字标注出来，也会流失大量本来可以点击进入的观众。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，我一直有这个想法：做一个月度或者半月的小集合，把我参与过、具有通用价值的一些东西记录下来、公开出去。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这类问答式的内容，如果单独写成一篇，可能有些 overkill 了，所以定位在一个月度的小集的形式；&lt;/li&gt;
&lt;li&gt;目前以我参与过的内容为主，在所有的内容确保是无版权、或者我拥有版本的情况下，再整理、记录、沉淀，后面也会考虑加入一些 Slack 或其他群组上我看到的精彩内容；&lt;/li&gt;
&lt;li&gt;至于分发形式，我斟酌的结论是：先在我的博客记录，公众号/掘金等二次分发，如果有其他朋友参与一起做且方向比较统一在工程效率和开发体验这块的话，可以尝试 Substack 这种邮件订阅的形式做订阅。但目标是不变的，需要在公开的互联网领域留下这些有参考价值的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK，那我们进入第一期的正文。&lt;strong&gt;2021 年 7 月工程效率小集：&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%9E%84%E5%BB%BA%EF%BC%9Agradle%2Fagp%2Fci%2F...&quot; tabindex=&quot;-1&quot;&gt;构建：Gradle/AGP/CI/...&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://gradle-community.slack.com/archives/CA7UM03V3/p1624871227328200&quot;&gt;Q1&lt;/a&gt;: To pass a bunch of File which come from different dirs, should I use &lt;code&gt;SetProperty&amp;lt;File&amp;gt;&lt;/code&gt; or &lt;code&gt;SetProperty&amp;lt;RegularFile&amp;gt;&lt;/code&gt; ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@vierbergenlars: I think a FileCollection is better suited for that.
It also gives you some nice additional methods to add files and to manage them.&lt;/li&gt;
&lt;li&gt;@wolfs: I agree, ConfigurableFileCollection is the analog to RegularFile/DirectoryProperty for multiple files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这则问答来自于 Gradle Slack 社区，起因是我在写一个 demo 时发现有一个场景是需要收集一些来自不同文件夹的文件，并传入到某个 Task。对于这类场景，不管是多个文件、文件夹，或者混合的场景，使用 &lt;code&gt;FileCollection&lt;/code&gt; 都是比较好的选项，因为它的 API 在面对这类场景时比较友好，比如 &lt;code&gt;from(varags Object)&lt;/code&gt;。如果想保持一致性都使用 &lt;code&gt;Provider&lt;/code&gt;，可以使用 &lt;code&gt;FileCollection.getElements()&lt;/code&gt; API 转换。对这些类不了解的朋友可以参考 &lt;a href=&quot;https://docs.gradle.org/current/userguide/working_with_files.html#working_with_files&quot;&gt;Working with Files&lt;/a&gt; 和 &lt;a href=&quot;https://docs.gradle.org/current/userguide/lazy_configuration.html&quot;&gt;Lazy Configurations&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://gradle-community.slack.com/archives/CA7UM03V3/p1624759837322700&quot;&gt;Q2&lt;/a&gt;: Gradle 7.1 + zulu arm64 JDK11 do not run natively on my M1 Mac mini.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A2: 这则问题我后来自己发现了问题（小黄鸭调试法），因为我使用 SDKMAN! 安装的 zulu 的sdk，但是 SDKMAN! 本身是通过 Rosetta2 转译运行的，加上它在命令行 &lt;code&gt;bash_profile&lt;/code&gt; / &lt;code&gt;zshrc&lt;/code&gt; 添加了一些东西（没细看了...大概是为了支持 Java 版本的切换等），导致 Gradle 起 java 进程时也都通过 Rosetta2 去跑。删掉重装后即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210712213206.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://gradle-community.slack.com/archives/CA83B1VLL/p1622211648007000&quot;&gt;Q3&lt;/a&gt;：From the performance perspective, is buildSrc still a bit worse than composite build?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A3:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@Vampire: This should still be true, but depending on your test project you might or might not be hit by a performance hit compared to composite builds. If your test project is too simple you will for example not see any difference. The point is, that &lt;code&gt;buildSrc&lt;/code&gt; is automatically added to the class path of all build scripts in the main build and due to that the runtime class path of all tasks changed and thus all tasks in all projects are out of date if anything in &lt;code&gt;buildSrc&lt;/code&gt; changes. If you use composite builds instead, only the dependencies you actually use by applying a plugin or adding it to the &lt;code&gt;buildscript&lt;/code&gt; dependencies block are added to the class path of that specific build script, so all other build scripts / projects stay unaffected. If you apply all plugins you have to all projects you have, then there sill probabaly be no performance difference, as then still all tasks are going to be out of date when something is changed.I personally only use composite builds nowadays, also because I can then easily use composite build within (though there is a &amp;quot;work-around&amp;quot; now) and I can also move and rename it, for example to &lt;code&gt;&amp;lt;root project&amp;gt;/gradle/build-logic&lt;/code&gt; instead of &lt;code&gt;&amp;lt;root project&amp;gt;/buildSrc&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@CristianGM: And...I should add another small difference, buildSrc runs its tests when it compiles, while composite build doesn&#39;t&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这则问题讨论了在哪些情况下 composite-build 优于 buildSrc，主要的性能问题集中在是否把这个额外的编译脚本模块 apply 到所有的主代码模块中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://t.me/AndroidDevCn/195956&quot;&gt;Q4&lt;/a&gt;: 我执行 gradlew bundle 命令的时候，为什么每个 product flavor 里面的配置都会被执行一次？如何给渠道设置版本名称？&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;producatFlavors &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;    india &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;archivesBaseName&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;urbanic-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;versioNameIndia&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;currentVersionCode&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    india &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;archivesBaseName&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;urbanic-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;versioNameOther&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;currentVersionCode&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A4:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gradle 配置阶段的脚本是全部都会执行的，不然没法得到配置好的 Extension，也没办法得到 Task Graph；&lt;/li&gt;
&lt;li&gt;就这段脚本而言它是执行 Flavor 的配置，像 &lt;code&gt;dimension&lt;/code&gt; &lt;code&gt;applicationIdSuffix&lt;/code&gt; &lt;code&gt;buildConfigField&lt;/code&gt; 都是作用于 flavor 的（隐藏的 this 是 ProdcutFlavor)，&lt;code&gt;setProperty&lt;/code&gt; 是作用于 project 的，所以会被覆盖；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;archivesBaseName&lt;/code&gt; 的配置看了下是从 Gradle API 来的，并不是 AGP 的（AGP 有挺多地方用了不过，但是没法搞 variant aware 的策略），如果你真想 hack 一下，那就根据你输入的命令 hardcode 对应的 property：&lt;code&gt;if(gradle.startParameter.getTaskNames().get(0).contains(&amp;quot;India&amp;quot;)) { setProperty(...) }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;现在应该用这个了 Artifacts API：&lt;a href=&quot;https://github.com/android/gradle-recipes/blob/agp-4.2/Kotlin/getApksTest/app/build.gradle.kts&quot;&gt;https://github.com/android/gradle-recipes/blob/agp-4.2/Kotlin/getApksTest/app/build.gradle.kts&lt;/a&gt; （可以切分支查看不同版本 AGP 的 API，7.0 后稳定了），添加一个 Task 获取对应渠道 APK 后再修改名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Q5: 对于想在 assembleDebug 后对 APK 执行一些操作的情况，可以用 &lt;code&gt;finalizeBy()&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A5:&lt;/p&gt;
&lt;p&gt;我也经常忍不住用😂，但是这个 API 有几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果一个 task 有多个 finalizer，它们是按 finalizer 的名字排序（相当于乱序；&lt;/li&gt;
&lt;li&gt;Finalizer 可不管前一个任务执行成功没(见附图)，只要前一个任务执行了，它就总是会接着执行；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面两点其实是 by design 的，所以官方文档的用例是用来做 task 的资源清理工作。我一直觉得自己有点滥用，不过有需要没办法的时候也只能用。&lt;/p&gt;
&lt;p&gt;就这个 case 可能的几个别的解法是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用 &lt;code&gt;doLast()&lt;/code&gt;，但是只接受 &lt;code&gt;Action&lt;/code&gt; 而不是 &lt;code&gt;Task&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;反向 &lt;code&gt;dependsOn()&lt;/code&gt;, 让 &lt;code&gt;apkRenameDebug.dependsOn(resguardDebug)&lt;/code&gt;，然后执行终端执行 &lt;code&gt;apkRenameDebug&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;加一个类似 lifecycle task 的锚点 task 作为最后运行的 task，然后把前面那些 task 往他上面 &lt;code&gt;dependsOn()&lt;/code&gt;，算是 2 的优化版（比较好看干净）；&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;buildFinish()&lt;/code&gt; 生命周期监听器，所有任务跑完后取 apk 做处理可以不需要依赖 AGP；&lt;/li&gt;
&lt;li&gt;用新的 Artifacts API （见 A4 的链接）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/lu2nXbi7yEZ1p0eoD3eKMSCjsKYy.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;kotlin-%E5%91%A8%E8%BE%B9%EF%BC%9Akoin%2Fktor%2Fcoil%2F...&quot; tabindex=&quot;-1&quot;&gt;Kotlin 周边：Koin/Ktor/Coil/...&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://kotlinlang.slack.com/archives/C0A974TJ9/p1623070601174400&quot;&gt;Q1&lt;/a&gt;: Is it possible a feature/plugin depends on another?I need to transform the type with my feature before JsonFeature get it. The problem is JsonFeature should be able to parse SomeError or User, so I have to unwrap it from my Either before, if not, JsonFeature will try it with the Either class and it will fail.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A1: For ktor client&#39;s plugin I used/created, I don&#39;t think there&#39;s a direct approach to implement this. But if u look into their implementations, can see the interceptor pipelines - base on the lifecycle of those pipeline, u can define the running sequence and thus make dependent relationship indirectly. In this case, probably u can use HttpResponsePipeline.Receive in your custom plugin to unwrap before JsonFeature works.&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;scope&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;responsePipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;intercept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HttpResponsePipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Receive&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;info&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;body &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; ByteReadChannel&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token label symbol&quot;&gt;@intercept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Do something you want and get the final result in String (others types I did not try)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; result&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readRemaining&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;proceedWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;HttpResponseContainer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;info&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ByteReadChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Q2: Coil 加载时报错 &lt;code&gt;Software rendering doesn&#39;t support hardware bitmaps&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A2：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://coil-kt.github.io/coil/recipes/#shared-element-transitions&quot;&gt;Recipes - Coil&lt;/a&gt;，你大概率是碰到了：Shared element transitions are incompatible with hardware bitmaps；&lt;/li&gt;
&lt;li&gt;除了上面那个，还有一些机型原生不支持，以及 OS 版本原生不支持的，库本身应该是处理好了：&lt;a href=&quot;https://github.com/coil-kt/coil/blob/main/coil-base/src/main/java/coil/memory/HardwareBitmapService.kt&quot;&gt;https://github.com/coil-kt/coil/blob/main/coil-base/src/main/java/coil/memory/HardwareBitmapService.kt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;查看所有相关 issue，比如&lt;a href=&quot;https://wx.zsxq.com/dweb2/index/group/51285415155554&quot;&gt;这个&lt;/a&gt;，没有看到超出上述范围的讨论，所以我觉得应该就是这样啦。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt; Github / 公众号 / 播客 / 微博 / Twitter&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>继往开来：Google I/O 21 Android Gradle Plugin 更新总结</title>
    <link href="https://2bab.me/zh/blog/2021-06-17-google-io-21-agp-recap/"/>
    <updated>2021-06-17T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-06-17-google-io-21-agp-recap/</id>
    <content type="html">&lt;p&gt;距离 Google I/O 2021 已经过去了将近一个月，最近几天捋了捋关于 Android Gradle Plugin（AGP）方面的东西，主要集中在 “What’s new in Android Gradle plugin” 这个 session。不过由于 2020 年没有 Google I/O，线下的活动也因为疫情全部暂停，所以这个 session 短短 11 分钟，信息量却相当大，几乎可当作是这两年更新的重点浓缩（前后看了三遍）。也因此，这篇文章里我会放出很多额外的参考资料，挖了下最近一两年大家可能忽略了的 talks/posts/repos。文章整体脉络仍按这个 session 的 agenda 来。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87&quot; tabindex=&quot;-1&quot;&gt;性能提升&lt;/h2&gt;
&lt;h3 id=&quot;configuration-cache&quot; tabindex=&quot;-1&quot;&gt;Configuration Cache&lt;/h3&gt;
&lt;p&gt;Gradle 的生命周期分为大的三个部分：初始化阶段（Initialization Phase)，配置阶段（Configuration Phase），执行阶段（Execution Phase）。其中任务执行的部分只要处理恰当，已经能够很好的进行缓存和重用——重用已有的缓存是加快编译速度十分关键的一环，如果把这个机制运用到其他阶段当然也能带来一些收益。仅次于执行阶段耗时的一般是配置阶段，而今年 AGP 给我们带来的 Gradle &lt;a href=&quot;https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:requirements&quot;&gt;Configuration Cache&lt;/a&gt; 的支持，一项自 &lt;a href=&quot;https://blog.gradle.org/introducing-configuration-caching&quot;&gt;Gradle 6.6&lt;/a&gt; 起开始孵化的新功能。它使得配置阶段的主要产出物——Task Graph 可以被重用，在示例的项目中这个优化可以带来 8s 左右的不必要等待（如果 Gradle 脚本配置并没有改变）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210617155730.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;想体验这项优化只需要在执行 Gradle 命令时加入 &lt;code&gt;--configuration-cache&lt;/code&gt;，例如 &lt;code&gt;./gradlew --configuration-cache help&lt;/code&gt;。由于 Configuration Cache 现在还未完全稳定，如果你想一直开启（包括享受 IDE Sync 时的优化），需要使用如下 properties：&lt;/p&gt;
&lt;pre class=&quot;language-properties&quot;&gt;&lt;code class=&quot;language-properties&quot;&gt;&lt;span class=&quot;token key attr-name&quot;&gt;org.gradle.unsafe.configuration-cache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token value attr-value&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第一次使用时会看到计算 Task Graph 的提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Calculating task graph as no configuration cache is available for tasks: :test-app:assembleDebug&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;成功后会在 Build 结束时提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Configuration cache entry stored.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之后 Cache 就可以被下一次构建复用（如果没有构建脚本修改）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reusing configuration cache.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;51 actionable tasks: 2 executed, 49 up-to-date&lt;/p&gt;
&lt;p&gt;Configuration cache entry reused.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为插件使用者，发现常用插件出现不支持的情况，可先搜索是否有相同的问题已经出现，例如下面这个 Kotlin 1.4.32 插件和 Gradle 7.0 配合时出现的问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-agp-config-cache-kotlin-plugin.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在这个 YouTrack &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-43605&quot;&gt;issue&lt;/a&gt; 下我们可以简单看到通过升级 Kotlin 插件版本至 1.5.0 以上即可解决。&lt;/p&gt;
&lt;p&gt;事实上 AGP/Kotlin/Gradle 核心的几个插件（主要是背后的 Tasks）在最近的版本都已经支持 Configuration Cache，通过这几篇文档/issue 可以了解大概：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gradle/gradle/issues/13490&quot;&gt;Help community Gradle plugins adopt the configuration cache #13490 - Gradle Github Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/studio/releases/gradle-plugin#4.2-gradle-properties&quot;&gt;Gradle Properties Change - Android Gradle Plugin 4.2 Release Note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/gradle.html#gradle-configuration-cache-support&quot;&gt;Gradle Configuration Cache Support - Kotlin Doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而作为插件开发者，则还要关心 Configuration Cache 的适配工作。其重点在于：Task 的参数和内部实现需要避开直接传入/使用 Gradle 的几个 Context 及一些无法序列化的类。以我维护的 &lt;a href=&quot;https://github.com/2BAB/Seal&quot;&gt;Seal&lt;/a&gt; 插件为例，它是一个解决 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 冲突的小插件，我们执行 &lt;code&gt;/gradlew --configuration-cache :test-app:assembleDebug&lt;/code&gt; 会发现有两个问题待修复：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-agp-config-cache-seal-plugin.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;通过构建结束时输出的 Configuration Cache HTML Report 我们可以查看到详细的堆栈：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-agp-config-cache-error-html.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;针对这个错误，其实仅仅需要把 &lt;code&gt;project.logger&lt;/code&gt; 改成 &lt;code&gt;this.logger&lt;/code&gt; 的引用即可：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-agp-config-cache-git-change.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;对于更复杂的规则和用例，可以参考 Gradle 的文档以及 AGP 兼容 Configuration Cache 的心路历程（修复了 400 多个 issues）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:requirements&quot;&gt;Configuration Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/androiddevelopers/configuration-caching-deep-dive-bcb304698070&quot;&gt;Configuration caching deep dive - Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，有个 Gradle 官方维护的 &lt;a href=&quot;https://github.com/gradle/android-cache-fix-gradle-plugin&quot;&gt;android-cache-fix-gradle-plugin&lt;/a&gt; ，一些 AGP build cache、configuration cache 的特殊问题，可以在此处查阅下，说不定正好是你项目碰到的。&lt;/p&gt;
&lt;h3 id=&quot;non-transitive-r-classes&quot; tabindex=&quot;-1&quot;&gt;Non-transitive R-classes&lt;/h3&gt;
&lt;p&gt;事实上 R 文件的这类特性已经发展了很多年，可以参考这篇按时间顺序整理的&lt;a href=&quot;https://www.mobileit.cz/Blog/Pages/r-class.aspx&quot;&gt;文章&lt;/a&gt;。但是最新的 &lt;code&gt;nonTransitiveAppRClass&lt;/code&gt; 特性需要 AGP 7.0 及以上，目前资料较少，在 Android Studio Arctic Fox 版本发布说明中有部分提及：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;非传递性 R 类重构：在 Android Gradle 插件中使用非传递性 (non-transitive) R 类，可以为具有多个模块的应用带来更快的构建速度。它通过确保每个模块只包含对其自身资源的引用，而不从依赖关系中提取引用来防止资源的重复。您可以通过重构 (Refactor) &amp;gt; 迁移到非传递性 R 类 (Migrate to Non-transitive R Classes) 来使用此功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开启方式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-agp-non-transitive-r-as-refactor2.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这个操作帮助你自动添加两行特性开启的代码到 &lt;code&gt;gradle.properties&lt;/code&gt;，并重新 build project：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-agp-non-transitive-r-properties.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;cacheable-lint-task&quot; tabindex=&quot;-1&quot;&gt;Cacheable Lint Task&lt;/h3&gt;
&lt;p&gt;Lint 的运行一直是耗时大户，在 AGP 7.0 后（最早计划于是 3.5，见这篇&lt;a href=&quot;https://docs.gradle.org/current/userguide/caching_android_projects.html#lint&quot;&gt;文档&lt;/a&gt;），终于正式成为可缓存的 Task。&lt;/p&gt;
&lt;h3 id=&quot;%E5%85%B6%E4%BB%96&quot; tabindex=&quot;-1&quot;&gt;其他&lt;/h3&gt;
&lt;p&gt;另外 AS + AGP 自 4.x 以来还有一些提升的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gradle Kotlin DSL 体验和性能提升，可以看到 &lt;a href=&quot;https://github.com/google/iosched&quot;&gt;Google I/O Android App&lt;/a&gt; 项目已经全部改成 &lt;code&gt;*.gradle.kts&lt;/code&gt; 脚本；&lt;/li&gt;
&lt;li&gt;AAPT2 的性能提升；&lt;/li&gt;
&lt;li&gt;JDK 11 引入的性能提升；&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以在 AGP/AS 的 Release Notes 里找到这些信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-new-as-bumblebee.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%96%B0%E7%9A%84-dsl&quot; tabindex=&quot;-1&quot;&gt;新的 DSL&lt;/h2&gt;
&lt;h3 id=&quot;dsl-doc-%E8%BF%81%E7%A7%BB%E8%87%B3-android.com&quot; tabindex=&quot;-1&quot;&gt;DSL Doc 迁移至 &lt;a href=&quot;http://android.com/&quot;&gt;android.com&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;旧的 AGP DSL &lt;a href=&quot;https://google.github.io/android-gradle-dsl/&quot;&gt;文档&lt;/a&gt; 从 3.4 之后就不再更新了。新的文档迁移至 &lt;a href=&quot;https://developer.android.com/reference/tools/gradle-api&quot;&gt;android.com&lt;/a&gt;，更加统一。依旧可按版本查看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前版本（Current Release）：即稳定版本 4.2；&lt;/li&gt;
&lt;li&gt;预览版本（Preview Releases）：即 beta 7.0 和 alpha 7.1 测试版；&lt;/li&gt;
&lt;li&gt;之前的版本（Past Releases）：即之前所有的老版本，但由于中间的更迭/切换，所以其实 3.5 -&amp;gt; 4.0 版本的文档都没有；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-dsl-doc.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这个变化也反映在了 &lt;a href=&quot;https://android.googlesource.com/platform/manifest/+refs&quot;&gt;google source&lt;/a&gt; 的 tag 上，对于 AGP 源码来说 &lt;code&gt;gradle-x.y.z&lt;/code&gt; 的 tag 自 3.4.0 之后就没有了，目前你可以使用 &lt;code&gt;studio-x.y.z&lt;/code&gt; 例如 &lt;code&gt;studio-4.2.0&lt;/code&gt; 来反向定位 AGP 的版本。&lt;/p&gt;
&lt;h3 id=&quot;android-studio-%E6%8F%90%E4%BE%9B%E7%9A%84-agp-%E5%8D%87%E7%BA%A7%E5%8A%A9%E6%89%8B&quot; tabindex=&quot;-1&quot;&gt;Android Studio 提供的 AGP 升级助手&lt;/h3&gt;
&lt;p&gt;为了让开发者便捷流畅地升级 AGP，AGP 配合 AS 的推出了升级助手功能。这个新特性已经迭代了几个版本，目前对 Gradle Groovy DSL 脚本的升级十分有用，当你看到升级提示时（一般发生在刚打开一个工程时）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-agp-upgrade-assistant.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;点击 &lt;code&gt;Upgrade&lt;/code&gt; 还会有预览功能（截图自 session 的 slide）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-agp-upgrade-assistant-2.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;不过对于 Gradle Kotlin DSL 的支持还有待补齐，例如基础的 &lt;code&gt;compileSdkVersion&lt;/code&gt; 等废弃 DSL 的迁移也未支持：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-agp-upgrade-assistant-3.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;当然，复杂的对象引用也无法帮你直接修改，例如 &lt;code&gt;classpath(Deps.agp)&lt;/code&gt;，这已经超过该工具能做的范围。你可以把其当成类似 &lt;code&gt;Java&lt;/code&gt; 转 &lt;code&gt;Kotlin&lt;/code&gt; 的辅助工具，先用它快速升级和整理基础的 DSL，然后再手动对照 DSL 文档修改出错的小部分。&lt;/p&gt;
&lt;h2 id=&quot;%E6%96%B0%E7%9A%84-variant-api&quot; tabindex=&quot;-1&quot;&gt;新的 Variant API&lt;/h2&gt;
&lt;p&gt;Variant API 是这两年 Android 与插件开发相关的最重要更新，如果之前没有针对 AGP 生态开发过协同插件的朋友可以通过下面这张图“了解什么是 Variant”？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-variant-api-definition-2.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Variant API 的更新可以概括：为了使协同插件的开发者依赖于更稳定的 API，将原来的 &lt;code&gt;com.android.tools.build:gradle&lt;/code&gt; 包拆分成 &lt;code&gt;gradle&lt;/code&gt; 和 &lt;code&gt;gradle-api&lt;/code&gt; 两个包，做到接口和实现的隔离。实战角度来看我们可以关注两部分：Variant 遍历入口变更和部分自定义 Task 的简化。&lt;/p&gt;
&lt;h3 id=&quot;variant-%E9%81%8D%E5%8E%86%E5%85%A5%E5%8F%A3%E5%8F%98%E6%9B%B4&quot; tabindex=&quot;-1&quot;&gt;Variant 遍历入口变更&lt;/h3&gt;
&lt;p&gt;大部分 AGP 生态的协同插件都需要注册 Variant aware 的 Task，即遍历 Variant 注册与其对应的自定义 Task，例如上面提到的 Seal 插件的 &lt;code&gt;postUpdateDebugManifest&lt;/code&gt; &lt;code&gt;postUpdateReleaseManifest&lt;/code&gt;。你一定看到过这样的代码（Groovy）：&lt;/p&gt;
&lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; android &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;extensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;br /&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;applicationVariants&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;all &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variant &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; variantName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;createTask&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;project&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; variantName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者 Kotlin 的版本：&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; androidExtension &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;extensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findByType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AppExtension&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;java&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!!&lt;/span&gt;&lt;br /&gt;androidExtension&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;applicationVariants&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variant &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; variantName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;createTask&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;project&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; variantName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果是适用于 library 的插件则需要 &lt;code&gt;LibraryExtension&lt;/code&gt; 和 &lt;code&gt;libraryVariants&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这类 API 现在改成了 &lt;code&gt;gradle-api&lt;/code&gt; 内的新 API 调用：&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; androidExtension &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;extensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getByType&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ApplicationAndroidComponentsExtension&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;androidExtension&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onVariants&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variant &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里获取到的 Variant 是 &lt;a href=&quot;https://developer.android.com/reference/tools/gradle-api/7.1/com/android/build/api/variant/ApplicationVariant&quot;&gt;com.android.build.api.variant.ApplicationVariant&lt;/a&gt;，Extension 则来自于 &lt;a href=&quot;https://developer.android.com/reference/tools/gradle-api/4.2/com/android/build/api/extension/ApplicationAndroidComponentsExtension&quot;&gt;com.android.build.api.extension.ApplicationAndroidComponentsExtension&lt;/a&gt;。另外一个可能会用到的接口是 &lt;code&gt;beforeVariants(...)&lt;/code&gt;，用来控制 Variant 的构建，例如全局修改一些 Variant 的属性等。从这段 Snippet 我们可能看不出来 Variant 具体的变化，但这变化背后包含了规范的 Variant 状态流转，公开的 API 等。&lt;/p&gt;
&lt;h3 id=&quot;%E9%83%A8%E5%88%86%E8%87%AA%E5%AE%9A%E4%B9%89-task-%E7%9A%84%E7%AE%80%E5%8C%96&quot; tabindex=&quot;-1&quot;&gt;部分自定义 Task 的简化&lt;/h3&gt;
&lt;p&gt;这类简化指 Task 插入点和 Task 参数获取（注入）的简化，提供这类特性的 API 也称之为 Artifact APIs。在比较经典的模式里：对于插入点，一般我们会手动找到 Task 的前后依赖关系，使用 Gradle API 进行依赖关系重新梳理（甚至可能要自定义一些新的生命周期锚点 Task 辅助）；对于 Task 的参数，就使出各种奇技淫巧，从已有 Task 里的参数/中间产物/私有对象等找到我们需要的数据，再注入到自定义的 Task 中。而现在 Artifact APIs 规范了一套标准操作，使得我们可以简易地和已有的数据、中间产物进行交互，实战角度来看我们可以分为两种模式：&lt;/p&gt;
&lt;p&gt;复杂的 Transform/Append/Create 操作：插入 Task 到特定节点和 Task 参数注入一条龙服务，一般适用于需要定义某个具体的插入点；&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;androidComponents &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; gitVersionProvider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tasks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;GitVersionTask&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gitVersionProvider&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        gitVersionOutputFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buildDir&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;intermediates/gitVersionProvider/output&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        outputs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;upToDateWhen&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    onVariants &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variant &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; manifestProducer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tasks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ManifestProducerTask&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;ManifestProducer&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            gitInfoFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gitVersionProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;GitVersionTask&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;gitVersionOutputFile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;artifacts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;manifestProducer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;wiredWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ManifestProducerTask&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;outputManifest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SingleArtifact&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MERGED_MANIFEST&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;纯粹的 Get：主动获取 intermediates，一般适用于较为独立的 Task，没有严苛的插入位置要求（但是藉由 Provider 的传递会有隐式的 Task 依赖），没有需要替换等操作：&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;androidComponents &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    onVariants &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variant &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;        project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tasks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;DisplayApksTask&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;DisplayApks&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            apkFolder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;artifacts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SingleArtifact&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;APK&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            builtArtifactsLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;artifacts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBuiltArtifactsLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%9B%B4%E5%A4%9A&quot; tabindex=&quot;-1&quot;&gt;更多&lt;/h3&gt;
&lt;p&gt;从实用的角度来说，新的 Variant 接口、Extension 接口公开的 API 比之前少了，但更加规范。Artifacts 作为手动获取 Task input/output 的补充，目前的公开 API 也还比较少，希望插件开发者们在遇到合理的需要公开的 API 但目前还没有时，给 AGP team 多提点 issue :)。&lt;/p&gt;
&lt;p&gt;另外，限于篇幅我无法在这里介绍全部的 Variant API 更新，包括新的 &lt;code&gt;Provider&amp;lt;T&amp;gt;&lt;/code&gt; API 引入（Lazy Configuration），Variant 状态流转，更多种的 Artifacts API 的使用，如何借鉴它的设计来自己动手解决那些还没有被封装、公开的接口等等。你可以从下面几份资料中获得更多的灵感：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OTANozHzgPc&quot;&gt;From Gradle properties to AGP APIs - Android Dev Summit &#39;19&lt;/a&gt;：讲解了 Variant API 的基石—— &lt;code&gt;Provider&amp;lt;T&amp;gt;&lt;/code&gt; API 及其衍生的多个子类，Variant 状态流转及其 API 的多种使用姿势等；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/androiddevelopers/new-apis-in-the-android-gradle-plugin-f5325742e614&quot;&gt;New APIs in the Android Gradle Plugin - Android Developers Blog&lt;/a&gt;：介绍了 Variant API 想法设计的由来，新 API 的使用；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/android/gradle-recipes/tree/agp-7.1&quot;&gt;android/gradle-recipes&lt;/a&gt;：分别提供了 Groovy/Kotlin DSL 下 Variant API 常用的示例代码；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/studio/releases/gradle-plugin-roadmap&quot;&gt;Android Gradle Plugin DSL/API migration timeline&lt;/a&gt;：未来三年 New DSL 和 Variant API 相关的 milestone；&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/lazy_configuration.html&quot;&gt;Lazy Configuration&lt;/a&gt;：Task 配置延迟获取，&lt;code&gt;Provider&amp;lt;T&amp;gt;&lt;/code&gt; 及其各种子类，Task 隐式依赖等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E6%96%B0%E7%9A%84-asm-api&quot; tabindex=&quot;-1&quot;&gt;新的 ASM API&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/io-2021-asm-api.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;ASM API 是之前 Transform API 的替代品，旨在更低成本地提供一个 Class -&amp;gt; Dex 之间的插入点用以修改字节码。它没有了之前 Transform API 的灵活性，比如目前看起来它和 ASM 字节码工具是绑定的，不支持 Javassist 或者 Aspect 等。但同时，它拥有更好的性能，更低的使用成本（指实现 transform 本身，因为 ASM 实际上是相对 Javasssist Aspect 更底层的 API，更灵活、学习成本也更高），以及更容易适配 Gradle 的新特性。目前刚刚开始孵化，从 API Doc 来看还不推荐开发者使用它来构建一个生产环境的插件。&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; ExamplePlugin &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Plugin&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Project&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;project&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Project&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; androidComponents &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;extensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AndroidComponentsExtension&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;java&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        androidComponents&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onVariants&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; variant &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;            variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;transformClassesWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ExampleClassVisitorFactory&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;java&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                                 InstrumentationScope&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ALL&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writeToStdout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            variant&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAsmFramesComputationMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;FramesComputationMode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;COPY_FRAMES&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; ExampleParams &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; InstrumentationParameters &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token annotation builtin&quot;&gt;@get:Input&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; writeToStdout&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Property&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Boolean&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; ExampleClassVisitorFactory &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        AsmClassVisitorFactory&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ExampleParams&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createClassVisitor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;            classContext&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ClassContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            nextClassVisitor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ClassVisitor&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ClassVisitor &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parameters&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;writeToStdout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function&quot;&gt;TraceClassVisitor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextClassVisitor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PrintWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function&quot;&gt;TraceClassVisitor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextClassVisitor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PrintWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;trace_out&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isInstrumentable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;classData&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ClassData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Boolean &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; classData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.example&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码用到的 API 可以参考如下说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/tools/gradle-api/7.1/com/android/build/api/component/Component.html#transformClassesWith(java.lang.Class,%20com.android.build.api.instrumentation.InstrumentationScope,%20kotlin.Function1)&quot;&gt;Component#transformClassesWith(...)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/tools/gradle-api/7.1/com/android/build/api/instrumentation/InstrumentationParameters&quot;&gt;InstrumentationParameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对经典的 Transform 不熟悉的朋友可以看下几个知名的 Transform 库封装（挺巧都是中国公司的开源项目）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bytedance/ByteX&quot;&gt;ByteX&lt;/a&gt;（活跃）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/didi/booster&quot;&gt;Booster&lt;/a&gt;（活跃，部分功能使用）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eleme/lancet&quot;&gt;Lancet&lt;/a&gt;（不活跃）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;从开发者的角度来看，Android 工具团队在 AGP &amp;amp; AS 上更加注重 Engineering Experience 的东西了。在解决了很多历史遗留问题的同时，这次的 Session 还透露出对 AGP 周边生态的建设的长远计划，希望明年可以看到这些东西真的被更多 Android 开发者接受，到时候我也一定再写一篇 22 年版的总结和前瞻。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt; Github / 公众号 / 微博 / Twitter&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>MavenCentral 发布集成的几个坑</title>
    <link href="https://2bab.me/zh/blog/2021-05-09-trap-of-maven-central-publish/"/>
    <updated>2021-05-09T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-05-09-trap-of-maven-central-publish/</id>
    <content type="html">&lt;p&gt;由于 &lt;a href=&quot;https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/&quot;&gt;JCenter 即将关停&lt;/a&gt;，前段时间把几个活跃开源项目的发布流程迁移到了 &lt;a href=&quot;https://search.maven.org/&quot;&gt;MavenCentral&lt;/a&gt; 上去。参考的两篇文章在各个步骤细节上已经讲解的比较详细了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/kotlin/how-to-build-and-publish-a-kotlin-multiplatform-library-going-public-4a8k&quot;&gt;Publishing your Kotlin Multiplatform library to Maven Central&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://proandroiddev.com/publishing-android-libraries-to-mavencentral-in-2021-8ac9975c3e52&quot;&gt;Publishing Android libraries to MavenCentral in 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而这个过程我还是踩了些坑，以及有一些摸不着头脑的操作，让我决定写篇文章分享下。&lt;/p&gt;
&lt;h2 id=&quot;%E4%B8%8D%E8%A6%81%E4%B8%BA%E5%8D%95%E4%B8%80-artifact-%E5%81%9A%E7%94%B3%E8%AF%B7&quot; tabindex=&quot;-1&quot;&gt;不要为单一 Artifact 做申请&lt;/h2&gt;
&lt;p&gt;在申请 OSSRH Ticket 时，其实我们在申请的是 &lt;strong&gt;Group ID&lt;/strong&gt;，关键的参数是 Group Id，标题其实都不需要提及具体的 Artifact。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/20210509204352.png?imageslim&quot; alt=&quot;group-id&quot; /&gt;&lt;/p&gt;
&lt;p&gt;一般 Group ID 即域名倒置，会要求验证域名所有权、Github 仓库所有权、JCenter Group 所有权等，根据对应的回复提示操作即可。一次申请，后续所有的新包发布都不需要再申请，例如：我申请了 &lt;code&gt;me.2bab&lt;/code&gt; 的 group，那么未来所有 &lt;code&gt;me.2bab.*&lt;/code&gt; 的发布都将支持。&lt;/p&gt;
&lt;h2 id=&quot;signing-plugin-%E9%9A%90%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE&quot; tabindex=&quot;-1&quot;&gt;Signing Plugin 隐式的配置&lt;/h2&gt;
&lt;p&gt;为了校验上传的合法性，我们会对待上传的包做 GPG 签名，用的 Gradle 官方的 &lt;a href=&quot;https://docs.gradle.org/current/userguide/signing_plugin.html&quot;&gt;The Signing Plugin&lt;/a&gt;。刚开始集成时，我按照上述两篇教程的步骤做完，总感觉不对：因为并没有发现我把 signing plugin 所需要的密钥信息传入插件中。&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 插件 DSL 配置最基本的情况就只要这一行&lt;/span&gt;&lt;br /&gt;signing &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;publishing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;publications&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简单浏览下文档，然后你就会发现他竟然约定了一些 Keys，插件配置时直接从 Project 的 Properties 读取了。&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 所以你可以看到参考教程的写法都是如下&lt;/span&gt;&lt;br /&gt;ext&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;signing.keyId&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;ext&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;signing.password&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;ext&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;signing.secretKeyRingFile&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以及这个我以前一直不知道能这样干的约定，参考 &lt;a href=&quot;https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties&quot;&gt;Build Environment&lt;/a&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//. Using the following setup, you can pass the secret key (in ascii-
// armored format) and the password using the 
// ORG_GRADLE_PROJECT_signingKey and ORG_GRADLE_PROJECT_signingPassword 
// environment variables, respectively:
signing {
    val signingKey: String? by project
    val signingPassword: String? by project
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign(tasks[&amp;quot;stuffZip&amp;quot;])
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我挺不喜欢这种过于“隐式”的规定，不仔细看文档根本不能知道我到底写了啥。好在它还有提供显示配置的办法：&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;signing &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; signingKeyId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;by&lt;/span&gt; project &lt;span class=&quot;token comment&quot;&gt;// 放在哪里是可选项，不一定要用 Project Properties&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; signingKey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;by&lt;/span&gt; project&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; signingPassword&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;by&lt;/span&gt; project&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;useInMemoryPgpKeys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;signingKeyId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; signingKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; signingPassword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 这行才是关键&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tasks&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;stuffZip&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;类似做法的还有 Android Gradle Plugin 的一些 experimental config，那个由于存在和运用的广泛度太高，可能也懒得吐槽了（不过大部分的开关还是可以从 DSL 里直接配置）。如果你看到这不觉得它有问题，那么可以考虑这样的场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显而易见 DSL 可以提供有&lt;strong&gt;约束的配置&lt;/strong&gt;，优秀的 DSL 你可以直接通过 &lt;strong&gt;IDE 补全&lt;/strong&gt;就可以了解自己有哪些 API 可用，怎么交互等；&lt;/li&gt;
&lt;li&gt;如果所有的插件都用这样的隐式配置，失去了 DSL 的优势，和直接写个 JSON 配置没啥区别，&lt;strong&gt;太松散、易出错、难上手&lt;/strong&gt;，你可能不知道哪个配置文件对应哪个模块，不知道这个 Key 写对了没有等等；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下次更新插件的时候我就打算改成 &lt;code&gt;useInMemoryPgpKeys(...)&lt;/code&gt;，不然过一年又不记得这个坑，或者任何接手你项目而不了解 Signing 插件的人都会再迷惑一回。&lt;/p&gt;
&lt;h2 id=&quot;signing-plugin-%E7%9A%84%E5%AF%86%E9%92%A5%E8%B7%AF%E5%BE%84%E6%8C%87%E5%AE%9A&quot; tabindex=&quot;-1&quot;&gt;Signing Plugin 的密钥路径指定&lt;/h2&gt;
&lt;p&gt;如果采用了 &lt;code&gt;signing.secretKeyRingFile&lt;/code&gt; 配置，那么就得考虑本地和 CI 环境下的不同配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地：&lt;code&gt;../local/secret.gpg&lt;/code&gt;，建议放项目根目录或建立一个 &lt;code&gt;local&lt;/code&gt; 文件夹并整个文件夹加入 gitignore，原因是一台机器上可能用不止一份的 secret.gpg，密钥随项目走其实比较好找，对其他合作者来说 setup 也方便；&lt;/li&gt;
&lt;li&gt;CI：&lt;code&gt;/secret.gpg&lt;/code&gt;，直接放虚拟环境根目录，方便配合 RingFile 生成脚本；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;batch-upload-%2B-%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF%E6%93%8D%E4%BD%9C&quot; tabindex=&quot;-1&quot;&gt;Batch Upload + 控制面板操作&lt;/h2&gt;
&lt;p&gt;前不久在掘金看到有人写的 MavenCentral 发布教程，提到不要多个包上传后再一起 Close。事实上这是支持并且推荐的，同一 Group ID 的 Package 会放到一个 staging repo，然后就可以一起 close &amp;amp; release。如果引用了自动处理 close &amp;amp; release 流程的插件，聚合上传（batch upload）反倒能提升后续操作的成功率（SonaType 的 API 和网页都不太稳定）。比如我的这个&lt;a href=&quot;https://github.com/2BAB/Polyfill&quot;&gt;项目&lt;/a&gt;有六个模块，其实就使用了 Batch Upload 策略。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Android 开发初学：多读多看多写</title>
    <link href="https://2bab.me/zh/blog/2021-05-01-thoughts-on-android-programming-guide/"/>
    <updated>2021-05-01T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-05-01-thoughts-on-android-programming-guide/</id>
    <content type="html">&lt;p&gt;前段时间收到了明发哥翻译的《Android 编程权威指南》第四版，许久没有打开纸质书，但翻阅时的纸墨味儿依旧，仿佛回到了几年前初学 xml 布局的时候。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/android-programming-3.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我从大一暑假开始自学 Java，随后买了本不记得名的 Android 开发入门图书，学习 Android UI、交互、数据 CRUD 等等。2014 年初，正好碰上一位海归的新老师授课 Android 开发，学的 O’Reilly 的动物书《Learning Android》。全英授课，加上教材编排的顺序和我自学一半的内容不太接的上，上课多数是自己坐后排默默敲代码。好在几次实践课和期末大作业我都完成的不错，并且用的 Android Studio beta 版（还没 1.0）给老师留下了一些印象。作为一个新手开发一些自己的作品时，还偶尔会去询问那位老师，她尽管不一定碰过，但也能回一些 StackOverflow 的链接参考给我。&lt;/p&gt;
&lt;p&gt;那个暑假以及之后的两年，我有幸在一个外校研究生实验室参与项目实战，并在学长们的推荐下加入了一个在校技术团队。大量的实战经历对初学者的进步起到了明显的作用，很快我就从查书变成查 Github、StackOverflow，找一些更新更实用的东西。当时看到《第一行代码》出版，觉得相见恨晚，推荐给了技术团队的成员，当作新人入门的教材。&lt;/p&gt;
&lt;p&gt;工作多年，也读过几本优秀的进阶书籍，但没想到再一次聊起入门书籍的话题，是发生在出国工作后。Code Coverage 的考量，CI/CD 的实现和扩展，不同维度的测试手段，依赖注入等在工作和面试中碰到的问题，让我又找回当初困惑期的体验。我一边啃着 Google 的优秀项目实践案例，一边回想之前看过的书，发现一是自学的书里面其实没有太多相关的部分，二是有这些内容的书例如《Learning Android》也可能被我跳过，或因为快猛糙的实战中使用较少而遗忘。&lt;/p&gt;
&lt;p&gt;学习的本质如此：我们既需要快猛糙的“速食”解决眼前问题，也要系统地、长期地查缺补漏，完善对一个领域的理解。如果有机会，最佳的办法当然是在一开始就“愚笨”地完成每一个章节的阅读和练习，而不跳过你觉得“用不到”的基础知识。回头看，我认为没有一本书入门书籍或者在线教程可以完整 Cover 目前复杂的 Android 工程化流程以及常见需求，但是多读多看可以很大程度上解决我们的困惑。举个例子，先看《Android 编程权威指南（第四版）》可以 Cover 大量 Android 开发基础概念和细致的讲解，包含 UI/存储/网络/测试（包括依赖解耦注入）/无障碍/本地化等；再看《第一行代码（第三版）》，有更实用化的角度去增强初学者对常用控件/SDK 的组合，节奏逐步加快；最后可以借助 Android 官方最新的 Demo App 进一步巩固。没有人规定初学者应该只看一本书，也因为不存在完美的“入门图书”，所以结合多本图书、官方 Sample/Tutorial 的系统学习，加上大量的练习我觉得才能真正地完成“入门”。&lt;/p&gt;
&lt;p&gt;编程和写作有些许相似，阅读和见识是关键的一环。学涵柏老师的写作课时，他总结了几个经验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区分式阅读：基本原理与通史是为树根；期刊、新闻、报道等是为枝干；日常资讯则为枝叶。&lt;/li&gt;
&lt;li&gt;提炼观点，学会联想，多记录多写作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android 初学者可以活用借鉴：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多读：入门书籍/教程的侧重点各有不同，可结合学习；&lt;/li&gt;
&lt;li&gt;多看：经典的官方 Demo App；&lt;/li&gt;
&lt;li&gt;多练：大量的 App 开发实战，没有真实项目的同学可找一些仿写的项目，跟着做。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回到《Android 编程权威指南（第四版）》，年初时图灵的编辑英子问我有没有兴趣为它写推荐语，第一次听到时确实有点慌。不过在我拿到书稿花了几天阅读后，发现了它的几个重要特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 Kotlin 和 Jetpack 编写，紧跟开发最新趋势；&lt;/li&gt;
&lt;li&gt;测试、无障碍等章节给初学者启蒙了良好代码设计的重要性，也给图书本身增添了温度；&lt;/li&gt;
&lt;li&gt;译者明发哥的行文清爽、舒畅。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/android-programming-4.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;没有告诉明发哥的是，我第一次“认识”他是在 2019 年 8 月，《Kotlin 权威编程指南》首发的时候。当时我刚刚在自己的项目中尝试 Kotlin，马上入职的新工作也都是 Kotlin Base 的项目；而网络上的入门教程有些零散，我看到图灵上线一本新的 Kotlin 图书包含了不少详细的 Sample，立马下了单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/Screenshot%202021-05-02%20at%204.05.14%20PM.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;是好书，把我们联系在一起。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #9 Gradle 脚本调试</title>
    <link href="https://2bab.me/zh/blog/2021-02-14-android-build-script-debug-support/"/>
    <updated>2021-02-14T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2021-02-14-android-build-script-debug-support/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;『构建指北』是探索 Android 构建相关的一系列文章，涵盖了 Gradle、Android Gradle Plugin、Kotlin Script 等工具，以及相关架构上的应用。以发现问题解决问题为出发点，传递新知提高生产效率为落脚点。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;本文想讨论下目前 IDEA / Android Studio 对 *.gradle.kts 脚本调试的支持情况。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8F%AF%E8%B0%83%E8%AF%95%E8%83%BD%E5%8A%9B&quot; tabindex=&quot;-1&quot;&gt;可调试能力&lt;/h2&gt;
&lt;p&gt;关于可调试能力的定义，举个栗子，我们在常见的 &lt;code&gt;build.gradle.kts&lt;/code&gt; 添加多种脚本片段，包括但不限于属性声明、文件读取、操作 Gradle 相关 API、操作 AGP 相关 API 等等，然后里打上多个断点，编译时 remote attach 上去，查看&lt;strong&gt;能否在正确的地方挂起，能否获取到当前上下文的信息，能否执行 Expression Evaluate 等操作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;具体到测试的点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;android { default { ... } }&lt;/code&gt; 闭包内的上下文信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependencies { ... }&lt;/code&gt; 闭包内的上下文信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;build.gradle.kts&lt;/code&gt; 脚本内的一小段自定义脚本，含属性定义，Gradle API 调用，AGP API 调用，这三个点的上下文信息；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/buildSrc&lt;/code&gt; 内的 &lt;code&gt;prebuilt.gradle.kts&lt;/code&gt; 脚本内的一小段自定义脚本，同样上包含三个点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/buildScr&lt;/code&gt; 内的一个自定义插件，运行插件 apply 方法时的上下文信息（作为调试能力完备的一个参照物）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我前后做了两次实验，半年前用的 Android Studio 4.0 + IDEA 2020.1，第二次是最近用的 Android Studio 4.2.0-beta04 + IDEA 2021.1.EAP，下方的测试结果均使用第二次的 IDE 版本加上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Gradle Plugin 4.1.1&lt;/li&gt;
&lt;li&gt;Kotlin 1.4.30&lt;/li&gt;
&lt;li&gt;Gradle 6.8.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我们以 Kotlin DSL 为主，Groovy DSL 的情况可参考自行分析。&lt;/p&gt;
&lt;h2 id=&quot;%E5%A4%9A%E6%A8%A1%E5%9D%97-android-%E5%B7%A5%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;多模块 Android 工程&lt;/h2&gt;
&lt;p&gt;第一个测试我们用的多模块（并且是多 Application）的一个工程，结果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;序号&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;测试项&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;IDEA &amp;amp; Android Studio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;android { default { ... } }&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;dependencies { ... }&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;build.gradle.kts&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3.1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3.2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3.3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;prebuilt.gradle.kts&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4.1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4.2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4.3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;plugin&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/Screenshot%202021-02-15%20at%2010.30.01%20AM.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;快速小结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个 IDE 的结果完全一致（虽然 AS 是社区版但并不意外）；&lt;/li&gt;
&lt;li&gt;3.1 和 4.1 的断点可以被正确识别但无法获取上下文；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在对 &lt;code&gt;build.gradle.kts&lt;/code&gt; 进行断点调试时，必须手动指定当前的 source 具体为哪一个脚本，如上图的下拉菜单；判断依据是当前 debug 面板的 Variables 里 this 对象提供的上下文信息，比如这里 this 指向了 DefaultConfig，而我们在多个脚本内只对 app module 的 defaultConfig 进行了断点，故选择 &lt;code&gt;app&lt;/code&gt;&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;这个测试中 Gradle 脚本的调试支持还是不够完善。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%8D%95%E6%A8%A1%E5%9D%97-kotlin-%E5%B7%A5%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;单模块 Kotlin 工程&lt;/h2&gt;
&lt;p&gt;接下来我们测试下一个简单的 Kotlin 工程：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;序号&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;测试项&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;IDEA &amp;amp; Android Studio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;java { ... }&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;dependencies { ... }&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;build.gradle.kts&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3.1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3.2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3.3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;prebuilt.gradle.kts&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4.1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4.2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4.3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;plugin&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;结果和前一个多模块的 Android 工程并无差别。&lt;/p&gt;
&lt;h2 id=&quot;%E5%B8%B8%E8%A7%81%E8%B0%83%E8%AF%95%E9%97%AE%E9%A2%98&quot; tabindex=&quot;-1&quot;&gt;常见调试问题&lt;/h2&gt;
&lt;p&gt;再列几个常见的问题供大家参考：&lt;/p&gt;
&lt;h3 id=&quot;%E6%96%AD%E7%82%B9%E9%A3%9E%E7%BA%BF&quot; tabindex=&quot;-1&quot;&gt;断点飞线&lt;/h3&gt;
&lt;p&gt;在遇到的一些简单需求时，例如修改生成的 APK 名称，我们经常直接在 &lt;code&gt;build.gradle.kts&lt;/code&gt; 中进行脚本编写和调试。&lt;strong&gt;调试过程中虽然你在 AS 或者 IDEA 中看上去断点是打上了，但是执行过程中各种无法匹配源码从而飞线乱跳的情况层出不穷，这时候你需要使用上述小结里的方法手动指定对应的脚本。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;idea-%E5%AF%B9-android-plugin-%E7%9A%84%E6%94%AF%E6%8C%81&quot; tabindex=&quot;-1&quot;&gt;IDEA 对 Android Plugin 的支持&lt;/h3&gt;
&lt;p&gt;需要注意的是，一般 IDEA 对新功能的支持会更快一些，但是对 Android Gradle Plugin 的支持会比 Android Studio 慢一拍。例如当前 4.1.1 版本的 Android Studio 发布后，IDEA 才宣布我们将在 2020.3.2 支持 4.1 （但实际测试并不支持 4.1.1，&lt;a href=&quot;https://youtrack.jetbrains.com/issue/IDEA-252775&quot;&gt;issue&lt;/a&gt; 里写的 2021.1.EAP 才支持）&lt;/p&gt;
&lt;h3 id=&quot;%E4%BD%BF%E7%94%A8-plugin-%E5%8C%85%E8%A3%85&quot; tabindex=&quot;-1&quot;&gt;使用 Plugin 包装&lt;/h3&gt;
&lt;p&gt;早期基于 Groovy DSL + &lt;code&gt;build.gradle&lt;/code&gt; 的脚本（大概在 AGP 2.x 时期），调试的支持更差。但有一种曲线救国的方法支持上述第三个测试点：把 &lt;code&gt;build.gradle&lt;/code&gt; 内的自定脚本块封装成一个 Plugin。但目前 AS 4.2.0-beta04 或 IDEA 2021.1.EAP 中测试都不可行的。而 Kotlin DSL 这边虽然 API 介绍中看上去支持，但实际上插件无法被创建导致脚本编译不通过，也就无从谈起 Debug 了，这里给出一个 &lt;a href=&quot;https://github.com/gradle/gradle/issues/13667&quot;&gt;issue&lt;/a&gt; 参考链接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/Screenshot%202021-02-15%20at%204.54.37%20PM.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;build.gradle(.kts)-%E5%9C%A8-ide-%E4%B8%AD%E6%98%BE%E7%A4%BA%E4%BA%86-run-%E6%8C%89%E9%92%AE&quot; tabindex=&quot;-1&quot;&gt;build.gradle(.kts) 在 IDE 中显示了 Run 按钮&lt;/h3&gt;
&lt;p&gt;另外，有些同学可能在 &lt;code&gt;build.gradle&lt;/code&gt; + IDEA 2020.x 的环境看到过如下的一个『运行按钮』和『菜单』，好像运行一个单元测试或者一个 Java main 方法一样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2bab-images.lastmayday.com/blog/Screenshot%202020-07-03%20at%203.12.07%20PM.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;不过其原理与手动执行 Gradle Sync / Build 的过程应该是一致的，并且没有改变我们的测试结果。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;Gradle 脚本（特指 &lt;code&gt;*.gradle.kts&lt;/code&gt;，不过 &lt;code&gt;*.gradle&lt;/code&gt; 应该也差不多） 目前调试的支持上比较弱，复杂的逻辑尽量使用 &lt;code&gt;buildSrc&lt;/code&gt; 内预编译插件/独立插件，其拥有完整调试的能力。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #8 AppPlugin 加了代理？</title>
    <link href="https://2bab.me/zh/blog/2020-03-20-daily-of-agp-appplugin-delegate/"/>
    <updated>2020-03-20T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2020-03-20-daily-of-agp-appplugin-delegate/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;『构建指北』是探索 Android 构建相关的一系列文章，涵盖了 Gradle、Android Gradle Plugin、Kotlin Script 等工具，以及相关架构上的应用。以发现问题解决问题为出发点，传递新知提高生产效率为落脚点。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E9%97%AE%E9%A2%98%E5%9B%9E%E9%A1%BE&quot; tabindex=&quot;-1&quot;&gt;问题回顾&lt;/h3&gt;
&lt;p&gt;这两天在维护 &lt;a href=&quot;https://github.com/2BAB/ScratchPaper&quot;&gt;ScratchPaper&lt;/a&gt; ，更新依赖的 AGP（Android Gradle Plugin）版本到 &lt;code&gt;3.6.1&lt;/code&gt;。升级的过程中发现，原本项目使用到的对 &lt;code&gt;AppPlugin&lt;/code&gt; 的 Hook 点失效：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;回顾下，大约是在 3.3.x-3.5.x 的版本迭代里，启用了对 &lt;code&gt;BuildToolInfo&lt;/code&gt; 类的反射获取，其目的是为了获取到 Aapt2 可执行文件的所在路径，从而支持自定义重新生成 App Icon 对应的二进制文件图标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; me&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xx2bab&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scratchpaper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;utils&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;build&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AppPlugin&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;build&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BasePlugin&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;build&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;internal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scope&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GlobalScope&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sdklib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BuildToolInfo&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Project&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AndroidPluginUtils&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; project&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Project&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation builtin&quot;&gt;@Throws&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Exception&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildToolInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; BuildToolInfo &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; basePlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plugins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AppPlugin&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;java&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; BasePlugin&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; scope &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BasePlugin&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;java&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; basePlugin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;globalScope&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; GlobalScope&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; scope&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sdkComponents&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buildToolInfoProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;clazz&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Class&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; instance&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; T&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fieldName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Any &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; field &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;declaredFields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; fieldName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;        field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isAccessible &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;instance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Any&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;让我们把项目依赖的 AGP 版本升级到 &lt;code&gt;3.6.1&lt;/code&gt;，解决掉升级带来的常见编译错误后，跑个 Demo 试试：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FAILURE: Build failed with an exception.&lt;/p&gt;
&lt;p&gt;* What went wrong:&lt;/p&gt;
&lt;p&gt;Execution failed for task &#39;:app:processDemoDebugResources&#39;.&lt;/p&gt;
&lt;p&gt;Index: 0, Size: 0&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;Caused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0&lt;/p&gt;
&lt;p&gt;at me.xx2bab.scratchpaper.utils.AndroidPluginUtils.getField(AndroidPluginUtils.kt:21)&lt;/p&gt;
&lt;p&gt;at me.xx2bab.scratchpaper.utils.AndroidPluginUtils.buildToolInfo(AndroidPluginUtils.kt:15)&lt;/p&gt;
&lt;p&gt;at me.xx2bab.scratchpaper.utils.Aapt2Utils.compileResDir(Aapt2Utils.kt:13)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;奇了怪了，为什么 &lt;code&gt;globalScope&lt;/code&gt; 字段反射失败了？&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90-%26-%E6%BA%90%E7%A0%81%E9%87%8D%E7%8E%B0&quot; tabindex=&quot;-1&quot;&gt;问题分析 &amp;amp; 源码重现&lt;/h3&gt;
&lt;p&gt;第一时间，当然是查看 &lt;code&gt;AppPlugin&lt;/code&gt; 和 &lt;code&gt;BasePlugin&lt;/code&gt; 的源码，看看该字段是否已被移除或改名了。然而惊讶的发现，&lt;code&gt;BasePlugin&lt;/code&gt; 和 &lt;code&gt;AppPlugin&lt;/code&gt; 下竟然空空荡荡：&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;build&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradle&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Project&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt; * The plugin applied with `com.android.application&#39;&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; AppPlugin&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BasePlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;project&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Project&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;project&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;INTERNAL_PLUGIN_ID&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; INTERNAL_PLUGIN_ID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mapOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;plugin&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;token string-literal singleline&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.android.internal.application&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;真正有作用的代码只是一行内部插件的引入，插件名是 &lt;code&gt;com.android.internal.application&lt;/code&gt;。顺藤摸瓜，去 &lt;code&gt;META-INF&lt;/code&gt; 的插件注册目录看看，&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;// com.android.internal.application.properties&lt;br /&gt;implementation-class=com.android.build.gradle.internal.plugins.AppPlugin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;竟然出现了另外一个 &lt;code&gt;AppPlugin&lt;/code&gt;，查看对应的源码，发现之前版本的 &lt;code&gt;AppPlugin&lt;/code&gt; &lt;code&gt;BasePlugin&lt;/code&gt; 等等类多数被移动到 &lt;code&gt;com.android.build.gradle.internal.plugins&lt;/code&gt; 包下，而现在 &lt;code&gt;com.android.build.gradle&lt;/code&gt; 包下的各类 Plugin 很多只是代理了内部的各类插件。&lt;/p&gt;
&lt;p&gt;之后，我想去找找有没有对这块改变的说明，毕竟目前的注释过于简单，没有对代理的意义做过多的说明。上 &lt;a href=&quot;https://android.googlesource.com/platform/tools/base/+/ecdfaee5fbdfa69e82bb9266b6742d9c3db27880&quot;&gt;GoogleSource&lt;/a&gt; 翻到了这块相关的 commit 信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;New public plugin and move existing to internal.&lt;/p&gt;
&lt;p&gt;All current plugin classes are considered public API
because of how Gradle allows finding plugins. Therefore
we need these classes to not change.&lt;/p&gt;
&lt;p&gt;However, we also want to have plugin authors target gradle-api
instead of the &#39;gradle&#39; artifact. This change forks the current
plugin classes into a new set of public class (name unchanged)
and the actual implementations as private, internal classes.&lt;/p&gt;
&lt;p&gt;The new public plugins delegate to the internal plugins
by applying them as separate &amp;quot;internal&amp;quot; plugins. For now
the public plugins stay in gradle-core but we&#39;ll move them
to gradle-api at some point. This is currently limited by
the presence of getExtension on BasePlugin, both of which are
now deprecated.&lt;/p&gt;
&lt;p&gt;Because our classes have no other public API this should not
break anything.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说，他们想把 &lt;code&gt;gradle-core&lt;/code&gt; 和 &lt;code&gt;gradle-api&lt;/code&gt; 进行区分，并让插件作者们依赖于 &lt;code&gt;com.android.tools.build:gradle-api&lt;/code&gt; 而不是 &lt;code&gt;com.android.tools.build:gradle&lt;/code&gt;。这个代理目前只是为了维持原有的逻辑不变，同时占个桩表示我们要开始干活了。有趣的是，原本的插件代码多使用 Java 编写，现在的这些代理类均使用 Kotlin，这也同样印证了 AGP 一轮改革的开始。&lt;/p&gt;
&lt;h3 id=&quot;%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&quot; tabindex=&quot;-1&quot;&gt;解决方案&lt;/h3&gt;
&lt;p&gt;由于原有的逻辑都还存在于 internal 的 plugin 中，我们只要简单地替换 import 的路径即可：&lt;/p&gt;
&lt;pre class=&quot;language-kotlin&quot;&gt;&lt;code class=&quot;language-kotlin&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;build&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;internal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plugins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AppPlugin&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;build&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;internal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plugins&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BasePlugin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 &lt;code&gt;findPlugin&lt;/code&gt; 即可找到老版本的 AppPlugin 等插件。具体的修改信息可以参考这次迭代的 &lt;a href=&quot;https://github.com/2BAB/ScratchPaper/commit/17f3e83615ca95104b735f6c541ac65df8e4962c&quot;&gt;commit message&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;%E7%BB%93%E8%AE%BA&quot; tabindex=&quot;-1&quot;&gt;结论&lt;/h3&gt;
&lt;p&gt;不确定之后基于 AGP 的 Hook 是否还像之前一样可操作，目前看来版本迭代的类变化更加的频繁，我自己维护的基于 AGP 的 Plugins 可能也会增加维护成本。之前考虑过的开发一个第三方的 AGP 的 Polyfill 也必须得操作起来了，分离关注点，减少插件开发和维护成本，在插件上集中注意力实现一个点的目标。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>DIY 24 寸的 4K 显示器</title>
    <link href="https://2bab.me/zh/blog/2019-05-24-diy-4k-24inch-monitor/"/>
    <updated>2019-05-24T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2019-05-24-diy-4k-24inch-monitor/</id>
    <content type="html">&lt;p&gt;这两天苹果上架了新款的 23.8 寸 LG UltraFine 4K 显示器，看了下边框还是那么的粗，Hmmm 还是桌上的这台自制 4K 显示器舒服。正好有朋友也想试试，于是想到记录一下折腾的过程，虽然大部分的工作量都是朋友 @Can 帮忙完成的哈哈。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;先列一下配置单和链接：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;部件&lt;/th&gt;
&lt;th&gt;型号&lt;/th&gt;
&lt;th&gt;链接&lt;/th&gt;
&lt;th&gt;参考价格&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;面板&lt;/td&gt;
&lt;td&gt;LM238WR3-SSB1&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://www.panelook.cn/LM238WR3-SSB1_LG%20Display_23.8_LCM_invitemdetail_cn_167827.html&quot;&gt;http://www.panelook.cn/LM238WR3-SSB1_LG Display_23.8_LCM_invitemdetail_cn_167827.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;￥600-750&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;驱动板&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://item.taobao.com/item.htm?id=575821521733&quot;&gt;https://item.taobao.com/item.htm?id=575821521733&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;￥400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;驱动板外壳&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://item.taobao.com/item.htm?id=575219610220&quot;&gt;https://item.taobao.com/item.htm?id=575219610220&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;￥40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;背盖&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://2bab-images.lastmayday.com/2019-05-23-diy-4k-monitor-LM238WR3-spec.pdf&quot;&gt;http://2bab-images.lastmayday.com/2019-05-23-diy-4k-monitor-LM238WR3-spec.pdf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://2bab-images.lastmayday.com/2019-05-23-diy-4k-monitor-backpanel.dwg&quot;&gt;http://2bab-images.lastmayday.com/2019-05-23-diy-4k-monitor-backpanel.dwg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;￥60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;电源&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://shop108273173.taobao.com/index.htm&quot;&gt;https://shop108273173.taobao.com/index.htm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;￥50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;总计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;￥1200 左右&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;%E9%9D%A2%E6%9D%BF&quot; tabindex=&quot;-1&quot;&gt;面板&lt;/h3&gt;
&lt;p&gt;一直想买的是 24 寸的 4K 屏幕，奈何市面上多数 4K 的屏幕都是 27 寸。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;27 寸对我来说太大了，而且家里没那么大，办公桌还得放不止一台显示器，不然其实我会入手 &lt;strong&gt;Dell U2718Q&lt;/strong&gt; 或者 &lt;strong&gt;LG 27UL850&lt;/strong&gt;，各方面都比较符合我的要求；&lt;/li&gt;
&lt;li&gt;24 寸的选择里，大牌基本上只有 &lt;strong&gt;Dell P2415Q&lt;/strong&gt;，可以说是市面上第一款消费级的 4K 24寸，奈何 P 系列的跑马灯边框实在是受不了，整体效果（可视角、色彩、白平衡）也和 U 系列有些差距，两千多块都花了，肯定想更一步到位了；&lt;/li&gt;
&lt;li&gt;其他的特别选择，包括 &lt;strong&gt;LG UltraFine 4K@21&amp;quot;/5K@27&amp;quot;&lt;/strong&gt;，也主要是尺寸 + 边框问题，价格上 21 寸的那款还算可以接受了；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嗯，废话这么多，事实上我最想要的参数是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4K@24寸&lt;/li&gt;
&lt;li&gt;全玻璃覆盖的隐藏式边框（窄边框）&lt;/li&gt;
&lt;li&gt;国际大厂的质量保证，比如 LG、Samsung 的屏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以决定 DIY 的时候，面板也就定下 &lt;strong&gt;LG LM238WR3-SSB1&lt;/strong&gt; 了。关于面板的参数查找，可以去各大屏库网站查阅，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.panelook.com/LM238WR3-SSB1_LG%20Display_23.8_LCM_overview_29420.html&quot;&gt;http://www.panelook.com/LM238WR3-SSB1_LG Display_23.8_LCM_overview_29420.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lcds-display.com/products/LM238WR3-SSB1_LG-Display.html&quot;&gt;https://www.lcds-display.com/products/LM238WR3-SSB1_LG-Display.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这块面板的参数&lt;a href=&quot;http://www.panelook.com/modelcompare.php?ids=29420,33044&quot;&gt;对比&lt;/a&gt; &lt;strong&gt;LG UltraFine 5k@27 (LM270QQ2-SPA1)&lt;/strong&gt; 也丝毫不逊色，有些地方甚至还要好于 UltraFine（比如 10bit 色彩，更高对比度等等）。（PS. 购买链接里请自行 QQ 微信 与供应商联系）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/diy-4k-24inch-monitor-1.jpg?imageslim&quot; alt=&quot;调试中的面板&quot; /&gt;
&amp;lt;div style=&amp;quot;text-align:center;&amp;quot;&amp;gt;&amp;lt;i&amp;gt;调试中的面板...&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;%E9%A9%B1%E5%8A%A8%E6%9D%BF-%26-%E9%A9%B1%E5%8A%A8%E6%9D%BF%E5%A4%96%E5%A3%B3%EF%BC%88%E5%90%AB%E6%8C%89%E9%94%AE%EF%BC%89%26-%E7%94%B5%E6%BA%90&quot; tabindex=&quot;-1&quot;&gt;驱动板 &amp;amp; 驱动板外壳（含按键）&amp;amp; 电源&lt;/h3&gt;
&lt;p&gt;驱动板是除面板外的最重要部件之一啦，一般用的都是第三方的自研驱动板。基本上我们也是在网上搜了一圈，看了下大家评价比较好的几款，最后选定的这个参数有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2K@144Hz&lt;/li&gt;
&lt;li&gt;4K@60Hz&lt;/li&gt;
&lt;li&gt;DP1.2 * 2 &amp;amp; HDMI2.0 * 2&lt;/li&gt;
&lt;li&gt;2K 下的 HDR&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述的购买链接大家可以发现其实板子和它的外壳、电源是一家店，买外壳的时候商量下不要背板和遥控器，就可以用便宜的价格拿到所需的部件了。（电源就买的时候找老板要一个对应的即可）&lt;/p&gt;
&lt;p&gt;事实上这个驱动板和外壳是 &lt;strong&gt;LG LM270WR3SSA1&lt;/strong&gt; 的第三方标准套件，喜欢 27 寸的其实可以搜到很多这个型号的 DIY 教程，这边就直接复用了省的再去瞎折腾，反正是同一个厂商近乎相同型号的面板。&lt;/p&gt;
&lt;h3 id=&quot;%E6%98%BE%E7%A4%BA%E5%99%A8%E8%83%8C%E7%9B%96&quot; tabindex=&quot;-1&quot;&gt;显示器背盖&lt;/h3&gt;
&lt;p&gt;为了让显示器能够支撑起来，以及能把驱动板安装在显示器上，我们还需要一个背盖。我在网上找了个这块面板的具体结构图（背盖-型号那栏可以下载 PDF），大佬照着这个直接撸了个 CAD 的工图 Orz，然后随手找了个淘宝店打印了一块亚克力来用。&lt;/p&gt;
&lt;p&gt;需要说明的是，这个 CAD 的图有个 bug 就是没有考虑好跟驱动板外壳的兼容性，所以最后大佬用 502 帮我把驱动盒子粘上去了哈哈哈哈。有相关专业经验的朋友可以先买了驱动盒子后再研究怎么改进一下背盖的 CAD 图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/diy-4k-24inch-monitor-2.jpg?imageslim&quot; alt=&quot;安装了背壳和驱动盒子&quot; /&gt;
&amp;lt;div style=&amp;quot;text-align:center;&amp;quot;&amp;gt;&amp;lt;i&amp;gt;安装了背壳和驱动盒子&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;%E6%88%90%E5%93%81&quot; tabindex=&quot;-1&quot;&gt;成品&lt;/h3&gt;
&lt;p&gt;插两根排线，拧几个螺丝，组装起来（需要具体步骤的话去色魔张大妈看看），最后贴了个丑爆的膜（请勿模仿）。有条件的可以去淘宝租个红蜘蛛较色仪，大概几十块钱就可以使颜色更准确。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/diy-4k-24inch-monitor-3.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/diy-4k-24inch-monitor-4.JPG?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：参数图里都有，4K@60Hz 稳！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>合并两个 Git Repo</title>
    <link href="https://2bab.me/zh/blog/2019-05-14-git-repos-merge/"/>
    <updated>2019-05-14T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2019-05-14-git-repos-merge/</id>
    <content type="html">&lt;p&gt;手头的项目之前是拆分成两个 repo 进行维护的，这里称之为 A 和 B 好了。B 是一个公共的基础代码库，设计之初被多个项目进行引用。随着几个项目的共同迭代，可共享的代码块越来越少，B 的维护从一个分支变成了每个项目一个分支。接手这个项目后觉得这个维护模式太复杂了，于是连同其他项目把 B 上自己的分支迁移走，彻底废弃 B repo。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;如果不考虑 commit history，把代码从 B 的项目分支直接拷贝过来 A 即可，这边我们考虑的是迁移带历史记录的整个分支。我尝试了两种办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加新的 remote，拉取对应分支，&lt;code&gt;merge&lt;/code&gt; 两个分支&lt;/li&gt;
&lt;li&gt;添加新的 remote，拉取对应分支，&lt;code&gt;rebase&lt;/code&gt; 两个分支&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 &lt;code&gt;merge&lt;/code&gt;，由于两个分支没有任何的 commit tree 关联，会出现 &lt;code&gt;unrelated-histories&lt;/code&gt; 的错误，所以一开始放弃了这个办法。&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;rebase&lt;/code&gt;，由于记录较多，且两个项目有部分代码分别在两边出现过（包名类名都相同），所以 &lt;code&gt;rebase&lt;/code&gt; 的过程中不断有冲突要解决，时间成本巨大，且不知道大量的冲突调整后会不会有问题，所以也只能作罢。&lt;/p&gt;
&lt;p&gt;最后回头来看 &lt;code&gt;merge&lt;/code&gt; 的错误，发现其实有一个 &lt;code&gt;--allow-unrelated-histories&lt;/code&gt; 的参数可以绕过检查，然后问题就迎刃而解了。&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;// Add Core repo as a remote &lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; of this repo&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; core YOUR_GIT_REPO&lt;br /&gt;&lt;br /&gt;// Fetch the branch we need to local: &lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; fetch core development-a:a-core&lt;br /&gt;&lt;br /&gt;// Clean up the folder, only remains Core module that we need &lt;br /&gt;// Merge with the flag --allow-unrelated-histories &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;or it will throw unrelated-histories error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; merge a-core --allow-unrelated-histories &lt;br /&gt;&lt;br /&gt;// Modify build script to match the new structure&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;事实上，这个问题的根本在我们拥有了一个超级大的 &lt;code&gt;common&lt;/code&gt; 模块。这也是很多 App 在迭代发展变大的过程中必经的一个问题，解决的办法也不难，就是在一个公共的功能成熟的时候（比如从 0.1 到 1.0 了）就把它独立出来，其他项目独立引用这个单独的小模块，或者如果在一开始就确定了它可以作为一个独立的模块（比如独立存储），那就不要把代码和其他公共模块混在一起。具体操作上通常有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要么把这个 &lt;code&gt;common&lt;/code&gt; repo 变成一个 &lt;code&gt;monorepo&lt;/code&gt; 的结构，上层的业务项目虽然需要 pull 这个 repo，但是引用时是完全按照细分的每个模块进行引用&lt;/li&gt;
&lt;li&gt;要么把 &lt;code&gt;common&lt;/code&gt; repo 完全拆分开成独立模块，独立进行维护，上层不同的业务项目只引用具体需要的二进制版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;国内例如淘系的 App 比较倾向于第二种，而国外的公司比如 Google 更多会采用第一种，各有优劣吧。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>博客迁移 #2019</title>
    <link href="https://2bab.me/zh/blog/2019-05-14-blog-migration-2019/"/>
    <updated>2019-05-14T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2019-05-14-blog-migration-2019/</id>
    <content type="html">&lt;p&gt;Hmmm 有很长一段时间没有更新博客了，一方面是确实懒，只有私底下还持续在写的一些 Gradle 的文章，但打算做成一个完整的知识图谱所以还没发出来；另一方面老的博客系统确实有点麻烦，有时候不在自己的电脑上就没办法写东西了。所以能不能我用个浏览器就能写文章，就成为了此次的目标啦。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;列一下新的博客系统在用的一些服务和组件，以及选择的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hugo&lt;/strong&gt;，从 Hexo 迁移过来的
&lt;ul&gt;
&lt;li&gt;Hexo 的版本改动兼容性比较垃圾 =。=&lt;/li&gt;
&lt;li&gt;Hexo 打包要超久&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CloudFlare&lt;/strong&gt;，从 DNSPod 迁移过来的
&lt;ul&gt;
&lt;li&gt;不想使用国内的服务，比如新的控制台需要注册腾讯云绑定微信&lt;/li&gt;
&lt;li&gt;DNSPod 在新加坡打不开，用阿里云跳板机翻回去也几乎不可用，可能是因为被腾讯收购了所以只去维护新的控制台了吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Github&lt;/strong&gt;，从 Coding 迁移过来的
&lt;ul&gt;
&lt;li&gt;不想使用国内的服务，比如 Coding 并没有 Travis 这种免费的 CI，而新系统使用 Travis 自动 Generate 静态站点&lt;/li&gt;
&lt;li&gt;Github Pages 会成为我的备选博客托管服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CodingPages&lt;/strong&gt;，维持不变
&lt;ul&gt;
&lt;li&gt;虽然是一个国内的服务，但是 Coding Pages 的服务器多半是香港新加坡美国的机器，也不需要备案，基于维持国内外访问的速度考虑目前还在使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qiniu&lt;/strong&gt;，维持不变
&lt;ul&gt;
&lt;li&gt;其实 18 年的时候由于七牛测试域名回收的原因，我把图床改成过 Sina，但是鉴于 Sina 从 19 年  4 月起禁用外链了，所以又迁移回 lastmayday 的免费域名仓库下&lt;/li&gt;
&lt;li&gt;不过出于上述相同的原因，其实我本来是打算购入 AWS 香港新节点的 S3，但是需要手写一个 PicGo 插件以及没有好用的 Web 控制台的原因，所以暂时搁浅了…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So，目前写文章的新流程是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地操作，Clone Github 仓库的 source 分支，写文章 + PicGo 传图，commit &amp;amp; push，Travis CI 自动部署到 Github Pages 和 CodingPages&lt;/li&gt;
&lt;li&gt;在线操作，直接上 Github 新建个文件就可以写了，用七牛的 Web 控制台传图，Travis CI 自动部署到 Github Pages 和 CodingPages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嗯，舒服！后续还缺的操作嘛：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看需不需要 edns-client-subnet 分流国内外访问的服务器&lt;/li&gt;
&lt;li&gt;如果 Coding Pages 速度不再有优势，那就切到 Github Pages 上&lt;/li&gt;
&lt;li&gt;如果七牛不再有免费流量或者对域名和区域有限制，就切到 AWS-S3 的香港服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>插件化笔记 #8 - 插件的代码编译</title>
    <link href="https://2bab.me/zh/blog/2017-10-16-plugadget-note-8-package-plugin-java-code/"/>
    <updated>2017-10-16T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-10-16-plugadget-note-8-package-plugin-java-code/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Demo: &lt;a href=&quot;https://github.com/2BAB/Android-Plugin-Dev-Notes&quot;&gt;https://github.com/2BAB/Android-Plugin-Dev-Notes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E8%83%8C%E6%99%AF&quot; tabindex=&quot;-1&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;为什么打包还要讲？因为我发现大家都没说过这回事啊...而且有些开源的插件化框架并没有看到有仔细处理这块，导致自己研究的时候很困惑。具体来说，打包这块也是分两块，插件代码和插件资源的打包，这节先看插件代码的打包。&lt;/p&gt;
&lt;p&gt;一般地，我们的插件，和普通的 Android Library 不同，是直接声明成 Application。因为只有这样，才能简单地借助原有的（Application）打包插件来打出 Dex 和资源编译。而打包 Application，对于插件而言，会打入很多不必要的二方、三方依赖。有人会说，用 provided 声明插件模块的依赖不就好了，但这仅仅只能是解决 .jar 的模块，.aar 的依赖是不支持 provided 的。所以我们要解决的问题，也就很明显了，实现一个通用的打包仲裁：&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Atlas、VirtualApk 等方案，都是把大部分的依赖打到主工程，插件本身只打入一些只有本插件才会用到的依赖；但他们的实现有所不同：
&lt;ul&gt;
&lt;li&gt;Atlas 添加了 bundleCompile、providedCompile 的 scope，插件方可以更友好地去声明依赖的形式；&lt;/li&gt;
&lt;li&gt;VirtualApk 只是对主工程的依赖作分析，主工程有的就不打进去，主工程没有的就打进去，相对来讲比较粗暴；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不同的方案其实主要是自由度的选择不同，没有说好坏之分；&lt;/li&gt;
&lt;li&gt;实现原理上，这里以 VirtualApk 为例，基于 Transform 来做，下面就看一下最基本的实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;transform-api&quot; tabindex=&quot;-1&quot;&gt;Transform API&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;To insert a transform into a build, you simply create a new class implementing one of the Transform interfaces, and register it with android.registerTransform(theTransform) or android.registerTransform(theTransform, dependencies).&lt;/p&gt;
&lt;p&gt;A Transform that processes intermediary build artifacts.
For each added transform, a new task is created. The action of adding a transform takes care of handling dependencies between the tasks. This is done based on what the transform processes. The output of the transform becomes consumable by other transforms and these tasks get automatically linked together.&lt;/p&gt;
&lt;p&gt;The Transform indicates what it applies to (content, scope) and what it generates (content).&lt;/p&gt;
&lt;p&gt;A transform receives input as a collection TransformInput, which is composed of JarInputs and DirectoryInputs. Both provide information about the QualifiedContent.Scopes and QualifiedContent.ContentTypes associated with their particular content.&lt;/p&gt;
&lt;p&gt;The output is handled by TransformOutputProvider which allows creating new self-contained content, each associated with their own Scopes and Content Types. The content handled by TransformInput/Output is managed by the transform system, and their location is not configurable.&lt;/p&gt;
&lt;p&gt;It is best practice to write into as many outputs as Jar/Folder Inputs have been received by the transform. Combining all the inputs into a single output prevents downstream transform from processing limited scopes.&lt;/p&gt;
&lt;p&gt;While it&#39;s possible to differentiate different Content Types by file extension, it&#39;s not possible to do so for Scopes. Therefore if a transform request a Scope but the only available Output contains more than the requested Scope, the build will fail.
If a transform request a single content type but the only available content includes more than the requested type, the input file/folder will contain all the files of all the types, but the transform should only read, process and output the type(s) it requested.&lt;/p&gt;
&lt;p&gt;Additionally, a transform can indicate secondary inputs/outputs. These are not handled by upstream or downstream transforms, and are not restricted by type handled by transform. They can be anything.&lt;/p&gt;
&lt;p&gt;It&#39;s up to each transform to manage where these files are, and to make sure that these files are generated before the transform is called. This is done through additional parameters when register the transform.&lt;/p&gt;
&lt;p&gt;These secondary inputs/outputs allow a transform to read but not process any content. This can be achieved by having getScopes() return an empty list and use getReferencedScopes() to indicate what to read instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E6%A0%B9%E6%8D%AE%E6%8F%92%E4%BB%B6%E5%8C%85%E5%90%8D%E7%9A%84%E6%89%93%E5%8C%85%E8%BF%87%E6%BB%A4%E5%99%A8&quot; tabindex=&quot;-1&quot;&gt;根据插件包名的打包过滤器&lt;/h2&gt;
&lt;p&gt;在插件打包时，引入下面这段脚本 (app/build.gradle)，用来过滤掉除了插件包名以外的其他类库和文件。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;////////////////////////////////// Class Filter ///////////////////////////////////////&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;build&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transform&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;build&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;internal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TransformManager&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;groovy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileType&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;commons&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FileUtils&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StripClassAndResTransform&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Project&lt;/span&gt; project&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;StripClassAndResTransform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Project&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;project &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &#39;stripClassAndRes&#39;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;QualifiedContent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ContentType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getInputTypes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransformManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;CONTENT_JARS&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;QualifiedContent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getScopes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransformManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SCOPE_FULL_PROJECT&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isIncremental&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransformInvocation&lt;/span&gt; transformInvocation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TransformException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        def applicationId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &#39;com&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;example&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;multiclassloader&#39;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isIncremental&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            transformInvocation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;outputProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        transformInvocation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;inputs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;each &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;directoryInputs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;each &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; directoryInput &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;                directoryInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;traverse &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FileType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FILES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    def entryName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;directoryInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                    def destName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; directoryInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token char&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; entryName&lt;br /&gt;                    def dest &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transformInvocation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;outputProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContentLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                            destName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; directoryInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contentTypes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; directoryInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scopes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DIRECTORY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token comment&quot;&gt;// check whether it is a bundle-file&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entryName&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;applicationId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token class-name&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;copyFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;it&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jarInputs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;each &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; jarInput &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token comment&quot;&gt;// we don&#39;t need libs currently&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;registerTransform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StripClassAndResTransform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;project&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后要做的就是，正常地打包 &lt;code&gt;./gradlew assembleDebug&lt;/code&gt; （工程名是 pluginByApk），然后看看打出来的 Apk 中的 Dex 文件是否包含了其他的依赖（例如 Support 包的文件），再用上一节的 Demo 测试一下即可（即 push 这个插件 apk 到 Downloads 文件夹，修改 bundleClassloader 加载的 apk 文件）。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot; tabindex=&quot;-1&quot;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://afterecho.uk/blog/create-a-standalone-gradle-plugin-for-android-part-4-the-transform-api.html&quot;&gt;https://afterecho.uk/blog/create-a-standalone-gradle-plugin-for-android-part-4-the-transform-api.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/didi/VirtualAPK/blob/HEAD/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/transform/StripClassAndResTransform.groovy&quot;&gt;https://github.com/didi/VirtualAPK/blob/HEAD/virtualapk-gradle-plugin/src/main/groovy/com.didi.virtualapk/transform/StripClassAndResTransform.groovy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://google.github.io/android-gradle-dsl/javadoc/current/&quot;&gt;http://google.github.io/android-gradle-dsl/javadoc/current/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>插件化笔记 #7 - MultiClassloader</title>
    <link href="https://2bab.me/zh/blog/2017-10-16-plugadget-note-7-MultiClassloader/"/>
    <updated>2017-10-16T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-10-16-plugadget-note-7-MultiClassloader/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Demo: &lt;a href=&quot;https://github.com/2BAB/Android-Plugin-Dev-Notes&quot;&gt;https://github.com/2BAB/Android-Plugin-Dev-Notes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-multi-classloader&quot; tabindex=&quot;-1&quot;&gt;为什么要有 Multi Classloader&lt;/h2&gt;
&lt;p&gt;如上篇所说，我们不管要起 Activity、Service，其实都是需要注入自定义的 Classloader。而 Service 没有一个很好的简单注入点，所以才有了 Hook 上层 Classloader 的方案。这种方案有两种，都是解决多 Dex 加载的情况（不管插件化与否其实只要方法数超 65535 都是需要做多 Dex 加载）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单一 Classloader：就是上篇说到的 MultiDex 使用的反射注入 DexPathList 的前部，这种是利用了 BaseDexClassloader 的 findClass 特性，由前往后查找 Dex 文件并加载 Class；&lt;/li&gt;
&lt;li&gt;多 Classloader：利用双亲委派的 Classloader 机制，使得我们的 Classloader 可以优先于系统 Classloader 查找到 Class 并返回，通常会伴随着每个模块一个 Classloader，再由一个 HookClassloader 统一 Dispatch；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;目前淘宝、微店等都是使用多 Classloader 形式来实现 Dex 文件的动态加载，隔离性强、鲁棒性好，但实现上有所不同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;淘宝的 Atlas 做的是替换应用直接使用的 PathClassloader；&lt;/li&gt;
&lt;li&gt;微店、Instant-Run 使用的是替换 PathClassloader 的 parent；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本系列的尿性就是要简单，稳定，尽量不 Hook 任何系统服务，所以下面以替换 PathClassloader 的 parent 思路来讲：&lt;/p&gt;
&lt;h2 id=&quot;%E6%9B%BF%E6%8D%A2-pathclassloader-%E7%9A%84-parent&quot; tabindex=&quot;-1&quot;&gt;替换 PathClassloader 的 parent&lt;/h2&gt;
&lt;p&gt;很明显我们应该在应用还没启动的时候就把这事干了，所以参考 Instant-Run，Hook 时机在 Application 的 &lt;code&gt;attachBaseContext&lt;/code&gt; 里：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MultiClassloaderApplication&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;attachBaseContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachBaseContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;replacePathClassloaderParent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;replacePathClassloaderParent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; pathClassloader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;DispatchClassloader&lt;/span&gt; dispatchClassloader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DispatchClassloader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pathClassloader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; clz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Field&lt;/span&gt; parentField &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; clz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            parentField&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            parentField&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pathClassloader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatchClassloader&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%AE%9E%E7%8E%B0-multi-classloader&quot; tabindex=&quot;-1&quot;&gt;实现 Multi Classloader&lt;/h2&gt;
&lt;p&gt;[DispatchClassloader.java]&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DispatchClassloader&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BundleClassloader&lt;/span&gt; dexClassLoader&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; origin&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DispatchClassloader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; origin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;origin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;origin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; origin&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;installDex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;installDex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// 这里目前只装载了一个测试 Dex，正常情况下需要装载某个目录下的所有 dex 文件（通常每个 Bundle 有一个 Dex）&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt; optimizedDexOutputPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token class-name&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getExternalStoragePublicDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DIRECTORY_DOWNLOADS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/7-MultiClassloader.dex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt; dexOutputDir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        dexClassLoader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BundleClassloader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                optimizedDexOutputPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                dexOutputDir&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                origin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// 需要在这里遍历所有 Bundle 的 Classloader，或者用包名等来做查找分发&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; clz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dexClassLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; clz&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[BundleClassloader.java]&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BundleClassloader&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DexClassLoader&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BundleClassloader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; dexPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; optimizedDirectory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; librarySearchPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; parent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dexPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; optimizedDirectory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; librarySearchPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; parent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 仅仅是用来改写 protected 签名&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;几个注意点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据参考资料里 Google 的一段注释，如果不用 BundleClassloader 做查找转发的话，还有些隐藏 Bug。反正我们的目的本来就是需要多个 Classloader 的，就顺水推舟了；&lt;/li&gt;
&lt;li&gt;请复写 findClass 而不是 loadClass，减少不必要的改动；&lt;/li&gt;
&lt;li&gt;findClass 默认 protected 的，所以需要继承 DexClassloader 改写 findClass 的签名；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Demo 工程打包过程&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先切到 /host 工程中，&lt;code&gt;./gradlew installDebug&lt;/code&gt; 安装宿主工程；&lt;/li&gt;
&lt;li&gt;再切到 /plugin 工程中，按 &lt;a href=&quot;http://2bab.me/2016/09/18/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E7%AC%94%E8%AE%B0-2-LoadPluginClass/&quot;&gt;之前文章（Android插件化笔记-2-LoadPluginClass）&lt;/a&gt;打包 Dex 的办法打出插件 Dex 文件并重命名为「7-MultiClassloader.dex」；&lt;/li&gt;
&lt;li&gt;adb push 该文件到手机的 /sdcard/Downloads/目录下&lt;/li&gt;
&lt;li&gt;启动宿主工程，toast 出 3.14 即为成功；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot; tabindex=&quot;-1&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;本系列为笔记文，文中有大量的源码解析都是引用的其他作者的成果，详见下方参考资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/xiangzhihong8/article/details/64906131&quot;&gt;http://blog.csdn.net/xiangzhihong8/article/details/64906131&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://android.googlesource.com/platform/tools/base/+/gradle_2.0.0/instant-run/instant-run-server/src/main/java/com/android/tools/fd/runtime/IncrementalClassLoader.java&quot;&gt;https://android.googlesource.com/platform/tools/base/+/gradle_2.0.0/instant-run/instant-run-server/src/main/java/com/android/tools/fd/runtime/IncrementalClassLoader.java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/entry/59ca1d2d6fb9a00a616f496c&quot;&gt;https://juejin.im/entry/59ca1d2d6fb9a00a616f496c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/p8-ABKDpMLm6T4lJdK8Y3Q&quot;&gt;https://mp.weixin.qq.com/s/p8-ABKDpMLm6T4lJdK8Y3Q&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #7 debuggable 属性无效</title>
    <link href="https://2bab.me/zh/blog/2017-09-19-daily-of-agp-debuggable-not-work/"/>
    <updated>2017-09-19T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-09-19-daily-of-agp-debuggable-not-work/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;『构建指北』是探索 Android 构建相关的一系列文章，涵盖了 Gradle、Android Gradle Plugin、Kotlin Script 等工具，以及相关架构上的应用。以发现问题解决问题为出发点，传递新知提高生产效率为落脚点。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E9%97%AE%E9%A2%98%E5%9B%9E%E9%A1%BE&quot; tabindex=&quot;-1&quot;&gt;问题回顾&lt;/h3&gt;
&lt;p&gt;不久前，在接手手头上这个老工程时，发现 &lt;code&gt;build.gradle&lt;/code&gt; 中设置 &lt;code&gt;debuggable&lt;/code&gt; 属性是无效的，只能手动在 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 的 &lt;code&gt;application&lt;/code&gt; 节点写死该属性（之前团队里就这样默默干了两年，发版前去掉这个属性，发版后再加上...），最近得空花了两三个周末研究了下缘由。&lt;/p&gt;
&lt;p&gt;默认看此文章的人已经知道这点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android 系统判断一个 App 是否可 Debug 的标准是，AndroidManifest.xml 中的  application 节点是否存在 debuggable 属性，并且其值为 true。（可参考&lt;a href=&quot;https://developer.android.com/guide/topics/manifest/application-element.html#android:debuggable&quot;&gt;官方文档&lt;/a&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90-%26-%E6%BA%90%E7%A0%81%E9%87%8D%E7%8E%B0&quot; tabindex=&quot;-1&quot;&gt;问题分析 &amp;amp; 源码重现&lt;/h3&gt;
&lt;h4 id=&quot;0x01&quot; tabindex=&quot;-1&quot;&gt;0x01&lt;/h4&gt;
&lt;p&gt;从 &lt;code&gt;buildType&lt;/code&gt; 的 &lt;code&gt;debuggable&lt;/code&gt; 属性开始分析追踪，既然我们知道 &lt;code&gt;debuggable&lt;/code&gt; 其实会作用于 Manifest 的属性，那就找找跟 Manifest 相关的流程。先后看了 Android Gradle Plugin 中 &lt;code&gt;process{variant}Manifest&lt;/code&gt;、&lt;code&gt;process{variant}Resources &lt;/code&gt;、&lt;code&gt;package{variant}&lt;/code&gt; 等 task 的流程，没有发现什么异常（此处不一一展开）。不过倒是对他们的中间生成产物有了些了解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process{variant}Manifest&lt;/code&gt; 的 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 中间产物位于  ./app/build/intermediates/manifests 中，分为 instant-run 和 其他 variant （debug、release、etc.）等各种文件夹；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process{variant}Resources&lt;/code&gt; 的 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 位于 ./app/build/intermediates/res/resources-debug.ap_ 的压缩包中（事实上一开始没有看这个 task，是在看其他 task 的中间产物时发现这个 task 其实有 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 的产物）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package{variant}&lt;/code&gt; 的 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 其实就是最后 apk 包中的文件了；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，没看到有直接对 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 中写入 &lt;code&gt;debuggable&lt;/code&gt; 的操作（merge 除外）。&lt;/p&gt;
&lt;h4 id=&quot;0x02&quot; tabindex=&quot;-1&quot;&gt;0x02&lt;/h4&gt;
&lt;p&gt;拿一个新建的工程和问题工程作比对发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建工程：&lt;code&gt;process{variant}Manifest&lt;/code&gt; 的产物中没有  &lt;code&gt;debuggable&lt;/code&gt; 的属性，却在 &lt;code&gt;process{variant}Resources&lt;/code&gt; 的产物中出现了该属性（debug 状态下为 true），说明内部操作发生在这一步；&lt;/li&gt;
&lt;li&gt;问题工程：在所有 task 的  &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 产物中，均未出现 &lt;code&gt;debuggable&lt;/code&gt; 的值；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看来还得再翻翻 &lt;code&gt;process{variant}Resources&lt;/code&gt;，这其中主要是调用 aapt 相关的操作，仔细查看发现如下关键代码：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// AaptV1.java &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@NonNull&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ProcessInfoBuilder&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makePackageProcessBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AaptPackageConfig&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AaptException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;ProcessInfoBuilder&lt;/span&gt; builder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ProcessInfoBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt;     * AaptPackageProcessBuilder had this code below, but nothing was ever added to&lt;br /&gt;     * mEnvironment.&lt;br /&gt;     */&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;//builder.addEnvironments(mEnvironment);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setExecutable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAaptExecutablePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addArgs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;package&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;省略无关紧要的一部分代码&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 在此处注入了 buildType 的 debuggable 属性&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isDebuggable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addArgs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;--debug-mode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，在处理 aapt 的输入参数时带上了 debug 参数，随即便是调用 aapt 的外部过程，不在 Android Gradle Plugin 的控制范围内。&lt;/p&gt;
&lt;h4 id=&quot;0x03&quot; tabindex=&quot;-1&quot;&gt;0x03&lt;/h4&gt;
&lt;p&gt;找出 Android SDK 源码，编译一个自己的 aapt（具体可以参考&lt;a href=&quot;http://2bab.me/2017/09/19/android-source-development-notes-3/&quot;&gt;这里&lt;/a&gt;），别忘了在关键地方加上一些 log：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先是入口文件，找到对应读取 &lt;code&gt;--debug-mode&lt;/code&gt; 的地方，会暂存于一个 bundle 中，并且参数获取正确，为 true，[Main.cpp]:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cp&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-debug-mode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AAPTDEBUG: set debug == true&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    bundle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setDebugMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;再者，找到 &lt;code&gt;bundle-&amp;gt;getDebugMode()&lt;/code&gt; 的地方，发现这里就是核心部分了，真正把 &lt;code&gt;debuggable&lt;/code&gt; 的结果写入到 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 中；但是这里出现错误了—— &lt;strong&gt;application 节点获取不到，为 null&lt;/strong&gt;，[Resource.cpp]：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;status_t &lt;span class=&quot;token function&quot;&gt;massageManifest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Bundle&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; bundle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sp&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;XMLNode&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; root&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; root&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;searchElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;String16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;manifest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;root &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;No &amp;lt;manifest&gt; tag.&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; UNKNOWN_ERROR&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AAPTDEBUG: bundle-&gt;getDebugMode()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bundle&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDebugMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AAPTDEBUG: bundle-&gt;getDebugMode() - true&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        sp&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;XMLNode&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; application &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; root&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getChildElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;String16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;application &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AAPTDEBUG: application == NULL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 问题出处，打印出了这行 log&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;application &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AAPTDEBUG: application != NULL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addTagAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;application&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; RESOURCES_ANDROID_NAMESPACE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;debuggable&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                        errorOnFailedInsert&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AAPTDEBUG: error on insert&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; UNKNOWN_ERROR&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;看看 &lt;code&gt;getChildElement()&lt;/code&gt; 的实现，发现上面的代码只会从 root 节点（也就是 manifest 节点）出发去找一级子节点，没有深入地递归查找，如果 application 不是 manifest 的一级子节点，则找不到，[XMLNode.cpp]：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;sp&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;XMLNode&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;XMLNode&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getChildElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; String16&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; tagNamespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; String16&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; tagName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AAPTDEBUG: root -&gt; %s&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mElementName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size_t i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;mChildren&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        sp&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;XMLNode&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; child &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mChildren&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;itemAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; XMLNode&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;TYPE_ELEMENT&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AAPTDEBUG: getChildElement-&gt; %s&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;mElementName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; XMLNode&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;TYPE_ELEMENT&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; child&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;mNamespaceUri &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; tagNamespace&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; child&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;mElementName &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; tagName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; child&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2017-09-19-gradle-daily-crash-debuggable-not-work-2.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;那最后的问题就只有，为什么 application 节点不是 manifest 的一级子节点，查一下编译出来的二进制 Manifest（./app/build/intermediates/res/resources-debug.ap_ ，为避免敏感信息，这里用 &lt;a href=&quot;https://github.com/2BAB/DebuggableTest&quot;&gt;DebuggableTest&lt;/a&gt; 工程做示例）：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2017-09-19-gradle-daily-crash-debuggable-not-work-1.jpg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;真相大白，application 的直接父节点是 namespace！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;0x04&quot; tabindex=&quot;-1&quot;&gt;0x04&lt;/h4&gt;
&lt;p&gt;查看各类依赖库的 Manifest（build-cache/exploded-aar），查看 Manifest 的合并日志（app/build/outputs/logs/manifest-merger-{variant}-report），结合之前写的一个 Manifest Precheck 插件 &lt;a href=&quot;https://github.com/2BAB/Seal&quot;&gt;Seal&lt;/a&gt;，发现会碰到这个问题，有两种可能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;依赖库本身对 namespace 的声明不只在 manifest 节点，例如在 application 节点声明了 android 的 namespace，可以参考我 pub 的这个  &lt;a href=&quot;https://github.com/2BAB/DebuggableTest&quot;&gt;DebuggableTest&lt;/a&gt; 工程；&lt;/li&gt;
&lt;li&gt;对 Manifest 合并前（即执行 &lt;code&gt;process{variant}Manifest&lt;/code&gt; 前），如果有例如 &lt;a href=&quot;https://github.com/2BAB/Seal&quot;&gt;Seal&lt;/a&gt; 这种对依赖库的 Manifest 做清洗工作，&lt;strong&gt;并且很巧你也用了 &lt;code&gt;groovy.util&lt;/code&gt; 下的 XML 类库做 XML 解析和输出，那么恭喜你，这个库有几率会导致你的各种节点出现重复的 namespace，比如 uses-sdk 、application&lt;/strong&gt;，不过我还没认真去排查到底什么情况下会出现这样的问题，目前实验中也只有少量的样本会这样，暂时没发现他们的共通点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&quot; tabindex=&quot;-1&quot;&gt;解决方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用自定义的 aapt，改一行代码即可解决此类问题：将搜索 application 节点的方法从 &lt;code&gt;sp&amp;lt;XMLNode&amp;gt; XMLNode::getChildElement(const String16&amp;amp; tagNamespace, const String16&amp;amp; tagName)&lt;/code&gt; 改为另外一个内建的方法 &lt;code&gt;sp&amp;lt;XMLNode&amp;gt; XMLNode::searchElement(const String16&amp;amp; tagNamespace, const String16&amp;amp; tagName)&lt;/code&gt;，原因是 searchElement 的实现是会 for 循环查找所有深度子节点：&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Resource.cpp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; status_t &lt;span class=&quot;token function&quot;&gt;massageManifest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Bundle&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; bundle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sp&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;XMLNode&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; root&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; root&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;searchElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;String16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;manifest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;root &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;No &amp;lt;manifest&gt; tag.&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; UNKNOWN_ERROR&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;     &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;     &lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AAPTDEBUG: bundle-&gt;getDebugMode()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bundle&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDebugMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token function&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;AAPTDEBUG: bundle-&gt;getDebugMode() - true&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token comment&quot;&gt;// 改掉查找方法！&lt;/span&gt;&lt;br /&gt;         sp&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;XMLNode&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; application &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; root&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;searchElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;String16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;String16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;         &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// XMLNode.cpp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; sp&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;XMLNode&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;XMLNode&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;searchElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; String16&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; tagNamespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; String16&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; tagName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; XMLNode&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;TYPE_ELEMENT&lt;br /&gt;             &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mNamespaceUri &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; tagNamespace&lt;br /&gt;             &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mElementName &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; tagName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token comment&quot;&gt;// 递归实现避免上述问题&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size_t i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;mChildren&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;         sp&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;XMLNode&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; found &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mChildren&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;itemAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;searchElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tagNamespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tagName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;found &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;             &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; found&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;         &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或者使用新版的 &lt;a href=&quot;https://github.com/2BAB/Seal&quot;&gt;Seal&lt;/a&gt; 插件 v1.1.0 ，增加了一个配置项 &lt;code&gt;xmlnsSweep&lt;/code&gt;，会在执行 &lt;code&gt;process{variant}Manifest&lt;/code&gt; 之后，对其产物进行 xmlns 的清洗，避免在 manifest 节点外出现不必要的 namespace 声明，详细使用说明请参考 &lt;a href=&quot;https://github.com/2BAB/Seal&quot;&gt;Seal&lt;/a&gt; 仓库的 README（注意，目前使用 Seal 请一定要开启并配置 &lt;code&gt;xmlnsSweep&lt;/code&gt;，因为不能保证所有的依赖库都不会在 Precheck 中出问题）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E7%BB%93%E8%AE%BA&quot; tabindex=&quot;-1&quot;&gt;结论&lt;/h3&gt;
&lt;p&gt;这大概是我今年研究过的最麻烦的问题了，链路长，大坑小坑不断，有 Google 挖的，有 Groovy 挖的，目前正在去给他们提 issue 的路上...&lt;/p&gt;
&lt;p&gt;铛！更新 issue 地址： &lt;a href=&quot;https://issuetracker.google.com/issues/66074488&quot;&gt;https://issuetracker.google.com/issues/66074488&lt;/a&gt; ！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Android 源码笔记 #3 - Aapt 编译</title>
    <link href="https://2bab.me/zh/blog/2017-09-19-android-source-development-notes-3/"/>
    <updated>2017-09-19T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-09-19-android-source-development-notes-3/</id>
    <content type="html">&lt;p&gt;碰到个问题，需要 debug aapt 里的一些东西，本来以为按照 &lt;a href=&quot;http://2bab.me/2017/03/10/android-source-development-notes-1&quot;&gt;Android源码笔记-1-编译&amp;amp;烧录的一些坑&lt;/a&gt; 的办法去设置环境再把 &lt;code&gt;make&lt;/code&gt; 命令目标改一下即可，但是发现还是有些小问题，写下记录一哈。&lt;/p&gt;
&lt;p&gt;先来结论，源码准备的步骤不叙，正确的步骤是：&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; clobber&lt;br /&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; build/envsetup.sh&lt;br /&gt;$ lunch sdk-eng &lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-j9&lt;/span&gt; aapt            &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Google 爸爸的完整教程&lt;a href=&quot;https://android.googlesource.com/platform/sdk/+/master/docs/howto_build_SDK.txt&quot;&gt;在此&lt;/a&gt;，一开始确实没发现；&lt;/li&gt;
&lt;li&gt;注意，lunch、make 的目标和编译 ROM 不同；&lt;/li&gt;
&lt;li&gt;由于是要编译一个自己用的 aapt，所以最好是备份一个 aapt，但是直接在源码目录 copy 一份会有报错，正确的姿势&lt;a href=&quot;http://blog.csdn.net/sbsujjbcy/article/details/51418336&quot;&gt;参考这个&lt;/a&gt;，当然，我偷懒直接拷了一份到非源码目录下的位置；&lt;/li&gt;
&lt;li&gt;以 Mac 为例，生成产物的路径是 &lt;code&gt;/pathToYourAndroidSource/out/host/darwin-x86/bin/aapt&lt;/code&gt;（一开始用的 &lt;code&gt;/pathToYourAndroidSource/out/target&lt;/code&gt; 里的产物发现会出现 &lt;code&gt;cannot execute binary file&lt;/code&gt;，正常在 Mac 上使用的 aapt 的格式是 Mach-O 的可执行文件，但是这个 aapt 是 elf-32 的，也就是 32位 的 linux 下执行的，暂时没去了解是编译出其他平台的版本还是中间产物）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #6 JDK 内的某个包失踪了</title>
    <link href="https://2bab.me/zh/blog/2017-08-16-daily-of-agp-class-not-found-of-jdk/"/>
    <updated>2017-08-16T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-08-16-daily-of-agp-class-not-found-of-jdk/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;『构建指北』是探索 Android 构建相关的一系列文章，涵盖了 Gradle、Android Gradle Plugin、Kotlin Script 等工具，以及相关架构上的应用。以发现问题解决问题为出发点，传递新知提高生产效率为落脚点。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最近在改一个之前的 Annotation Processor，想要实现一个这样的需求：对一个 Class 所 implement 的 interface 做判断——这些 interface 是否 extends 自一个统一的父 Interface。于是 Debug + Evaluate Expression 挖一下 &lt;code&gt;TypeElement&lt;/code&gt; 的实例里都有些啥，看看有没好使的 API。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;typeElement.getInterfaces()&lt;/code&gt; 可以拿到当前元素的 List&amp;lt;TypeMirror&amp;gt;，这个一目了然；&lt;/li&gt;
&lt;li&gt;List 里的 typeMirror，其实质是 &lt;code&gt;com.sun.tools.javac.code.Type$ClassType&lt;/code&gt; 类型；&lt;/li&gt;
&lt;li&gt;进一步，在 Evaluate Expression 里瞎蒙会发现 &lt;code&gt;((Type.ClassType)mirror).interfaces_field&lt;/code&gt; 我们可以拿到上层具体的 Interface 信息，嗯，基本达到我们的目的了；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了刚刚的实验，就快速写出一个测试代码。接着编译打包——竟然报错（请无视它是个中文错误 =。=）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;错误：程序包 com.sun.tools.javac.code 不存在
错误：找不到符号
符号：类 Type&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;明明 IDE （Android Studio）识别了，这个类也是个 JDK 自带的工具类，为何不存在？唯一能想到的原因就是编译时 JDK 的所有包并不是都已加入到 classpath 里。在 Google 的过程中，也发现过&lt;a href=&quot;https://stackoverflow.com/questions/10314904/no-com-sun-tools-javac-in-jdk7&quot;&gt;类似的问题&lt;/a&gt;，但是仔细检查了 IDE 的 Boot JDK 配置，Gradle 的 JAVA_HOME 配置，都没有错。好吧，可能这是个不为人知的某种默认操作...&lt;/p&gt;
&lt;p&gt;Google 没有明确的答案，问了很多师兄也只说碰到过类似的问题，最后还是靠自己引包解决（如果有了解内情的同学欢迎给我发邮件讨论！）。这边先给出一个我的解法：&lt;/p&gt;
&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 手动加入 tools.jar 到 compile&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// 使用 Gradle 提供的环境变量，避免自己写大量兼容性代码&lt;/span&gt;&lt;br /&gt;compile &lt;span class=&quot;token function&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;internal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jvm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Jvm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toolsJar&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// 类似的环境变量 Gradle 还提供了一些&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// import org.gradle.internal.jvm.Jvm&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// println Jvm.current().javaHome&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// println Jvm.current().javacExecutable&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// println Jvm.current().javadocExecutable&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;咳咳，话说回来，即便解决了包的问题，上面那个找上层 Interface的办法也是有问题的，因为&lt;code&gt;((Type.ClassType)mirror).interfaces_field&lt;/code&gt;  找出来的 interface type 是无法再向上查找 interfaces_field 的，找到的会是空值（没兴趣去看为什么了...）解决办法也是有的：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;TypeElement&lt;/span&gt; typeElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; elementUtils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTypeElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;interfaceCanonicalName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TypeMirror&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; interfaces &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; typeElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInterfaces&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;循环用 &lt;code&gt;elementUtils.getTypeElement(interfaceCanonicalName)&lt;/code&gt; 一路往上取 Interface 即可（还是靠自己之前的积累才蒙到..orz）。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #5 含 buildscript 的脚本执行顺序</title>
    <link href="https://2bab.me/zh/blog/2017-06-21-daily-of-agp-buildscript-block-execute-order/"/>
    <updated>2017-06-21T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-06-21-daily-of-agp-buildscript-block-execute-order/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;『构建指北』是探索 Android 构建相关的一系列文章，涵盖了 Gradle、Android Gradle Plugin、Kotlin Script 等工具，以及相关架构上的应用。以发现问题解决问题为出发点，传递新知提高生产效率为落脚点。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最近在改一个裹脚布项目，对打包脚本升级的要求是「循序渐进」（工期紧，稳定为主）——Debug 下用新版的 Gradle Plugin，Release 用旧版的。嗯，很自然会想到改动 root project 下的 &lt;code&gt;build.gradle&lt;/code&gt;，加一段判断：&lt;/p&gt;
&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// apply isDebug() method from utils.gradle&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;apply&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRootProject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rootDir&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;absolutePath &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/scripts/utils.gradle&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; gradlePluginVersion &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isDebug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2.3.3&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2.0.0&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;buildscript &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;mavenLocal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// use outer variable&lt;/span&gt;&lt;br /&gt;        classpath &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.android.tools.build:gradle:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;gradlePluginVersion&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        classpath &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;但是运行报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Could not get unknown property &#39;gradlePluginVersion&#39; for object of type  org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;竟然找不到这个变量，不太合理呃，之前在各种脚本里定义依赖的时候也这样干过，没问题呀？&lt;/p&gt;
&lt;h2 id=&quot;%E7%A5%9E%E7%A7%98%E7%9A%84-buildscript-block&quot; tabindex=&quot;-1&quot;&gt;神秘的 buildscript block&lt;/h2&gt;
&lt;p&gt;Google 翻一下，发现还是有一些&lt;a href=&quot;https://discuss.gradle.org/t/inherit-inject-buildscript-dependencies-into-custom-script-within-subproject/7175/9&quot;&gt;类似的问题&lt;/a&gt;，但多数是在研究怎么让 buildscript 引入的 deps 可以被一些自定义的脚本找到的&lt;a href=&quot;https://stackoverflow.com/questions/37058780/access-classpath-dependencies-defined-in-buildscript-block-in-applied-external-s&quot;&gt;问题&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;读读&lt;a href=&quot;https://docs.gradle.org/3.3/userguide/organizing_build_logic.html#sec:build_script_external_dependencies&quot;&gt;官方文档&lt;/a&gt;，我们知道 buildscript() 是创建了 ScriptHandler 实例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The closure passed to the buildscript() method configures a ScriptHandler instance. You declare the build script classpath by adding dependencies to the classpath configuration. This is the same way you declare, for example, the Java compilation classpath. You can use any of the dependency types described in Section 25.4, “How to declare your dependencies”, except project dependencies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Having declared the build script classpath, you can use the classes in your build script as you would any other classes on the classpath.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而 ScriptHandler 的源码注释写的是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To declare the script classpath, you use the DependencyHandler provided by getDependencies() to attach dependencies to the &amp;quot;classpath&amp;quot; configuration. &lt;strong&gt;These dependencies are resolved just prior to script compilation, and assembled into the classpath for the script.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，buildscript block 的执行是优于其他脚本的（但我猜应该有一个例外是 init script，后面有空再写一篇）。其实很好理解，因为这货定义的是 &lt;strong&gt;classpath&lt;/strong&gt; 依赖，我们编译用到的的 &lt;code&gt;Android Gradle Plugin&lt;/code&gt; 等等都是从这里引入的，如果 buildscript 不是优于其他脚本执行，那才会有问题嘞！&lt;/p&gt;
&lt;h2 id=&quot;%E6%92%B8%E4%B8%AA%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81&quot; tabindex=&quot;-1&quot;&gt;撸个测试代码&lt;/h2&gt;
&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;println &lt;span class=&quot;token string&quot;&gt;&#39;Hello First Line&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;buildscript &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    println &lt;span class=&quot;token string&quot;&gt;&#39;Hello Second Line&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;afterEvaluate &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;    println &lt;span class=&quot;token string&quot;&gt;&#39;Hello Third Line&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加 &lt;code&gt;--info&lt;/code&gt; 执行这个脚本构建，可以看到如下输出：&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;Starting Build&lt;br /&gt;Settings evaluated using settings &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/Path/To/Your/Project/settings.gradle&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;br /&gt;Projects loaded. Root project using build &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/Path/To/Your/Project/build.gradle&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;br /&gt;Included projects: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;root project &lt;span class=&quot;token string&quot;&gt;&#39;Your-Project&#39;&lt;/span&gt;, project &lt;span class=&quot;token string&quot;&gt;&#39;:app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;Evaluating root project &lt;span class=&quot;token string&quot;&gt;&#39;Your-Project&#39;&lt;/span&gt; using build &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/Path/To/Your/Project/build.gradle&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;br /&gt;Hello Second Line&lt;br /&gt;/Path/To/Your/Project&lt;br /&gt;Creating new cache &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; metadata-2.23/module-metadata, path /Users/2bab/.gradle/caches/modules-2/metadata-2.23/module-metadata.bin, access org.gradle.cache.internal.DefaultCacheAccess@24473bd5&lt;br /&gt;Creating new cache &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; metadata-2.23/artifact-at-repository, path /Users/2bab/.gradle/caches/modules-2/metadata-2.23/artifact-at-repository.bin, access org.gradle.cache.internal.DefaultCacheAccess@24473bd5&lt;br /&gt;Hello First Line&lt;br /&gt;Hello Third Line&lt;br /&gt;Evaluating project &lt;span class=&quot;token string&quot;&gt;&#39;:app&#39;&lt;/span&gt; using build &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/Path/To/Your/Project/app/build.gradle&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;可以看到执行顺序是 2-&amp;gt;1-&amp;gt;3，即先执行 Evaluate build.gradle，然后发生 2 的执行（也就是先执行 buildscript block），然后再顺序执行该脚本的其他代码 1（以及后续的代码如果有的话），Evaluate 结束执行 3。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;断点 Gradle 源码：&lt;/p&gt;
&lt;p&gt;1.DefaultScriptRunnerFactory.ScriptRunnerImpl.run() -&amp;gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ServiceRegistry&lt;/span&gt; scriptServices&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GradleScriptException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;compiledScript&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRunDoesSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; originalLoader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContextClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt; script &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getScript&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    script&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scriptServices&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setContextClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;script&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getContextClassloader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    script&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStandardOutputCapture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        script&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Throwable&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;GradleScriptException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A problem occurred evaluating %s.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; script&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        script&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStandardOutputCapture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;currentThread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setContextClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originalLoader&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.ProjectScript.buildscript() -&amp;gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildscript&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Closure&lt;/span&gt; configureClosure&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;getScriptTarget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;buildscript&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;configureClosure&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;遗憾的是 &lt;code&gt;script.run()&lt;/code&gt; 的过程暂时还没找到对应的实现，猜测和 Java 找 main 方法思路类似吧。但是通过比对 &lt;strong&gt;调用 &lt;code&gt;ProjectScript.buildscript()&lt;/code&gt; 该方法的时机&lt;/strong&gt; 和 &lt;strong&gt;测试代码打印的 log&lt;/strong&gt;，会发现：&lt;strong&gt;断到该方法调用时，还没有任何的 log 输出（也就是 buildscript 确实是优先执行的），如果在 buildscript 闭包开始做任何操作，比如 apply 一个脚本，那么会立马走到对应的 apply 方法中。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E8%A7%A3%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;解法&lt;/h2&gt;
&lt;p&gt;有了上面的测试，知道了 buildscript block 的优先执行，所以问题也就简单解决了——把 buildscript 相关逻辑的脚本放到 block 内；此外，如果 block 内的东西还需要暴露给其他脚本，依旧是可以用 &lt;code&gt;ext&lt;/code&gt; 来做 export 的：&lt;/p&gt;
&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;buildscript &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;apply&lt;/span&gt; from&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRootProject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rootDir&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;absolutePath &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/scripts/utils.gradle&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; gradlePluginVersion &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isDebug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2.3.3&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2.0.0&#39;&lt;/span&gt;&lt;br /&gt;    ext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gradlePluginVersion &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gradlePluginVersion&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;mavenLocal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        classpath &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.android.tools.build:gradle:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;gradlePluginVersion&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #4 aar 和 tools:replace 冲突</title>
    <link href="https://2bab.me/zh/blog/2017-05-23-daily-of-agp-aar-replace-conflict/"/>
    <updated>2017-05-23T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-05-23-daily-of-agp-aar-replace-conflict/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;『构建指北』是探索 Android 构建相关的一系列文章，涵盖了 Gradle、Android Gradle Plugin、Kotlin Script 等工具，以及相关架构上的应用。以发现问题解决问题为出发点，传递新知提高生产效率为落脚点。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最近做一些 SDK 升级时，有些包引入后会有诸如此类的报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AndroidManifest.xml:22:9-40 Error:
Attribute application@theme value=(@style/AppTheme) from AndroidManifest.xml:22:9-40
is also present at [some:libraries:version] AndroidManifest.xml:9:18-62 value=(@style/AnotherTheme).
Suggestion: add &#39;tools:replace=&amp;quot;android:theme&amp;quot;&#39; to &amp;lt;application&amp;gt; element at AndroidManifest.xml:18:5-65:19 to override.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一个很常见的错误了，照着提示做 &lt;code&gt;replace&lt;/code&gt; 就 OK 了。&lt;strong&gt;但是当我加上&lt;/strong&gt; &lt;code&gt;replace&lt;/code&gt; &lt;strong&gt;的代码后，发现依旧报错：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Multiple entries with same key: @android:theme=REPLACE and android:theme=REPLACE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;百思不得其解，查看了一下依赖库的&lt;/strong&gt; &lt;code&gt;AndroidManifest.xml&lt;/code&gt; &lt;strong&gt;源码，发现它也设置了&lt;/strong&gt;&lt;code&gt;tools:replace=&amp;quot;android:theme&amp;quot;&lt;/code&gt;&lt;strong&gt;，而 Manifest Merger 把这个视为冲突抛了出来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%9D%E8%80%83&quot; tabindex=&quot;-1&quot;&gt;思考&lt;/h2&gt;
&lt;p&gt;如果只是跟着 &lt;a href=&quot;https://developer.android.com/studio/build/manifest-merge.html&quot;&gt;官方的 Manifest Merge&lt;/a&gt;，这个问题恐怕无解。&lt;a href=&quot;http://stackoverflow.com/questions/35131182/manifest-merge-in-android-studio&quot;&gt;StackOverflow&lt;/a&gt; 上也有人问过这个问题，但是没有更多的解法回复。&lt;/p&gt;
&lt;p&gt;为什么依赖库会想不开去设置 &lt;code&gt;replace&lt;/code&gt; 属性呢？很大的一个可能是：他也碰到了他的依赖库和他的 Manifest 有冲突的情况。那么我们能做什么？我们始终还是想要把他的某些属性给替换掉的（theme/allowBackup/...），不管他是出于什么样的目的，都不能阻止我想打出包的心！&lt;/p&gt;
&lt;h2 id=&quot;%E8%A7%A3%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;解法&lt;/h2&gt;
&lt;p&gt;通过简单的观察和源码查看，我们发现 merge 是发生在 &lt;code&gt;process${variant}Manifest&lt;/code&gt; 这个 Task。那么就得想办法在执行这个任务之前 Precheck 一下所有依赖的 &lt;code&gt;AndroidManifest.xml&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/2BAB/Seal&quot;&gt;Seal - A gradle plugin to do precheck of Android Manifest.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我写了一个简易的插件来做这件事，目前支持两个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;删除 Application 节点的某些属性，如 &lt;code&gt;debuggable&lt;/code&gt;、&lt;code&gt;theme&lt;/code&gt;、&lt;code&gt;allowBackup&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;删除 Application 节点中 &lt;code&gt;tools:replace&lt;/code&gt; 属性的某些值，如 &lt;code&gt;android:icon&lt;/code&gt;、&lt;code&gt;android:theme&lt;/code&gt;、&lt;code&gt;android:allowBackup&lt;/code&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个插件不仅能解决上述提到的问题，还能顺带修复诸如下面这种 Warning：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning: AndroidManifest.xml already defines debuggable (in &lt;a href=&quot;http://schemas.android.com/apk/res/android&quot;&gt;http://schemas.android.com/apk/res/android&lt;/a&gt;); using existing value in manifest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而我们所需要做的，仅仅是指定我们不需要 libraries 的那些属性：&lt;/p&gt;
&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; projectRoot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRootProject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rootDir&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;absolutePath&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// 依赖库的 Manifest 文件搜索路径&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// 1. Gradle plugin 2.3.0 或者更高版本，会默认开启 build-cache 功能，Release 版本的库会解压到这里&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// 2. 但是我们同样需要对 SNAPSHOT 的库做预检查，所以还需要加入 exploded-aar 的目录&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// 3. 有更多自定义的目录或者 module，请自行添加&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; manifestPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// for AAR of Release&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// see note below&lt;/span&gt;&lt;br /&gt;        projectRoot &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/build-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// for AAR of SNAPSHOT&lt;/span&gt;&lt;br /&gt;        projectRoot &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/app/build/intermediates/exploded-aar&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; removeAttrs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;android:debuggable&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; replaceValues &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;android:allowBackup&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;seal &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    enabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;    manifests &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; manifestPath&lt;br /&gt;&lt;br /&gt;    appAttrs &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        enabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;        attrsShouldRemove &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; removeAttrs&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    appReplaceValues &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        enabled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;        valuesShouldRemove &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; replaceValues&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是，如果开启了 &lt;code&gt;build-cache&lt;/code&gt;, Seal 建议你把 build-cache  的文件夹放在工程目录内（就是上面配置里的 build-cache 位置）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//gradle.properties
android.buildCacheDir=./build-cache
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更多信息，请参考 Github 仓库内的说明，欢迎大家提 PR 和 ISSUE。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #3 再谈 AAR 与混淆</title>
    <link href="https://2bab.me/zh/blog/2017-04-14-daily-of-agp-aar-proguard/"/>
    <updated>2017-04-14T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-04-14-daily-of-agp-aar-proguard/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;『构建指北』是探索 Android 构建相关的一系列文章，涵盖了 Gradle、Android Gradle Plugin、Kotlin Script 等工具，以及相关架构上的应用。以发现问题解决问题为出发点，传递新知提高生产效率为落脚点。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;之前写了篇&lt;a href=&quot;http://2bab.me/2017/03/24/gradle-daily-crash-library-module-buildtypes/&quot;&gt;文章&lt;/a&gt;讲到了由于 &lt;code&gt;buildTypes&lt;/code&gt; 默认设置的原因导致  library module 无法 debug 的情况。事实上，当时只解决了打 Debug 包的情况，而忽略了打 Release 包时还埋了一个隐藏的问题。&lt;/p&gt;
&lt;p&gt;问题还原：我们在做全局的 &lt;code&gt;rebuild&lt;/code&gt; 或者 &lt;code&gt;assembleRelease&lt;/code&gt; 时，会出现有些类找不到的情况，而 &lt;code&gt;assembleDebug&lt;/code&gt; 不会。仔细观察会发现，这些报错的类都是被外部 module 引用的部分，例如 module A 有类 Clazz，被 module B 引用，则 Clazz 报错。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;既然推断是互相引用时才会出问题，那基本可以判断 proguard 出问题了。把 module release 时的 proguard 关掉试试，果然不报错了！回想一下 Android 的打包顺序，应该是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分别打包各个的 library module（module 混淆）&lt;/li&gt;
&lt;li&gt;整合解压所有的依赖，包括本地的依赖和远程的依赖，和 application module 一起打整包（整体混淆）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;那么，面对不同的情况，应该要有不同的混淆策略：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果是本地的 library module：可以选择不在 library 做混淆，而只做全局的混淆，这样就不会出现上文的 module 相互引用找不到类的情况，并且只需要维护一份配置文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是输出到外部的 SDK，一般又分两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;闭源的：例如高德 SDK，友盟 SDK 等，一般会做 AAR 的混淆，但是会隔离出一个包或者一个类专门提供 API（也就是说明文档里的 API），这个包/类会 keep 住，但是大量的具体的实现会实施混淆，并且尽量把一些敏感内容、算法用 JNI 等方式去做调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开源的：例如 Github 上的各类开源库，一般不做 AAR 的混淆，但是会提供一个 consumerProguardFiles 的配置项，用以保证库代码的关键部分不被混淆，如下（参考官方&lt;a href=&quot;https://developer.android.com/studio/projects/android-library.html?hl=zh-cn&quot;&gt;用户指南&lt;/a&gt;）&lt;/p&gt;
&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;android &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     defaultConfig &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;         consumerProguardFiles &lt;span class=&quot;token string&quot;&gt;&#39;lib-proguard-rules.txt&#39;&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #2 AGP 2.3.0 再无 exploded-aar</title>
    <link href="https://2bab.me/zh/blog/2017-03-26-daily-of-agp-not-exploded-aar-2-3-0/"/>
    <updated>2017-03-26T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-03-26-daily-of-agp-not-exploded-aar-2-3-0/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;『构建指北』是探索 Android 构建相关的一系列文章，涵盖了 Gradle、Android Gradle Plugin、Kotlin Script 等工具，以及相关架构上的应用。以发现问题解决问题为出发点，传递新知提高生产效率为落脚点。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;升级 Android Gradle  Plugin 至 2.3.0 后，会发现 exploded-aar 这个 build 目录下的文件夹大部分情况下不存在了（但是仍然有时候会出现一两个 aar 的解压包，有些诡异）。这个改动最相关的原因是 2.3.0 默认开启了 Build Cache，具体在&lt;a href=&quot;http://tools.android.com/tech-docs/build-cache&quot;&gt;这里&lt;/a&gt;有说明。&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;p&gt;而我们之前有一个需求就是从 app module 的 exploded-aar 的 assets 中收集其他 module 的一些信息，现在也无法进行了。Google 一下会发现也有人&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=228404&quot;&gt;怨声载道&lt;/a&gt;，并且有人给的&lt;a href=&quot;http://likfe.com/2017/03/15/android-studio-exploded-aar/&quot;&gt;解法&lt;/a&gt;是关掉 Build Cache。这显然是不满足我们提高生产力的需求滴，于是我研究了一下相关的源码。&lt;/p&gt;
&lt;p&gt;搜索 BuildCache 字样不难发现，Library 相关的 Task 中有这样一段代码：&lt;/p&gt;
&lt;p&gt;[-&amp;gt;PrepareLibraryTask.java]&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt; * Returns {@code true} if the build cache should be used for the prepare-library task, and&lt;br /&gt; * {@code false} otherwise.&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;shouldUseBuildCache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; buildCacheEnabled&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MavenCoordinates&lt;/span&gt; mavenCoordinates&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// We use the build cache only when it is enabled *and* the Maven artifact is not a snapshot&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// version (to address http://b.android.com/228623)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; buildCacheEnabled &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;mavenCoordinates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;endsWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-SNAPSHOT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以第一个问题就解了，有用户提出 Cache 应该考虑到 Maven 仓库的发版习惯，对于 SNAPSHOT 这种经常会同版本多发版的情况需要忽略，采用降级方案（使用原来的 exploded-aar）。&lt;/p&gt;
&lt;p&gt;那指望从这里去解决问题是没救了，但是既然之前是从 assets 里做的数据收集，那从 raw 做是不是也可以？毕竟这是两个极其相似的文件夹，但是在打包过程中的处理却有些迥异。&lt;/p&gt;
&lt;p&gt;我们可以看到 raw 的 merge 结果其实是在 &lt;code&gt;./build/intermediates/res/merged/release/raw&lt;/code&gt;，并不走 exploded-aar，&lt;strong&gt;故这是一个兼容各个版本的一个取巧解决方案&lt;/strong&gt;：如果你也需要在每个 library module 写入一些信息，并从 app module 做收集，那么 merged raw 是目前比较好使的一个暂存方案，就不要指望 exploded-aar 啦（除非你全部都发的是 SNAPSHOT）。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>构建指北 #1 Library Module BuildTypes</title>
    <link href="https://2bab.me/zh/blog/2017-03-24-daily-of-agp-library-module-buildtypes/"/>
    <updated>2017-03-24T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-03-24-daily-of-agp-library-module-buildtypes/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;『构建指北』是探索 Android 构建相关的一系列文章，涵盖了 Gradle、Android Gradle Plugin、Kotlin Script 等工具，以及相关架构上的应用。以发现问题解决问题为出发点，传递新知提高生产效率为落脚点。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最近工作中换了一个工程，重新配了一遍 Gradle 的环境，然后发现所有的 Library Module 都无法 Debug 或者只能取到某些全局变量（局部变量找不到）。百思不得其解时，突然发现我明明打的是 Debug 包 &lt;code&gt;assembleDebug&lt;/code&gt;，我的 Library Module 执行的却都是 &lt;code&gt;transformClassesAndResourcesWithProguardForRelease &lt;/code&gt;。明明在这些 module 都配置了 &lt;code&gt;debug&lt;/code&gt; 的 &lt;code&gt;buildTypes&lt;/code&gt;，但却不生效，反而打了混淆的 release 包。&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;debug &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    debuggable &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;    jniDebuggable &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;    minifyEnabled &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;    zipAlignEnabled &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;    signingConfig signingConfigs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;debug&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;release &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;    debuggable &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;    jniDebuggable &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;    minifyEnabled &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;    zipAlignEnabled &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;    proguardFiles &lt;span class=&quot;token function&quot;&gt;getDefaultProguardFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;proguard-android.txt&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;proguard.cfg&#39;&lt;/span&gt;&lt;br /&gt;    signingConfig signingConfigs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;release&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个时候，&lt;a href=&quot;https://github.com/lomanyong&quot;&gt;@阿咏&lt;/a&gt; 给了我提示：&lt;a href=&quot;http://stackoverflow.com/questions/28081846/use-different-build-types-of-library-module-in-android-app-module-in-android-stu&quot;&gt;http://stackoverflow.com/questions/28081846/use-different-build-types-of-library-module-in-android-app-module-in-android-stu&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Well, Gradle Android plugin simply can&#39;t build the debug version of dependent library modules. This is a well-known, old issue and this is not resolved yet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原来这是有历史原因的，这东西就是这么设计滴（By Design），只能想办法绕一下。例如在这个问题下方的讨论里就提供了一种思路：&lt;/p&gt;
&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;android &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    publishNonDefault &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    releaseCompile &lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;:yourLibrary&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; configuration&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;release&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    debugCompile &lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;:yourLibrary&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; configuration&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;debug&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// This is also possible&lt;/span&gt;&lt;br /&gt;    customCompile &lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;:yourLibrary&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; configuration&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;custom&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;不过，这样在有多个 Library Module 依赖的时候，显得不够优雅。这边我提供了一个自己的思路：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;android &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    buildTypes &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        release &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            debuggable &lt;span class=&quot;token function&quot;&gt;isDebug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            minifyEnabled &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isDebug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            zipAlignEnabled &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isDebug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            proguardFiles &lt;span class=&quot;token function&quot;&gt;getDefaultProguardFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;proguard-android.txt&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;../tools/proguard.cfg&#39;&lt;/span&gt;&lt;br /&gt;            signingConfig signingConfigs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;release&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isDebug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;startParameter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTaskNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// for clean etc..&lt;/span&gt;&lt;br /&gt;        return &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    return gradle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;startParameter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTaskNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Debug&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;我们就只提供一种 buildType，也就是默认的 release，然后把type 内的配置动态化即可。这种方案适合只有两三种 type 的情况，可以用少量的代码在 Library 内部就解决问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Android 源码笔记 #2 源码及 Framework 结构</title>
    <link href="https://2bab.me/zh/blog/2017-03-10-android-source-development-notes-2/"/>
    <updated>2017-03-10T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-03-10-android-source-development-notes-2/</id>
    <content type="html">&lt;h2 id=&quot;%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84&quot; tabindex=&quot;-1&quot;&gt;源码结构&lt;/h2&gt;
&lt;h3 id=&quot;%E6%A1%86%E6%9E%B6%E5%9B%BE&quot; tabindex=&quot;-1&quot;&gt;框架图&lt;/h3&gt;
&lt;p&gt;图片来自 &lt;a href=&quot;http://source.android.com/source/&quot;&gt;Android Source Overview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2017-03-10-android-source-development-notes-2-2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%8C%85%E8%AF%B4%E6%98%8E&quot; tabindex=&quot;-1&quot;&gt;包说明&lt;/h3&gt;
&lt;p&gt;下述说明引用自 &lt;a href=&quot;http://www.cloudchou.com/android/post-136.html&quot;&gt;Cloud Chou&#39;s Tech Blog&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;abi # 应用二进制接口，不同的操作系统，应用二进制接口不同，因此linux上的二进制可执行文件在windows上无法执行&lt;/li&gt;
&lt;li&gt;android # 存放了一些xml文件，用于描述工程路径及其对应的远程仓库地址，repo工具将使用这些信息同步代码&lt;/li&gt;
&lt;li&gt;bionic # bionic C库,Android没有使用标准的 glibc 库，而是自己重新实现了一套 C/C++库，包括 libc libdl libm libstdc++ libthread_db&lt;/li&gt;
&lt;li&gt;bootable # 包含两个工程，recovery 和 diskinstaller，刷机或者系统升级都是由 Recovery完成的&lt;/li&gt;
&lt;li&gt;build # Android编译系统核心代码都存放在该目录，我们也将对该目录下的文件做详细分析&lt;/li&gt;
&lt;li&gt;cts # Android 兼容性测试套件标准&lt;/li&gt;
&lt;li&gt;dalvik # dalvik Java 虚拟机，Android 用的 Java 虚拟机和 PC 上用的 JVM 不一样&lt;/li&gt;
&lt;li&gt;development # 应用程序开发工具 有 eclipse 开发用的formatter配置&lt;/li&gt;
&lt;li&gt;device # 设备相关配置文件，存放规则 device/$vendor/$product&lt;/li&gt;
&lt;li&gt;docs # 网站文档&lt;/li&gt;
&lt;li&gt;external # 用到的第三方库 象 busybox bash openssl 等工具都存放在该目录&lt;/li&gt;
&lt;li&gt;filelist # 使用 godir 命令生成的索引文件&lt;/li&gt;
&lt;li&gt;frameworks # 核心框架 —— Java 及 C++ 语言，可生成 framework.jar&lt;/li&gt;
&lt;li&gt;gdk # glass 开发 sdk&lt;/li&gt;
&lt;li&gt;hardware # 部分厂家开源的硬件适配层 HAL 代码&lt;/li&gt;
&lt;li&gt;kernel # 内核源码目录 存放规则 kernel/$vendor/$product&lt;/li&gt;
&lt;li&gt;libcore # 一些有用的库 像 xml Jason luni&lt;/li&gt;
&lt;li&gt;libnativehelper # Support functions for Android&#39;s class libraries&lt;/li&gt;
&lt;li&gt;Makefile # 在顶层目录编译，利用的默认Makefile，它只是简单包含了 build/core/main.mk&lt;/li&gt;
&lt;li&gt;ndk # ndk开发工具&lt;/li&gt;
&lt;li&gt;packages # Android apk程序所在目录,象 settings，g- allery 等程序&lt;/li&gt;
&lt;li&gt;pdk # Platform Development Kit The goal of the PDK release is to help chipset vendors and OEMs to migrate to a new relelase&lt;/li&gt;
&lt;li&gt;prebuilt # x86和arm架构下预编译的一些资源&lt;/li&gt;
&lt;li&gt;prebuilts # 有clang eclipse gcc misc ndk qemu-kernel sdk tools 等子目录，交叉编译工具链所在目录&lt;/li&gt;
&lt;li&gt;sdk # sdk及模拟器&lt;/li&gt;
&lt;li&gt;system # 核心代码，包含了最小化可启动的环境，还有底层调试及检查工具，adbd 也在 system/core 目录&lt;/li&gt;
&lt;li&gt;tools # 有子目录 build 和 motodev，可能跟摩托罗拉有关&lt;/li&gt;
&lt;li&gt;vendor # 设备制造商专用的配置存放目录，存放规则 vendor/$vendor/$product&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E7%9D%80%E9%87%8D%E5%85%B3%E5%BF%83%E7%9A%84&quot; tabindex=&quot;-1&quot;&gt;着重关心的&lt;/h3&gt;
&lt;p&gt;如果不是像小米这样的有自己硬件的厂商，其实一般关心的层面在 &lt;code&gt;Android Framework&lt;/code&gt; 和 &lt;code&gt;Applications&lt;/code&gt;。映射到具体包就是 &lt;code&gt;frameworks&lt;/code&gt; 和 &lt;code&gt;packages&lt;/code&gt;。应用程序没啥好看的，每个版本也不尽相同，主要看看 &lt;code&gt;frameworks&lt;/code&gt;，下面内容摘自 &lt;a href=&quot;http://blog.csdn.net/liyuanjinglyj/article/details/48056579&quot;&gt;Git_Android 的 Android核心服务解析篇(二)——Android源码结构分析&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;应用程序框架是Android系统中的核心部分，也就是SDK部分，它会提供接口给应用程序使用，同时应用程序框架又会与系统服务，系统程序库，硬件抽象层的关联，所以其作用十分重大，应用程序框架的实现代码大部分都在/frameworks/base和/frameworks/av目录下。&lt;/p&gt;
&lt;p&gt;frameworks/base的目录结构如下所示：
&lt;strong&gt;frameworks/base&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;api //全是XML文件，定义了API&lt;/li&gt;
&lt;li&gt;cmds //Android中的重要命令（am，app_proce等）&lt;/li&gt;
&lt;li&gt;core //核心库&lt;/li&gt;
&lt;li&gt;data //声音字体等数据文件&lt;/li&gt;
&lt;li&gt;docs //文档&lt;/li&gt;
&lt;li&gt;drm //数字版权管理&lt;/li&gt;
&lt;li&gt;graphics  //图形图像&lt;/li&gt;
&lt;li&gt;icu4j //用于解决国际化问题&lt;/li&gt;
&lt;li&gt;include //头文件&lt;/li&gt;
&lt;li&gt;keystore  //数字签名证书相关&lt;/li&gt;
&lt;li&gt;libs //库&lt;/li&gt;
&lt;li&gt;location  //地理位置&lt;/li&gt;
&lt;li&gt;media //多媒体&lt;/li&gt;
&lt;li&gt;native //本地库&lt;/li&gt;
&lt;li&gt;nfc-extras  //NFC相关&lt;/li&gt;
&lt;li&gt;obex //蓝牙传输&lt;/li&gt;
&lt;li&gt;opengl //OpenGL相关&lt;/li&gt;
&lt;li&gt;packages  //设置，TTS,VPN程序&lt;/li&gt;
&lt;li&gt;policy //锁屏界面相关&lt;/li&gt;
&lt;li&gt;sax //XML解析器&lt;/li&gt;
&lt;li&gt;services  //Android服务&lt;/li&gt;
&lt;li&gt;telephony  //电话相关&lt;/li&gt;
&lt;li&gt;test-runner  //测试相关&lt;/li&gt;
&lt;li&gt;tests //测试相关&lt;/li&gt;
&lt;li&gt;tools //工具&lt;/li&gt;
&lt;li&gt;voip //可视通话&lt;/li&gt;
&lt;li&gt;wifi //无线网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android应用程序框架层的大部分实现代码被保存在/frameworks/base目录下，其实在这个目录中还有一个名为service的目录，里面的代码用于实现Android系统服务，其目录结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;frameworks/base/services&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;common_time  //日期时间相关的服务&lt;/li&gt;
&lt;li&gt;input //输入系统服务&lt;/li&gt;
&lt;li&gt;Java //其他重要服务的Java层&lt;/li&gt;
&lt;li&gt;jni //其他重要服务的JNI层&lt;/li&gt;
&lt;li&gt;tests //测试相关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中java和jni两个目录分别是一些其他的服务的Java层和JNI层实现，java目录下的目录结构以及其他Android系统服务的相关说明如下所示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;frameworks/base/services/core/java/com/android/server&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;accessibility&lt;/li&gt;
&lt;li&gt;am&lt;/li&gt;
&lt;li&gt;connectivity&lt;/li&gt;
&lt;li&gt;display&lt;/li&gt;
&lt;li&gt;dreams&lt;/li&gt;
&lt;li&gt;drm&lt;/li&gt;
&lt;li&gt;input&lt;/li&gt;
&lt;li&gt;location&lt;/li&gt;
&lt;li&gt;net&lt;/li&gt;
&lt;li&gt;pm&lt;/li&gt;
&lt;li&gt;power&lt;/li&gt;
&lt;li&gt;updates&lt;/li&gt;
&lt;li&gt;usb&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&#92;——wm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AlarmManagerService.java//闹钟服务&lt;/li&gt;
&lt;li&gt;AppWidgetService.java//应用程序小工具服务&lt;/li&gt;
&lt;li&gt;AppWidgetServiceImpl.java&lt;/li&gt;
&lt;li&gt;AttributeCache.java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&#92;——BackupManagerService.java//备份服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BatteryService.java//电池相关服务&lt;/li&gt;
&lt;li&gt;BluetoothManagerService.java//蓝牙&lt;/li&gt;
&lt;li&gt;BootReceiver.java&lt;/li&gt;
&lt;li&gt;BrickReceiver.java&lt;/li&gt;
&lt;li&gt;CertBlacklister.java&lt;/li&gt;
&lt;li&gt;ClipboardService.java&lt;/li&gt;
&lt;li&gt;CommonTimeManagementService.java//时间管理服务&lt;/li&gt;
&lt;li&gt;ConnectivityService.java&lt;/li&gt;
&lt;li&gt;CountryDetectorService.java&lt;/li&gt;
&lt;li&gt;DevicePolicyManagerService.java&lt;/li&gt;
&lt;li&gt;DeviceStorageMonitorService.java//设备存储器监听服务&lt;/li&gt;
&lt;li&gt;DiskStatsService.java//磁盘状态服务&lt;/li&gt;
&lt;li&gt;DockObserver.java//底座监视服务&lt;/li&gt;
&lt;li&gt;DropBoxManagerService.java&lt;/li&gt;
&lt;li&gt;EntropyMixer.java&lt;/li&gt;
&lt;li&gt;EventLogTags.logtags&lt;/li&gt;
&lt;li&gt;INativeDaemonConnectorCallbacks.java&lt;/li&gt;
&lt;li&gt;InputMethodManagerService.java//输入法管理服务&lt;/li&gt;
&lt;li&gt;IntentResolver.java&lt;/li&gt;
&lt;li&gt;IntentResolverOld.java&lt;/li&gt;
&lt;li&gt;LightsService.java&lt;/li&gt;
&lt;li&gt;LocationManagerService.java//地理位置服务&lt;/li&gt;
&lt;li&gt;MasterClearReceiver.java&lt;/li&gt;
&lt;li&gt;MountService.java//挂载服务&lt;/li&gt;
&lt;li&gt;NativeDaemonConnector.java&lt;/li&gt;
&lt;li&gt;NativeDaemonConnectorException.java&lt;/li&gt;
&lt;li&gt;NativeDaemonEvent.java&lt;/li&gt;
&lt;li&gt;NetworkManagementService.java//网络管理服务&lt;/li&gt;
&lt;li&gt;NetworkTimeUpdateService.java&lt;/li&gt;
&lt;li&gt;NotificationManagerService.java//通知服务&lt;/li&gt;
&lt;li&gt;NsdService.java&lt;/li&gt;
&lt;li&gt;PackageManagerBackupAgent.java&lt;/li&gt;
&lt;li&gt;PreferredComponent.java&lt;/li&gt;
&lt;li&gt;ProcessMap.java&lt;/li&gt;
&lt;li&gt;RandomBlock.java&lt;/li&gt;
&lt;li&gt;RecognitionManagerService.java&lt;/li&gt;
&lt;li&gt;SamplingProfilerService.java&lt;/li&gt;
&lt;li&gt;SerialService.java//NFC相关&lt;/li&gt;
&lt;li&gt;ServiceWatcher.java&lt;/li&gt;
&lt;li&gt;ShutdownActivity.java&lt;/li&gt;
&lt;li&gt;StatusBarManagerService.java//状态栏管理服务&lt;/li&gt;
&lt;li&gt;SystemBackupAgent.java&lt;/li&gt;
&lt;li&gt;SystemService.java&lt;/li&gt;
&lt;li&gt;TelephonyRegistry.java&lt;/li&gt;
&lt;li&gt;TextServicesManagerService.java&lt;/li&gt;
&lt;li&gt;ThrottleService.java&lt;/li&gt;
&lt;li&gt;TwilightCalculator.java&lt;/li&gt;
&lt;li&gt;TwilightService.java&lt;/li&gt;
&lt;li&gt;UiModeManagerService.java&lt;/li&gt;
&lt;li&gt;UpdateLockService.java//锁屏更新服务&lt;/li&gt;
&lt;li&gt;VibratorService.java//震动服务&lt;/li&gt;
&lt;li&gt;WallpaperManagerService.java//壁纸服务&lt;/li&gt;
&lt;li&gt;Watchdog.java//看门狗&lt;/li&gt;
&lt;li&gt;WifiService.java//无线网络服务&lt;/li&gt;
&lt;li&gt;WiredAccessoryManager.java//无线设备管理服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上面的文件夹和文件可以看出，Android中涉及的服务种类有：界面，网络，电话等核心模块，这些专属服务是系统级别的服务，这些系统服务一般都会在Android系统启动的时候加载，在系统关闭的时候结束，受到系统的管理，应用程序并没有权力去打开或者关闭，它们会随着系统的运行一直在后台运行，供应用程序和其他组件来使用。&lt;/p&gt;
&lt;p&gt;另外，在framework/av/目录下面有一个services目录，在此目录中存放的是音频和照相机的服务的实现代码，此目录的具体结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;frameworks/av/services&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;audioflinger//音频管理服务&lt;/li&gt;
&lt;li&gt;camera//照相机的管理服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;av/services目录主要用来支持Android系统中的音频和照相机服务。&lt;/p&gt;
&lt;p&gt;媒体库：Android中的媒体库在2.3版之前是由OpenCore实现的，2.3版之后Stragefright被替换了,OpenCore成为新的多媒体的实现库。同时Android自带了一些音视频的管理库，用于管理多媒体的录制，播放，编码和解码等功能。&lt;/p&gt;
&lt;p&gt;Android的多媒体程序库的实现代码主要在/frameworks/av/media目录中，其目录结构如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;frameworks/av/media/&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;common_time  //时间相关&lt;/li&gt;
&lt;li&gt;libeffects  //多媒体效果&lt;/li&gt;
&lt;li&gt;libmedia  //多媒体录制，播放&lt;/li&gt;
&lt;li&gt;libmedia_native  //里面只有一个Android。迥，用来编译native文件&lt;/li&gt;
&lt;li&gt;libmediaplayerservice//多媒体播放服务的实现库&lt;/li&gt;
&lt;li&gt;libstagefright  //Stagefright的实现库&lt;/li&gt;
&lt;li&gt;mediaserver  //跨进程多媒体服务&lt;/li&gt;
&lt;li&gt;mtp //MTP协议的实现（媒体传输协议）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图层显示库：Android中的图层显示库主要负责对显示子系统的管理，负责图层的渲染，叠加，绘制等功能，提供了2D和3D图层的无缝融合，是整个Android系统显示的“大脑中枢”，其代码在/frameworks/native/services/surfaceflinger/目录下，其目录结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;frameworks/native/services/surfaceflinger/&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DisplayHardware//显示底层相关&lt;/li&gt;
&lt;li&gt;tests//测试&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://android.mk//MakeFile%E6%96%87%E4%BB%B6&quot;&gt;Android.mk//MakeFile文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Barrier.h&lt;/li&gt;
&lt;li&gt;Client.cpp//显示的客户端实现文件&lt;/li&gt;
&lt;li&gt;Client.h&lt;/li&gt;
&lt;li&gt;clz.cpp&lt;/li&gt;
&lt;li&gt;clz.h&lt;/li&gt;
&lt;li&gt;DdmConnection.cpp&lt;/li&gt;
&lt;li&gt;DdmConnection.h&lt;/li&gt;
&lt;li&gt;DisplayDevice.cpp//显示设备相关&lt;/li&gt;
&lt;li&gt;DisplayDevice.h&lt;/li&gt;
&lt;li&gt;EventThread.cpp//消息线程&lt;/li&gt;
&lt;li&gt;EventThread.h&lt;/li&gt;
&lt;li&gt;GLExtensions.cpp//OpenGL扩展&lt;/li&gt;
&lt;li&gt;GLExtensions.h&lt;/li&gt;
&lt;li&gt;Layer.cpp//图层相关&lt;/li&gt;
&lt;li&gt;Layer.h&lt;/li&gt;
&lt;li&gt;LayerBase.cpp//图层基类&lt;/li&gt;
&lt;li&gt;LayerBase.h&lt;/li&gt;
&lt;li&gt;LayerDim.cpp//图层相关&lt;/li&gt;
&lt;li&gt;LayerDim.h&lt;/li&gt;
&lt;li&gt;LayerScreenshot.cpp//图层相关&lt;/li&gt;
&lt;li&gt;LayerScreenshot.h&lt;/li&gt;
&lt;li&gt;MessageQueue.cpp//消息队列&lt;/li&gt;
&lt;li&gt;MessageQueue.h&lt;/li&gt;
&lt;li&gt;MODULE_LICENSE_APACHE2//证书&lt;/li&gt;
&lt;li&gt;SurfaceFlinger.cpp//图层管理者，图层管理的核心类&lt;/li&gt;
&lt;li&gt;SurfaceFlinger.h&lt;/li&gt;
&lt;li&gt;SurfaceTextureLayer.cpp//文字图层&lt;/li&gt;
&lt;li&gt;SurfaceTextureLayer.h&lt;/li&gt;
&lt;li&gt;Transform.cpp&lt;/li&gt;
&lt;li&gt;Transform.h&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3D图形库：Android中的3D图形渲染是采用OpenGL来实现的，OpenGl是开源的第三方图形渲染库，使用该库可以实现Android中的3D图形硬件加速或者3D图形软件加速功能，是一个非常重要的功能库。从Android 4.3开始，支持最新，最强大的OpenGL ES3.0.其实现代码在/frameworks/native/opengl中，其目录结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;frameworks/native/opengl/&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;include //OpenGL中的头文件&lt;/li&gt;
&lt;li&gt;libagl //在Mac OS上的库&lt;/li&gt;
&lt;li&gt;libs //OpenGL的接口和实现库&lt;/li&gt;
&lt;li&gt;specs //OpenGL的文档&lt;/li&gt;
&lt;li&gt;tests //测试相关&lt;/li&gt;
&lt;li&gt;tools //工具库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SQLite：SQLite是Android系统自带的一个轻量级关系数据库，其实现源代码已经在网上开源。SQLite的优点是操作方便，运行速度较快，占用资源较少等，比较适合在嵌入式设备上面使用。SQLite是Android系统自带的实现数据库功能的核心库，其代码实现分为Java和C两个部分，Java部分的代码位于/frameworks/base/core/java/android/database，主要是实现SQLite的框架和接口的实现，使用户开发应用程序时能很简单地操作数据库，并且捕获数据库异常。目录结构如下所示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;frameworks/base/core/java/android/database/&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sqlite//SQLite的框架文件&lt;/li&gt;
&lt;li&gt;AbstractCursor.java//游标的抽象类&lt;/li&gt;
&lt;li&gt;AbstractWindowedCursor.java&lt;/li&gt;
&lt;li&gt;BulkCursorDescriptor.java&lt;/li&gt;
&lt;li&gt;BulkCursorNative.java&lt;/li&gt;
&lt;li&gt;BulkCursorToCursorAdaptor.java//游标适配器&lt;/li&gt;
&lt;li&gt;CharArrayBuffer.java&lt;/li&gt;
&lt;li&gt;ContentObservable.java&lt;/li&gt;
&lt;li&gt;ContentObserver.java&lt;/li&gt;
&lt;li&gt;CrossProcessCursor.java&lt;/li&gt;
&lt;li&gt;CrossProcessCursorWrapper.java//CrossProcessCursor的封装类&lt;/li&gt;
&lt;li&gt;Cursor.java//游标实现娄&lt;/li&gt;
&lt;li&gt;CursorIndexOutOfBoundsException.java//游标出界异常&lt;/li&gt;
&lt;li&gt;CursorJoiner.java&lt;/li&gt;
&lt;li&gt;CursorToBulkCursorAdaptor.java//适配器&lt;/li&gt;
&lt;li&gt;CursorWindow.java//游标窗口&lt;/li&gt;
&lt;li&gt;CursorWindowAllocationException.java//游标窗口异常&lt;/li&gt;
&lt;li&gt;CursorWrapper.java//游标封装类&lt;/li&gt;
&lt;li&gt;DatabaseErrorHandler.java//数据库错误句柄&lt;/li&gt;
&lt;li&gt;DatabaseUtils.java//数据库工具类&lt;/li&gt;
&lt;li&gt;DataSetObservable.java&lt;/li&gt;
&lt;li&gt;DataSetObserver.java&lt;/li&gt;
&lt;li&gt;DefaultDatabaseErrorHandle.java//默认数据库错误句柄&lt;/li&gt;
&lt;li&gt;IBulkCursor.java&lt;/li&gt;
&lt;li&gt;IContentObserver.aidl//aidl用于跨进程通信&lt;/li&gt;
&lt;li&gt;MatrixCursor.java&lt;/li&gt;
&lt;li&gt;MergeCursor.java&lt;/li&gt;
&lt;li&gt;Observable.java&lt;/li&gt;
&lt;li&gt;package.html&lt;/li&gt;
&lt;li&gt;SQLException.java//数据库异常&lt;/li&gt;
&lt;li&gt;StaleDataException.java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Android 源码笔记 #1 编译&amp;烧录</title>
    <link href="https://2bab.me/zh/blog/2017-03-10-android-source-development-notes-1/"/>
    <updated>2017-03-10T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-03-10-android-source-development-notes-1/</id>
    <content type="html">&lt;p&gt;由于最近工作需要 + 自己也挺感兴趣，折腾起 Android 的下层开发。&lt;/p&gt;
&lt;h2 id=&quot;%E7%8E%AF%E5%A2%83%E6%8F%8F%E8%BF%B0%EF%BC%9A&quot; tabindex=&quot;-1&quot;&gt;环境描述：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS 10.12 Sierra&lt;/li&gt;
&lt;li&gt;Xcode 8（安装各种环境会用到，然而正式编译时没用这个）&lt;/li&gt;
&lt;li&gt;android-5.1.1_r14，LMY48M，Nexus 7（flo）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;%E7%B4%A0%E6%9D%90%E5%87%86%E5%A4%87&quot; tabindex=&quot;-1&quot;&gt;素材准备&lt;/h2&gt;
&lt;p&gt;上 Google 爸爸的 &lt;a href=&quot;http://source.android.com/source/initializing.html&quot;&gt;Android Source&lt;/a&gt; ，按 &lt;code&gt;Establishing a Build Environment&lt;/code&gt; 和 &lt;code&gt;Downloading the Source&lt;/code&gt; 做完即可，只有小坑如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Creating a case-sensitive disk image&lt;/code&gt; 时，不要用 Disk Utility 的 GUI 界面创建，大概因为版本更新了，找不到创建稀疏磁盘的选项，并且大小写那项我选了两回都没生效（？？？），&lt;strong&gt;请按它后续的提示直接用 shell 操作&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reverting from make 3.82&lt;/code&gt; 这段，看清楚其实只有在 4.0.x 及以下系统才需要做，现在一般不会去编这个版本了&lt;strong&gt;可以忽略&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Initializing a Repo client&lt;/code&gt; 就是下源码啦，可以使用&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/&quot;&gt;清华大学的 AOSP 镜像&lt;/a&gt;，比较不会碰到下载的各种问题（不过我是公司网，直连速度喜人 4M/s）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E7%BC%96%E8%AF%91&quot; tabindex=&quot;-1&quot;&gt;编译&lt;/h2&gt;
&lt;p&gt;按着 Android Source 的步骤，现在终于要 &lt;code&gt;Preparing to Build&lt;/code&gt; 啦，注意到其实还有个页面可能没看仔细——&lt;a href=&quot;https://source.android.com/source/requirements.html&quot;&gt;Requirements&lt;/a&gt;，这里有坑的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mac OS (Intel/x86)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Android 6.0 (Marshmallow) - AOSP master: Mac OS v10.10 (Yosemite) or later with Xcode 4.5.2 and Command Line Tools&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Android 5.x (Lollipop): Mac OS v10.8 (Mountain Lion) with Xcode 4.5.2 and Command Line Tools&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Android 4.1.x-4.3.x (Jelly Bean) - Android 4.4.x (KitKat): Mac OS v10.6 (Snow Leopard) or Mac OS X v10.7 (Lion) and Xcode 4.2 (Apple&#39;s Developer Tools)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Android 1.5 (Cupcake) - Android 4.0.x (Ice Cream Sandwich): Mac OS v10.5 (Leopard) or Mac OS X v10.6 (Snow Leopard) and the Mac OS X v10.5 SDK&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;按这个表，Google 其实推荐 5.x 6.0 使用 4.5.2 的 Xcode 及其 SDK 来编译，然而现代 macOS 早已不支持这些老东西了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;StackOverflow 上各种教你拷贝 10.8 的 Xcode SDK、改 &lt;code&gt;build/core/combo/mac_version.mk&lt;/code&gt; ，我试了一早上各种版本，没成&lt;/li&gt;
&lt;li&gt;有些民间教程表示自己啥也没改，10.10 10.11 SDK 完美运行没有问题，我也是没成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重点来了&lt;/strong&gt;，&lt;a href=&quot;http://stackoverflow.com/questions/31589866/running-aosp-build-on-mac-yosemite-and-later/36709862#36709862&quot;&gt;这个答案&lt;/a&gt; 有理有据，他直接用旧版本的 Xcode，具体操作是下个旧版的 DMG（链接可能无效，自己上苹果的开发者页面找一下即可） 然后挂载上来，路径是 /Volumes/Xcode/（懒得安装到本地），最后在 shell 中选择这个作为当前 Xcode 的版本 &lt;code&gt;sudo xcode-select -s /Volumes/Xcode/Xcode.app/Contents/Developer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目测一切奇怪的环境问题都可以用这个终极办法修复。&lt;/p&gt;
&lt;p&gt;最后的最后，终于是编译啦：&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; clobber&lt;br /&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; build/envsetup.sh&lt;br /&gt;$ lunch aosp_arm-eng              &lt;br /&gt;$ &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-j4&lt;/span&gt;                               &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lunch&lt;/code&gt; 要选对应机型和权限类型，比如我要编 Nexus 7（flo）的 debug，就是 &lt;code&gt;lunch aosp_flo-userdebug&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果选的不是 ARM 虚拟机类型的编译版本，则需要加入对应机型的特定驱动一起编译，具体可以参考 &lt;a href=&quot;https://developers.google.com/android/drivers&quot;&gt;Google’s Nexus driver page&lt;/a&gt; 以及这篇文章的&lt;a href=&quot;http://www.jianshu.com/p/1c3d47b2031f&quot;&gt;驱动部分说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make -j&lt;/code&gt; 跟的数字有些讲究，其实根据线程池的最高效算法，CPU 密集型的线程池应该是 n + 1 的 pool 大小，由于现在的 Intel CPU 都是超线程的，例如我用的 15 寸 Mac 是 4 核 8 线程，所以就是 &lt;code&gt;make -j9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E7%83%A7%E5%BD%95&quot; tabindex=&quot;-1&quot;&gt;烧录&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Running Build&lt;/code&gt; 这章没多少内容，也就一个命令有点坑：&lt;code&gt;fastboot flashall -w&lt;/code&gt;。直接运行会抛错：&lt;code&gt;error: neither -p product specified nor ANDROID_PRODUCT_OUT set&lt;/code&gt;。需要设置一下 img 的目录，按照提示 &lt;code&gt;export ANDROID_BUILD_OUT=&amp;quot;path/to/your/img/folder&amp;quot;&lt;/code&gt; 设置即可 （-p 参数用了没成功...大概姿势有问题）&lt;/p&gt;
&lt;p&gt;OK，终于 Run 起来了。后续可以做进一步的调试了。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5&quot; tabindex=&quot;-1&quot;&gt;参考链接&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://source.android.com/source/&quot;&gt;Downloading and Building - Android Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stanfy.com/blog/build-and-run-android-from-aosp-source-code-to-a-nexus-7/&quot;&gt;Build and Run Android from AOSP Source Code to a Nexus 7&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>插件化笔记 #6 启动插件 Service</title>
    <link href="https://2bab.me/zh/blog/2017-03-08-plugadget-note-6-start-plugin-service/"/>
    <updated>2017-03-08T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2017-03-08-plugadget-note-6-start-plugin-service/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Demo: &lt;a href=&quot;https://github.com/2BAB/Android-Plugin-Dev-Notes&quot;&gt;https://github.com/2BAB/Android-Plugin-Dev-Notes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上节学习到了插件化资源 ID 冲突的问题和解法，本节主要讨论 Service 的插件化启动。按照本系列的尿性，肯定要简单易搞，所以预注册 Service 是本节的讨论前提。具体原因在 Activity 那节写了，但是需要额外说明的是其实 Service 由于量少且新增少，是比较少做&lt;a href=&quot;http://weishu.me/2016/05/11/understand-plugin-framework-service/&quot;&gt;复杂插件化&lt;/a&gt;方案的。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;service-%E7%9A%84%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;Service 的启动流程&lt;/h2&gt;
&lt;p&gt;推荐看这篇 &lt;a href=&quot;http://gityuan.com/2016/03/06/start-service/&quot;&gt;startService启动过程分析&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2017-03-08-start-plugin-service-1.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2017-03-08-start-plugin-service-2.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;其实由于我们提前注册了 Service，没有了各种校验问题，所以只需要跟 Activity 一样注入 ClassLoader 去加载对应的模块代码就可以启动 Service。但是 Service 并没有像 Activity 那样方便的切入点（Instrumention）：&lt;/p&gt;
&lt;p&gt;[ActivityThread.java]&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleCreateService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CreateServiceData&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If we are getting ready to gc after going to the background, well&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// we are back active so skip it.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;unscheduleGcIdler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;LoadedApk&lt;/span&gt; packageInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPackageInfoNoCheck&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;info&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;applicationInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;compatInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt; service &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ClassLoader&lt;/span&gt; cl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; packageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        service &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; cl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;info&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;mInstrumentation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Unable to instantiate service &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;info&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LoadedApk&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPackageInfoNoCheck&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApplicationInfo&lt;/span&gt; ai&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CompatibilityInfo&lt;/span&gt; compatInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPackageInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ai&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; compatInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LoadedApk&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPackageInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApplicationInfo&lt;/span&gt; aInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CompatibilityInfo&lt;/span&gt; compatInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; baseLoader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; securityViolation&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; includeCode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; registerPackage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; differentUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;UserHandle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;myUserId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserHandle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUserId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uid&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mResourcesManager&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LoadedApk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; ref&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;differentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token comment&quot;&gt;// Caching not supported across users&lt;/span&gt;&lt;br /&gt;            ref &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;includeCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            ref &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mPackages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            ref &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mResourcePackages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;LoadedApk&lt;/span&gt; packageInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ref &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; ref&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;packageInfo &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;packageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mResources &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;packageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mResources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAssets&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isUpToDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localLOGV&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Slog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;includeCode &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Loading code package &quot;&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Loading resource-only package &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; aInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageName&lt;br /&gt;                        &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; (in &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mBoundApplication &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;br /&gt;                                &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; mBoundApplication&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;processName &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            packageInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LoadedApk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; aInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; compatInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; baseLoader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                            securityViolation&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; includeCode &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;flags&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApplicationInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FLAG_HAS_CODE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; registerPackage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mSystemThread &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;android&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    packageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;installSystemApplicationInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token function&quot;&gt;getSystemContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mPackageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;differentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token comment&quot;&gt;// Caching not supported across users&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;includeCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                mPackages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LoadedApk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;packageInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                mResourcePackages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LoadedApk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;packageInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; packageInfo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;既然没有直接有效的切入点，那么其他的插件化方案都是怎么做的？除了文初 weishu 的那个高级方法以外，还有一种比较实在并且通吃的解法。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8A%A8%E6%80%81%E6%8F%92%E5%85%A5-element---dex-%E5%8A%A8%E6%80%81%E6%80%A7%E7%9A%84%E9%80%9A%E8%A7%A3&quot; tabindex=&quot;-1&quot;&gt;动态插入 Element - Dex 动态性的通解&lt;/h2&gt;
&lt;p&gt;Dex 动态载入的原理其实是从 Google MultiDex 方案出来后大家才敢投入研究和使用的，具体参考&lt;a href=&quot;http://souly.cn/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2016/02/25/android%E5%88%86%E5%8C%85%E5%8E%9F%E7%90%86/&quot;&gt;Android分包原理&lt;/a&gt;这篇文章。&lt;/p&gt;
&lt;p&gt;在了解了有这样的方案之后，很多人纷纷表示这可以用来做插件化和热修复，类似的博客有大头鬼的&lt;a href=&quot;http://blog.csdn.net/lzyzsd/article/details/49843581&quot;&gt;Android热更新实现原理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;看完这两篇之后，其实应该了解的差不多了。&lt;strong&gt;本质上这种 Dex 载入的方案就是把代码载入到自定义的 ClassLoader 中，跟之前写的 Activity Hook 方案异曲同工。只不过这是一种比较彻底、方便，一次性解决了所有需要注入 ClassLoader 的地方。不仅可以用来启动 Service，也可以用来启动 Activity（当然前提是你预注册了）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;具体代码 Demo 请参考文初的链接。&lt;/p&gt;
&lt;h2 id=&quot;demo-usage&quot; tabindex=&quot;-1&quot;&gt;Demo Usage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在插件工程 &lt;code&gt;./gradlew assembleDebug&lt;/code&gt; 打出插件&lt;/li&gt;
&lt;li&gt;导入插件到手机指定目录（这个目录是自己随便指定的，跟 Demo 代码里的加载路径一致即可）：&lt;code&gt;mv app/build/outputs/apk/app-debug.apk app/build/outputs/apk/6-Plugin.apk &amp;amp;&amp;amp; adb push app/build/outputs/apk/6-Plugin.apk /system/dex/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在宿主工程 &lt;code&gt;./gradlew installDebug&lt;/code&gt; 打包并安装宿主 APK&lt;/li&gt;
&lt;li&gt;打开宿主 App，查看效果&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2017-03-08-start-plugin-service-3.png?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot; tabindex=&quot;-1&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;本系列为笔记文，文中有大量的源码解析都是引用的其他作者的成果，本文参考资料均已在文中给出链接。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>插件化笔记 #5 资源分区修改插件</title>
    <link href="https://2bab.me/zh/blog/2016-12-01-plugadget-note-5-ResModificationPlugin/"/>
    <updated>2016-12-01T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2016-12-01-plugadget-note-5-ResModificationPlugin/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Demo: &lt;a href=&quot;https://github.com/2BAB/Android-Plugin-Dev-Notes&quot;&gt;https://github.com/2BAB/Android-Plugin-Dev-Notes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上节学习到「各插件构造各自的 &lt;code&gt;Resource&lt;/code&gt; 对象，各个插件的资源互不影响」，本节使用另外一种方案——「所有插件的资源都加载到一个 &lt;code&gt;AssetManager&lt;/code&gt;，全局可用」。&lt;/p&gt;
&lt;p&gt;单一 Resource（AssetManager）的方案，主要问题在于资源 ID 冲突，解决的方案大体上分三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改 AAPT 的源码&lt;/li&gt;
&lt;li&gt;修改 AAPT 的生成产物（R.java，resource.arsc，各类 xml 包括 layout）&lt;/li&gt;
&lt;li&gt;使用 public.xml 手动设置 padding&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中方案 1 出现的较早，原理也比较简单，修改的部分不多，携程的 &lt;a href=&quot;https://github.com/CtripMobile/DynamicAPK/tree/master/caapt&quot;&gt;DynamicApk&lt;/a&gt; 等开源项目都在使用。而方案 2 则鲜为人知，但是 &lt;a href=&quot;https://github.com/wequick/Small&quot;&gt;Small&lt;/a&gt; 项目给我们做了一个完整的实例，&lt;strong&gt;本节的 Gradle 插件就是基于 Small 的源码「抽离 + 修改」而来&lt;/strong&gt;。方案 3 不涉及到打包流程改动，在此不做阐释。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;%E8%B5%84%E6%BA%90%E7%9A%84%E6%89%93%E5%8C%85%E8%BF%87%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;资源的打包过程&lt;/h2&gt;
&lt;p&gt;这里引用罗老师的一篇博文：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一. 解析AndroidManifest.xml&lt;/p&gt;
&lt;p&gt;二. 添加被引用资源包&lt;/p&gt;
&lt;p&gt;三. 收集资源文件&lt;/p&gt;
&lt;p&gt;四. 将收集到的资源增加到资源表&lt;/p&gt;
&lt;p&gt;五. 编译values类资源&lt;/p&gt;
&lt;p&gt;六. 给Bag资源分配ID&lt;/p&gt;
&lt;p&gt;七. 编译Xml资源文件&lt;/p&gt;
&lt;p&gt;八. 生成资源符号&lt;/p&gt;
&lt;p&gt;九. 生成资源索引表&lt;/p&gt;
&lt;p&gt;十. 编译AndroidManifest.xml文件&lt;/p&gt;
&lt;p&gt;十一. 生成R.java文件&lt;/p&gt;
&lt;p&gt;十二. 打包APK文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显然，我们的插入点应该是 11-12 步中间（这废话啊），然后我们来看一个 Apk 打包过程中，Gradle 的哪个任务对应了这个插入点（注意，这里以 Debug 打包为例）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;:app:preBuild UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:preDebugBuild UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:checkDebugManifest&lt;/p&gt;
&lt;p&gt;:app:preReleaseBuild UP-TO-DATE&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;:app:prepareDebugDependencies&lt;/p&gt;
&lt;p&gt;:app:compileDebugAidl UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:compileDebugRenderscript UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:generateDebugBuildConfig UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:generateDebugResValues UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:generateDebugResources UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:mergeDebugResources UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:processDebugManifest UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:processDebugResources UP-TO-DATE&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;////////上面是 Resource 处理 ////////////这里就是分割点////////////////下面是 Java Source 处理/////////&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;:app:generateDebugSources UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:incrementalDebugJavaCompilationSafeguard UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:compileDebugJavaWithJavac
Incremental compilation of 2 classes completed in 0.737 secs.&lt;/p&gt;
&lt;p&gt;:app:compileDebugNdk UP-TO-DATE&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;:app:transformResourcesWithMergeJavaResForDebug UP-TO-DATE&lt;/p&gt;
&lt;p&gt;:app:validateSigningDebug&lt;/p&gt;
&lt;p&gt;:app:packageDebug&lt;/p&gt;
&lt;p&gt;:app:assembleDebug&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到 Resource 的处理和 Java 文件的处理有一个比较明晰的分割处，所以我们就在这个地方修改 AAPT 的生成物。&lt;/p&gt;
&lt;h2 id=&quot;hook&quot; tabindex=&quot;-1&quot;&gt;Hook&lt;/h2&gt;
&lt;p&gt;插件打包依赖于我们的打包插件：&lt;/p&gt;
&lt;pre class=&quot;language-gradle&quot;&gt;&lt;code class=&quot;language-gradle&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// project&#39;s  build.gradle&lt;/span&gt;&lt;br /&gt;classpath &lt;span class=&quot;token string&quot;&gt;&#39;com.example.gradle:res-modification-plugin:1.0.1-SNAPSHOT&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// app&#39;s build.gradle&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;res-modification&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gradle 插件需要注入的点：&lt;/p&gt;
&lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Project project&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;project &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;br /&gt;&lt;br /&gt;    project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;afterEvaluate &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; processDebugResources &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ProcessAndroidResources&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tasks&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;processDebugResources&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// 阿咏（https://github.com/lomanyong）的提示，防止 processDebugResources 因为 Up-To-Data 而跳过&lt;/span&gt;&lt;br /&gt;        processDebugResources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;outputs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;upToDateWhen &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// 注入点&lt;/span&gt;&lt;br /&gt;        processDebugResources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;doLast &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ProcessAndroidResources i &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;br /&gt;            println &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;inject point!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function&quot;&gt;hookAapt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实现资源分区的的大致流程（详情请查看源码）：&lt;/p&gt;
&lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hookAapt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ProcessAndroidResources aaptTask&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Unpack resources.ap_&lt;/span&gt;&lt;br /&gt;    File apFile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; aaptTask&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageOutputFile&lt;br /&gt;    FileTree apFiles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;zipTree&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apFile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    File unzipApDir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentFile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ap_unzip&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    unzipApDir&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;copy &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        from apFiles&lt;br /&gt;        into unzipApDir&lt;br /&gt;&lt;br /&gt;        include &lt;span class=&quot;token string&quot;&gt;&#39;AndroidManifest.xml&#39;&lt;/span&gt;&lt;br /&gt;        include &lt;span class=&quot;token string&quot;&gt;&#39;resources.arsc&#39;&lt;/span&gt;&lt;br /&gt;        include &lt;span class=&quot;token string&quot;&gt;&#39;res/**/*&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Modify assets&lt;/span&gt;&lt;br /&gt;    File symbolFile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;aaptTask&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textSymbolOutputDir&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;R.txt&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;prepareSplit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;symbolFile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    File sourceOutputDir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; aaptTask&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sourceOutputDir&lt;br /&gt;    File rJavaFile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sourceOutputDir&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com/example/plugin5/R.java&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; rev &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buildToolsRevision&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; noResourcesFlag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; filteredResources &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; updatedResources &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    Aapt aapt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Aapt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unzipApDir&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rJavaFile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; symbolFile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rev&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;retainedTypes &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; null &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;retainedTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        aapt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filterResources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;retainedTypes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filteredResources&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        println &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;] split library res files...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        aapt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filterPackage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;retainedTypes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;idMaps&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; null&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;retainedStyleables&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; updatedResources&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        println &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;] slice asset package and reset package id...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        String pkg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.example.plugin5&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Overwrite the aapt-generated R.java with full edition&lt;/span&gt;&lt;br /&gt;        rJavaFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        aapt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateRJava&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rJavaFile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pkg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;allTypes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;allStyleables&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;        println &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token expression&quot;&gt;project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;] split library R.java files...&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        println &lt;span class=&quot;token string&quot;&gt;&#39;No Resource To Modify&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    String aaptExe &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; aaptTask&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buildTools&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BuildToolInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PathId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AAPT&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Delete filtered entries.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Cause there is no `aapt update&#39; command supported, so for the updated resources&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// we also delete first and run `aapt add&#39; later.&lt;/span&gt;&lt;br /&gt;    filteredResources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;updatedResources&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    ZipUtils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apFile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filteredResources&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Re-add updated entries.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// $ aapt add resources.ap_ file1 file2 ...&lt;/span&gt;&lt;br /&gt;    project&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exec &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        executable aaptExe&lt;br /&gt;        workingDir unzipApDir&lt;br /&gt;        args &lt;span class=&quot;token string&quot;&gt;&#39;add&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; apFile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;br /&gt;        args updatedResources&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// store the output instead of printing to the console&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// standardOutput = new ByteArrayOutputStream()&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，我们就可以在 Plugin 的 Activity 里实现「宿主+插件」的资源加载：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt; allResources&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Bundle&lt;/span&gt; savedInstanceState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;savedInstanceState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// 使用插件的资源&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;plugin_activity_main&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;TextView&lt;/span&gt; testTv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;test_textview&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// 使用宿主的资源&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; hostName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getIdentifier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;host_name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;com.example.resmodification&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; hostNameColor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token function&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getIdentifier&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;host_name_color&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;com.example.resmodification&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        testTv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hostName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        testTv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTextColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hostNameColor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;attachBaseContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; newBase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;hookResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachBaseContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;     * 宿主和插件的资源放在了一个 Resource 对象里，因为我们在打包时做了资源PP段分区，所以不会出现资源冲突的现象。&lt;br /&gt;     * 不过目前只是在该 Activity 把我们构建的 Resource 对象 Set 进去了，所以也只能在当前 Context 的环境里同时&lt;br /&gt;     * 访问到两个包的资源（我们仅做简单的测试）。一个成熟的插件化架构应该是把所有 Context 初始化的注入都做好（有多&lt;br /&gt;     * 种实现手段）。&lt;br /&gt;     */&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPluginR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;allResources &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; allResources&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; dexPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/system/dex/&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5-Plugin.apk&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;AssetManager&lt;/span&gt; assetManager &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AssetManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; addAssetPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; assetManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;addAssetPaths&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; paths &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            paths&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dexPath&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 插件 Asset&lt;/span&gt;&lt;br /&gt;            paths&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPackageResourcePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 宿主的 Asset&lt;/span&gt;&lt;br /&gt;            addAssetPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;assetManager&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;paths&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            allResources &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;assetManager&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDisplayMetrics&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; allResources&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hookResource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; newBase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;Field&lt;/span&gt; field &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newBase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mResources&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBase&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPluginR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;demo-usage&quot; tabindex=&quot;-1&quot;&gt;Demo Usage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在 Gradle 插件工程执行 &lt;code&gt;./gradlew publishToMavenLocal&lt;/code&gt;，使得 Gradle 插件可以被我们的 插件 App 工程找到并依赖&lt;/li&gt;
&lt;li&gt;在插件工程 &lt;code&gt;./gradlew assembleDebug&lt;/code&gt; 打出插件&lt;/li&gt;
&lt;li&gt;导入插件到手机指定目录（这个目录是自己随便指定的，跟 Demo 代码里的加载路径一致即可）：&lt;code&gt;mv app-debug.apk 5-Plugin.apk &amp;amp;&amp;amp; adb push 5-Plugin.apk /system/dex/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在宿主工程 &lt;code&gt;./gradlew installDebug&lt;/code&gt; 打包并安装宿主 APK&lt;/li&gt;
&lt;li&gt;打开宿主 App，查看效果&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot; tabindex=&quot;-1&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;本系列为笔记文，文中有大量的源码解析都是引用的其他作者的成果，详见下方参考资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/luoshengyang/article/details/8744683&quot;&gt;Android应用程序资源的编译和打包过程分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/96d5b83ca26c&quot;&gt;插件化-资源处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wequick/Small&quot;&gt;Small&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>插件化笔记 #4 加载插件资源文件</title>
    <link href="https://2bab.me/zh/blog/2016-11-16-plugadget-note-4-LoadPluginResource/"/>
    <updated>2016-11-16T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2016-11-16-plugadget-note-4-LoadPluginResource/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Demo: &lt;a href=&quot;https://github.com/2BAB/Android-Plugin-Dev-Notes&quot;&gt;https://github.com/2BAB/Android-Plugin-Dev-Notes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;插件化的资源加载大体上也分两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个插件构造单一的 &lt;code&gt;Resource&lt;/code&gt; 对象，各个插件的资源互不影响&lt;/li&gt;
&lt;li&gt;所有插件的资源都加载到一个 &lt;code&gt;AssetManager&lt;/code&gt;，全局可用，但是会出现资源 ID 冲突的现象，必须在打包流程中做修改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本节以构造单一对象为基础讲解，资源冲突的问题和方案下节讲。&lt;/p&gt;
&lt;h2 id=&quot;%E8%B5%84%E6%BA%90%E7%9A%84%E5%AF%BB%E6%89%BE%E8%BF%87%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;资源的寻找过程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在Activity中的getResources()方法会走到ContextWrapper的实现上，而ContextWrapper顾名思义它只是一个包装类，最终的调用是ContextWrapper的实际类ContextImpl中的方法。&lt;/p&gt;
&lt;p&gt;ContextImpl中getResources()方法返回了它的成员变量mResource,我们看一下ContextImpl的构造函数，其中mResources被第一次赋值是通过下面的函数调用:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;Resources resources = packageInfo.getResources(mainThread);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;packageInfo是一个LoadedApk类型的参数，mainThread是ActivityThread类型的参数，mainThread就是当前Apk运行的主进程类，我们继续看LoadedApk中的方法：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt; public Resources getResources(ActivityThread mainThread) {
    if (mResources == null) {
        mResources = mainThread.getTopLevelResources(mResDir, mSplitResDirs, mOverlayDirs,
                    mApplicationInfo.sharedLibraryFiles, Display.DEFAULT_DISPLAY, null, this);
    }
    return mResources;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Resources getTopLevelResources(String resDir, String[] splitResDirs, String[] overlayDirs,
            String[] libDirs, int displayId, Configuration overrideConfiguration,
            LoadedApk pkgInfo) {
    return mResourcesManager.getTopLevelResources(resDir, splitResDirs, overlayDirs, libDirs,
                displayId, overrideConfiguration, pkgInfo.getCompatibilityInfo(), null);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;mResourceManager是一个ResourceManager类型的成员变量，当我们戳开ResourceManager的代码时，惊喜的发现这个类是一个单例，然后定位到getTopLevelResources方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ResourcesKey&lt;/span&gt; key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResourcesKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resDir&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; displayId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; overrideConfiguration&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scale&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; wr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mActiveResources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; wr &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; wr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAssets&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isUpToDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;AssetManager&lt;/span&gt; assets &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AssetManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resDir &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;assets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addAssetPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resDir&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;assets&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dm&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; compatInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; token&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; wr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mActiveResources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt; existing &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; wr &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; wr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;existing &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; existing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAssets&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isUpToDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAssets&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; existing&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;mActiveResources&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至此，我们知道了资源的真正载入和管理是由 AssetManager 来实现的，那么 Hook 点也知道了——修改 ContextImpl 的 Resource 对象所持有的 AssetManager。&lt;/p&gt;
&lt;h2 id=&quot;hook&quot; tabindex=&quot;-1&quot;&gt;Hook&lt;/h2&gt;
&lt;p&gt;在 Plugin 的 Activity 里实现资源加载：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt; pluginR&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Bundle&lt;/span&gt; savedInstanceState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;savedInstanceState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// 如果不 Hook mResource，也可以直接 getPluginR 来获取 values 的资源，但是无法装载 Layout&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// getPluginR().getString(R.string.plugin_string_res); //&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Fragment 或者 自定义 View 等需要自己 Inflate 的也支持&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;/*int bundleLayoutId = R.layout.activity_main;&lt;br /&gt;        View bundleView = LayoutInflater.from(this).inflate(bundleLayoutId, null);&lt;br /&gt;        setContentView(bundleView);*/&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activity_main&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;attachBaseContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; newBase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;Field&lt;/span&gt; field &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newBase&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mResources&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            field&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBase&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPluginR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachBaseContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPluginR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pluginR &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pluginR&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; dexPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/system/dex/&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;4-Plugin.apk&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;AssetManager&lt;/span&gt; assetManager &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AssetManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; addAssetPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; assetManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;addAssetPath&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            addAssetPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;assetManager&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dexPath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            pluginR &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;assetManager&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDisplayMetrics&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token comment&quot;&gt;//独立使用Resource时（不hook mResource）&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token comment&quot;&gt;//Resources origin = super.getResources();&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token comment&quot;&gt;//pluginR = new Resources(assetManager, origin.getDisplayMetrics(), origin.getConfiguration());&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pluginR&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot; tabindex=&quot;-1&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;本系列为笔记文，文中有大量的源码解析都是引用的其他作者的成果，详见下方参考资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.liuguangli.win/archives/370&quot;&gt;ANDROID应用程序插件化研究之ASSETMANAGER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/96d5b83ca26c&quot;&gt;插件化-资源处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/nupt123456789/article/details/50414175&quot;&gt;Android插件化（三）加载插件apk中的Resource资源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>插件化笔记 #3 启动插件 Activity</title>
    <link href="https://2bab.me/zh/blog/2016-11-16-plugadget-note-3-StartPluginActivity/"/>
    <updated>2016-11-16T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2016-11-16-plugadget-note-3-StartPluginActivity/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Demo: &lt;a href=&quot;https://github.com/2BAB/Android-Plugin-Dev-Notes&quot;&gt;https://github.com/2BAB/Android-Plugin-Dev-Notes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实从这一节开始，就需要区分两种插件化的方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要提前在 Manifest 里注册 Activity 、Service 的&lt;/li&gt;
&lt;li&gt;不需要的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网路上大多是研究不需要注册的方案，需要 hook 各种 Activity、Service 的启动流程和生命周期。一般来说 hook 的原则是越少越好，越少越不会和系统的变动有冲突，自然也就不会出问题。&lt;/p&gt;
&lt;p&gt;当然，也有不做深度 hook 的方案，比如被反编译出来的 Atlas （现在改名叫 ACDD，&lt;a href=&quot;https://github.com/zjf1023/ACDDExtension&quot;&gt;https://github.com/zjf1023/ACDDExtension&lt;/a&gt;)。下面都是按预先注册的方案来解释，这样的方案较为简单，hook的量极少，稳定可靠，当然也就牺牲了一定的动态性。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;activity-%E5%90%AF%E5%8A%A8%E9%9C%80%E8%A6%81%E4%BB%80%E4%B9%88&quot; tabindex=&quot;-1&quot;&gt;Activity 启动需要什么&lt;/h2&gt;
&lt;p&gt;启动流程的分析网路上很多很多，这边摘了一个比较精简的版本：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;每个Activity的启动过程都是通过startActivityForResult() 最终都会调用Instrument.execStartActivity()&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;再由ActivityManagerNative.startActivity() 通过 IPC AMS所在进程，ActivityManagerService.startActivity()&lt;/li&gt;
&lt;li&gt;最后 ActivityStackSupervisor.startActivityLocked(),权限以及安全检查mService.checkPermission。我们的Activity如果不注册就会在这个检查时返回一个没有注册的错误，最后回到应用进程的时候抛出这个没注册的异常。&lt;/li&gt;
&lt;li&gt;安全校验完成以后，会调用ApplicationThread.scheduleLaunchActivity()&lt;/li&gt;
&lt;li&gt;这一步让ApplicationThread做好跳转 activity 的准备（一些数据的封装），紧接着通过handle发送消息通知app.thread要进行Activity启动调度了，然后 app.thread接收到消息的时候才开始进行调度。&lt;/li&gt;
&lt;li&gt;这个message的接收是在ActivityThread中的handleMessage(Message msg)处理的。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;traceBegin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRACE_TAG_ACTIVITY_MANAGER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;activityStart&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActivityClientRecord&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ActivityClientRecord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPackageInfoNoCheck&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;	        r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activityInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;applicationInfo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;compatInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;handleLaunchActivity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;traceEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Trace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TRACE_TAG_ACTIVITY_MANAGER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这句中handleLaunchActivity()又调用了performLaunchActivity(r, customIntent); 而最终又调用了这句：&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ClassLoader&lt;/span&gt; cl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;activity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mInstrumentation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newActivity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        cl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; component&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClassName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;intent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;StrictMode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;incrementExpectedActivityCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;activity&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;intent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setExtrasClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;兜了一圈又回到Instrumentation了。结果终于找到了可以hook的点了，就是这个mInstrumentation.newActivity()&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;hook&quot; tabindex=&quot;-1&quot;&gt;Hook&lt;/h2&gt;
&lt;p&gt;因为我们提前注册了 Activity，所以其实不会碰到校验的问题。剩下的问题就只有，我们的插件 Activity 代码不在当前 Classloader 里。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;ClassLoader&lt;/span&gt; cl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;packageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;activity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mInstrumentation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newActivity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        cl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; component&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getClassName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;intent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hook 的点也是显而易见的，在 Instrumentation 里把 ClassLoader 换掉。&lt;/p&gt;
&lt;p&gt;Application里：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;attachBaseContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachBaseContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;installDex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;hookInstrumentation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;installDex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 外部路径&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt; optimizedDexOutputPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/system/dex/&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3-Plugin.apk&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 无法直接从外部路径加载.dex文件，需要指定APP内部路径作为缓存目录（.dex文件会被解压到此目录）&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt; dexOutputDir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    dexClassLoader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DexClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;            optimizedDexOutputPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            dexOutputDir&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hookInstrumentation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; activityThreadClass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;android.app.ActivityThread&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Method&lt;/span&gt; currentActivityThreadMethod &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; activityThreadClass&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;currentActivityThread&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        currentActivityThreadMethod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; currentActivityThread &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currentActivityThreadMethod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// 拿到原始的 mInstrumentation字段&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Field&lt;/span&gt; mInstrumentationField &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; activityThreadClass&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mInstrumentation&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        mInstrumentationField&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;Instrumentation&lt;/span&gt; mInstrumentation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Instrumentation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; mInstrumentationField&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentActivityThread&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;//如果没有注入过，就执行替换&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mInstrumentation &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CustomInstrumentation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;CustomInstrumentation&lt;/span&gt; pluginInstrumentation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CustomInstrumentation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mInstrumentation&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dexClassLoader&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            mInstrumentationField&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentActivityThread&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pluginInstrumentation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CustomInstrumentation：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CustomInstrumentation&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Instrumentation&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; customClassloader&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Instrumentation&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CustomInstrumentation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Instrumentation&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; classLoader&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;base &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; base&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 如果要不注册 Activity 就能启动的方式，那么还需要 hook execStartActivity 等方法，此时会用到这个 base 的 Instrumentation&lt;/span&gt;&lt;br /&gt;        customClassloader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; classLoader&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newActivity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; cl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intent&lt;/span&gt; intent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InstantiationException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// 替换了 ClassLoader&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newActivity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;customClassloader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; intent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至此，我们就能启动插件的 Activity 了。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot; tabindex=&quot;-1&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;本系列为笔记文，文中有大量的源码解析都是引用的其他作者的成果，详见下方参考资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kymjs.com/code/2016/05/15/01&quot;&gt;8个类搞定插件化——Activity实现方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://weishu.me/2016/04/05/understand-plugin-framework-classloader/&quot;&gt;Android 插件化原理解析——插件加载机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nuptboyzhb/AndroidPluginFramework/blob/master/%E7%AC%AC%E4%B8%80%E8%AF%BE-%E6%94%B9%E8%BF%9B%E7%9A%84MultiDex%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%99%AE%E9%80%9Aapk/README.md&quot;&gt;Android插件化（一）：使用改进的MultiDex动态加载assets中的apk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>插件化笔记 #2 加载插件代码</title>
    <link href="https://2bab.me/zh/blog/2016-09-18-plugadget-note-2-LoadPluginClass/"/>
    <updated>2016-09-18T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2016-09-18-plugadget-note-2-LoadPluginClass/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Demo: &lt;a href=&quot;https://github.com/2BAB/Android-Plugin-Dev-Notes&quot;&gt;https://github.com/2BAB/Android-Plugin-Dev-Notes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E8%83%BD%E5%A4%9F%E8%A2%AB%E5%8A%A0%E8%BD%BD%E7%9A%84-.dex-%E6%96%87%E4%BB%B6&quot; tabindex=&quot;-1&quot;&gt;如何获取能够被加载的 .dex 文件&lt;/h2&gt;
&lt;p&gt;准备如下两个测试类，其中TestDexInterface还需要拷贝一份到工程中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[TestDexClass.java]&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classeasyload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestDexClass&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestDexInterface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPiValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.14f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;[TestDexInterface.java]&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classeasyload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestDexInterface&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPiValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;javac *.java                              -&amp;gt; .class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jar cvf origin.jar .                      -&amp;gt; .jar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dx --dex --output=target.dex origin.jar   -&amp;gt; .dex&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;按文章的步骤，自己实现了一遍，需要注意的是第二步打jar包的时候需要连包名所在的文件夹一起打进去&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|____example
| |____com
| | |____classeasyload
| | | |____TestDexClass.class
| | | |____TestDexInterface.class
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;jar包里应该是如上的结构。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8A%A0%E8%BD%BD%E5%B9%B6%E8%B0%83%E7%94%A8.dex%E9%87%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;加载并调用.dex里面的方法&lt;/h2&gt;
&lt;p&gt;这里我先 &lt;code&gt;adb shell mkdir -p /system/dex/&lt;/code&gt;, 然后&lt;code&gt;adb push target.dex /system/dex/&lt;/code&gt;
如MainActivity里代码所示：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt; optimizedDexOutputPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/system/dex/&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;target.dex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// 外部路径&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt; dexOutputDir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// 无法直接从外部路径加载.dex文件，需要指定APP内部路径作为缓存目录（.dex文件会被解压到此目录）&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;DexClassLoader&lt;/span&gt; dexClassLoader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DexClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;       optimizedDexOutputPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;       dexOutputDir&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAbsolutePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token function&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; libProviderClazz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dexClassLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;example.com.classeasyload.TestDexClass&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;TestDexInterface&lt;/span&gt; dexInterface &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TestDexInterface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; libProviderClazz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dexInterface&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPiValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LENGTH_LONG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最终成功Toast出了&lt;code&gt;3.14&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot; tabindex=&quot;-1&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;本系列为笔记文，文中有大量的源码解析都是引用的其他作者的成果，详见下方参考资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/singwhatiwanna/article/details/40283117&quot;&gt;http://blog.csdn.net/singwhatiwanna/article/details/40283117&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/NUPTboyZHB/article/category/1204147&quot;&gt;http://blog.csdn.net/NUPTboyZHB/article/category/1204147&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/20515113&quot;&gt;https://zhuanlan.zhihu.com/p/20515113&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>插件化笔记 #1 ClassLoader 初探</title>
    <link href="https://2bab.me/zh/blog/2016-09-18-plugadget-note-1-ClassLoader/"/>
    <updated>2016-09-18T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2016-09-18-plugadget-note-1-ClassLoader/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Demo: &lt;a href=&quot;https://github.com/2BAB/Android-Plugin-Dev-Notes&quot;&gt;https://github.com/2BAB/Android-Plugin-Dev-Notes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E6%9C%89%E5%87%A0%E4%B8%AAclassloader&quot; tabindex=&quot;-1&quot;&gt;有几个ClassLoader&lt;/h2&gt;
&lt;p&gt;如MainActivity的代码所示，&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt; &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Bundle&lt;/span&gt; savedInstanceState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;savedInstanceState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activity_main&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; classLoader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;classLoader &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[onCreate]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                classLoader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token class-name&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;[onCreate While]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; classLoader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打印出来的结果是&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;I/[onCreate]: dalvik.system.PathClassLoader[DexPathList[[zip file &quot;/data/app/example.com.classloaderdemo-1/base.apk&quot;],nativeLibraryDirectories=[/vendor/lib, /system/lib]]]&lt;br /&gt;I/[onCreate While]: com.android.tools.fd.runtime.IncrementalClassLoader@1d4251ea&lt;br /&gt;I/[onCreate While]: java.lang.BootClassLoader@2f2e5cdb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;卧槽，怎么有三个，这跟文章说的只有两个不一样啊 - -，而且我也只听师兄说过PathClassLoader和BootClassLoader，没见过这个IncrementalClassLoader啊，它是什么鬼？&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;随手一搜，&lt;a href=&quot;http://www.cnblogs.com/coding-way/p/5443718.html&quot;&gt;一篇结果链接&lt;/a&gt;，发现这是因为我用了 Instant Run 而出现的，再一想，嗯，Instant Run 本身也就是一种热修复的方式，思路就是把改动的地方打到dex里然后再用IncrementalClassLoader设置成app的ClassLoader的parent，即可拦截所有类加载的动作，从而实现动态增量加载。&lt;/p&gt;
&lt;h2 id=&quot;%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84classloader%E5%AE%9E%E4%BE%8B&quot; tabindex=&quot;-1&quot;&gt;创建自己的ClassLoader实例&lt;/h2&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;  * Constructs a new instance of this class with the system class loader as&lt;br /&gt;  * its parent.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSystemClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt;  * Constructs a new instance of this class with the specified class loader&lt;br /&gt;  * as its parent.&lt;br /&gt;  *&lt;br /&gt;  * @param parentLoader&lt;br /&gt;  *            The {@code ClassLoader} to use as the new class loader&#39;s&lt;br /&gt;  *            parent.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; parentLoader&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parentLoader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt;  * constructor for the BootClassLoader which needs parent to be null.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; parentLoader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; nullAllowed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parentLoader &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;nullAllowed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NullPointerException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;parentLoader == null &amp;amp;&amp;amp; !nullAllowed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    parent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; parentLoader&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文章提到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;整个Android系统里所有的ClassLoader实例都会被一棵树关联起来，这也是ClassLoader的 双亲代理模型（Parent-Delegation Model）的特点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没提到的是，ClassLoader有三个构造器，根节点的BootClassLoader自然就是不需要parent的，如注释所写&lt;/p&gt;
&lt;h2 id=&quot;%E4%BD%BF%E7%94%A8classloader%E4%B8%80%E4%BA%9B%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98&quot; tabindex=&quot;-1&quot;&gt;使用ClassLoader一些需要注意的问题&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在Java中，只有当两个实例的类名、包名以及加载其的ClassLoader都相同，才会被认为是同一种类型。
故，不可用与「加载旧类的ClassLoader」没有树的继承关系的「另一个ClassLoader」来加载新类，会出现类型不符合的异常。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;dexclassloader-%E5%92%8C-pathclassloader&quot; tabindex=&quot;-1&quot;&gt;DexClassLoader 和 PathClassLoader&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;DexClassLoader可以加载jar/apk/dex，可以从SD卡中加载未安装的apk；
PathClassLoader只能加载系统中已经安装过的apk；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;optimizedDirectory必须是一个内部存储路径，还记得我们之前说过的，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory；而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E5%8A%A0%E8%BD%BD%E7%B1%BB%E7%9A%84%E8%BF%87%E7%A8%8B&quot; tabindex=&quot;-1&quot;&gt;加载类的过程&lt;/h2&gt;
&lt;p&gt;ClassLoader.loadClass() -&amp;gt; BaseDexClassLoader.findClass() -&amp;gt; DexPathList-&amp;gt;findClass()&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Element&lt;/span&gt; element &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; dexElements&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token class-name&quot;&gt;DexFile&lt;/span&gt; dex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dexFile&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dex &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; clazz &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadClassBinaryName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; definingContext&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;clazz &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadClassBinaryName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; loader&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;defineClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mCookie&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;defineClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassLoader&lt;/span&gt; loader&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; cookie&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99&quot; tabindex=&quot;-1&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;本系列为笔记文，文中有大量的源码解析都是引用的其他作者的成果，详见下方参考资料。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/20524252&quot;&gt;https://zhuanlan.zhihu.com/p/20524252&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Android 5.0 以上 Chrome AppBar 颜色定制</title>
    <link href="https://2bab.me/zh/blog/2015-02-10-theme-color-for-chrome-on-lollipop/"/>
    <updated>2015-02-10T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2015-02-10-theme-color-for-chrome-on-lollipop/</id>
    <content type="html">&lt;p&gt;放假在家用回了 Nexus 4，在 Lollipop 作为日常系统使用一段时间后，发现了一个有意思的东西。如下图，正常情况下使用 Chrome 浏览网站时，多任务的预览界面上，Chrome 的 App bar 是灰色一片。而其背后的知乎、Gmail因为设定了 colorPrimary 而极具辨识度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ww1.sinaimg.cn/large/005YhI8igy1fvhj8eowjjj31kw0vp7az&quot; alt=&quot;未开启“合并标签页和应用”的界面，开启后的界面，Overview界面。&quot; /&gt;
&amp;lt;div style=&amp;quot;text-align:center;&amp;quot;&amp;gt;&amp;lt;i&amp;gt;未开启“合并标签页和应用”的界面 / 开启后的界面 / Overview&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;p&gt;但是在浏览 V2EX 时发现，Chrome的 App bar 竟然不是之前的灰色,类似的情况出现在 Android Police 和 但大的博客。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ww1.sinaimg.cn/large/005YhI8igy1fvhj8v269oj31kw0vp7a6&quot; alt=&quot;V2EX / @但丁不淡定 的博客 / Overview&quot; /&gt;
&amp;lt;div style=&amp;quot;text-align:center;&amp;quot;&amp;gt;&amp;lt;i&amp;gt;V2EX / @但丁不淡定 的博客 / Overview&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;查了一发 Chrome 的更新历史，发现只要满足以下条件，即可定义 Overview App Bar 颜色，同时也影响了 Chrome 内的 toolbar / statusbar 颜色。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;系统要求 Android 5.0 以上&lt;/li&gt;
&lt;li&gt;未开启“合并标签页和应用” 的 Chrome 39 以上&lt;/li&gt;
&lt;li&gt;在网站&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;中添加自定义主题颜色&lt;code&gt;&amp;lt;meta name=&amp;quot;theme-color&amp;quot; content=&amp;quot;#262a30&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://engineering-blog-2bab.qiniudn.com/theme-color-2bab.jpg&quot; alt=&quot;本站的效果&quot; /&gt;
&amp;lt;div style=&amp;quot;text-align:center;&amp;quot;&amp;gt;&amp;lt;i&amp;gt;本站使用的颜色及效果&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;随着 Lollipop 的普及以及默认 Chrome 浏览器的支持，相信这个特性会得到越来越多的网站支持，带来原生应用般辨识度的同时也增添了网站的个性。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>无法卸载的 App - 设备管理器漏洞</title>
    <link href="https://2bab.me/zh/blog/2015-02-09-app-cannot-be-uninstalled/"/>
    <updated>2015-02-09T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2015-02-09-app-cannot-be-uninstalled/</id>
    <content type="html">&lt;p&gt;前两天某朋友发现手机有个app无法卸载，后知其因设备管理器激活导致，遂去尝试取消，但却在取消那刻卡机。反复折腾之后，只能重刷。后来他发了一篇关于设备管理器bug的文章给我，便有了如下一番折腾。&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;尝鲜&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;文章&lt;a href=&quot;http://androidmaster.iteye.com/blog/2035381&quot;&gt;《Android 学习 设备管理器勾选后不能再取消了》&lt;/a&gt;（作者：带个回家）大致意思是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;继承 DeviceAdminReceiver 重写 onDisableRequested(Context context, Intent intent) 即可达到目的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onDisableRequested&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intent&lt;/span&gt; intent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 这里处理 不可编辑设备。&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Intent&lt;/span&gt; intent2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NoticeSetting&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    intent2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setFlags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FLAG_ACTIVITY_NEW_TASK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;intent2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stopService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;intent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// 是否可以停止&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;这是一个可选的消息，警告有关禁止用户的请求&quot;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在此之前，我并没有接触过设备管理器的功能，参考了 API Guides 的 &lt;a href=&quot;http://developer.android.com/guide/topics/admin/device-admin.html&quot;&gt;Device Administration&lt;/a&gt; ，以及 &lt;a href=&quot;http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html&quot;&gt;DeviceAdminReceiver&lt;/a&gt; 的 API 后，试着写了一个跟上述文章一样的 app，&lt;strong&gt;4.4 &amp;amp; 5.0均测试失败，可以正常取消激活&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;再战&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;搜索，找到&lt;a href=&quot;http://blog.csdn.net/androidsecurity/article/details/9124747&quot;&gt;《Android设备管理器漏洞》&lt;/a&gt;（作者：Jack_Jia）另一篇讲解此问题的文章。文章提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果想在设备管理器列表中”隐身“，只要不注册 &lt;code&gt;android.app.action.DEVICE_ADMIN_ENABLED&lt;/code&gt; 广播就行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是不给 &lt;code&gt;intent-filter&lt;/code&gt; 标签设置该 action。&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;receiver&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;.MyDeviceReceiver&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;description&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@string/receiver_description&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@string/app_name&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;permission&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;android.permission.BIND_DEVICE_ADMIN&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta-data&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;android.app.device_admin&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;resource&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@xml/device_manager_policies&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;intent-filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;intent-filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;receiver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4.4 &amp;amp; 5.0测试失败，设备管理器无法激活（代码激活不会弹出，设备管理器又找不到）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;三战&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;继续搜索，发现百度安全实验室一篇文章&lt;a href=&quot;http://safe.baidu.com/2014-10/deviceadminexploit2.html&quot;&gt;《Android设备管理器漏洞2》&lt;/a&gt;。文章提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;已激活设备管理器权限的手机木马利用该漏洞，可以在设置程序的设备管理器列表中隐藏，这样用户就无法通过正常途径取消该手机木马的设备管理器权限，从而达到无法卸载的目的。Android4.2版本以上系统已经修复该漏洞。&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;通过调用stopAppSwitch()方法，系统保证在进入取消设备管理器界面后，&lt;strong&gt;5秒内不会进行Activity的切换。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;onDisableRequested函数满足以下条件即可：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、返回内容不能为空，这样才可以使设备管理器弹出取消激活设备管理器警示信息 Dialog。&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;2、通过Activity切换的方式使设备管理器弹出的警示信息Dialog消失。使用户无法操作Dialog。
如果做到以上两点，程序即可成功阻止用户取消激活设备管理器操作。&lt;/p&gt;
&lt;p&gt;故，只要在 onDisableRequested 方法中，让用户在取消激活时5s内无法操作界面，然后采取 Activity 切换的方法即可绕开取消激活的步骤。这里为了测试直观并且试一试设备管理器的 api，采用了百度提供的连续锁屏法。测试环境为5.0。&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CharSequence&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onDisableRequested&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intent&lt;/span&gt; intent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;                                            &lt;br /&gt;                                                                                                                    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;//跳离当前询问是否取消激活的 dialog                                                                                          &lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Intent&lt;/span&gt; outOfDialog &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPackageManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLaunchIntentForPackage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.android.settings&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;             &lt;br /&gt;    outOfDialog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setFlags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FLAG_ACTIVITY_NEW_TASK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                            &lt;br /&gt;    context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;outOfDialog&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                                             &lt;br /&gt;                                                                                                                    &lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;//调用设备管理器本身的功能，每 100ms 锁屏一次，用户即便解锁也会立即被锁，直至 7s 后                                                                &lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DevicePolicyManager&lt;/span&gt; dpm &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;DevicePolicyManager&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DEVICE_POLICY_SERVICE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;    dpm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lockNow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                                                                  &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;                                                                                     &lt;br /&gt;        &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;                                                                                                   &lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;                                                                                         &lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                                                              &lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;                                                                                        &lt;br /&gt;                dpm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lockNow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                                                      &lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;                                                                                               &lt;br /&gt;                    &lt;span class=&quot;token class-name&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                                              &lt;br /&gt;                    i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                                                            &lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;                                                                  &lt;br /&gt;                    e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                                            &lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;                                                                                                   &lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;                                                                                                       &lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;                                                                                                           &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                                                                     &lt;br /&gt;                                                                                                                    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                                                                      &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;                                                                                                                   &lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装后打开直接跳转激活界面：
&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2015-02-09-app-cannot-be-uninstalled-1.jpeg?imageslim&quot; alt=&quot;安装后打开直接跳转激活界面&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一旦激活则无法正常卸载
&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2015-02-09-app-cannot-be-uninstalled-2.jpeg?imageslim&quot; alt=&quot;一旦激活则无法正常卸载&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入设备管理器界面
&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2015-02-09-app-cannot-be-uninstalled-3.jpeg?imageslim&quot; alt=&quot;进入设备管理器界面&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尝试取消激活
&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2015-02-09-app-cannot-be-uninstalled-4.jpeg?imageslim&quot; alt=&quot;尝试取消激活&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;强制进入锁屏
&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2015-02-09-app-cannot-be-uninstalled-5.jpeg?imageslim&quot; alt=&quot;强制进入锁屏&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，用户用普通方法无法卸载该app。测试使用某数字软件可以卸载，具体步骤：在数字软件的软件卸载功能中卸载Trick，此时提示取消激活，跳转到设备管理器界面取消激活，引发锁屏，强制锁屏7s结束后，切回数字软件，你会发现出现了取消激活的dialog，点击取消成功。&lt;/p&gt;
&lt;p&gt;而文章开头提到的流氓软件，实则是跳转到一个所有按钮无效的自定义全屏界面（不是我这样跳到设置界面），使用数字软件无法解决问题。&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;日后看到设备管理器激活申请定要小心三分，本文提及内容请勿不正当使用。&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;相关下载&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/2BAB/786513de79b7bfd82c3f&quot;&gt;源码Gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://engineering-blog-2bab.qiniudn.com/DeviceAdmin-DeviceAdminTrick.apk&quot;&gt;测试APK&lt;/a&gt;，安装后激活则无法卸载。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://engineering-blog-2bab.qiniudn.com/DeviceAdmin-recovery.apk&quot;&gt;恢复APK&lt;/a&gt;，覆盖安装后可顺利取消激活。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>ListView 两种固定标头的技巧</title>
    <link href="https://2bab.me/zh/blog/2014-12-16-listview-sticky-header/"/>
    <updated>2014-12-16T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2014-12-16-listview-sticky-header/</id>
    <content type="html">&lt;h2 id=&quot;%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%9A&quot; tabindex=&quot;-1&quot;&gt;第一种情况：&lt;/h2&gt;
&lt;p&gt;界面上有三个view，上面是一个要隐藏的View A，中间是一个不隐藏的View B，下面有一个ListView C。当C向上滑动的时候，如果A还没有被隐藏，就随着滑动而隐藏，当A完全隐藏之后，B就一直在最上面，C还可以继续向上滑动；当C向下滑动的到底后A逐渐显示出来。&lt;/p&gt;
&lt;h3 id=&quot;%E7%AA%81%E5%8F%91%E5%A5%87%E6%83%B3%E7%9A%84%E7%9C%81%E5%8A%9B%E6%96%B9%E6%B3%95%EF%BC%9A&quot; tabindex=&quot;-1&quot;&gt;突发奇想的省力方法：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;给 ListView C 添加一个HeadView（包含A、B），然后另外准备一个外部的B在屏幕顶部，一开始不可见。ListView当前滚动高度超过A的高度时，显示外部的B；滚动高度小于A时隐藏内部的B。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;%E6%95%88%E6%9E%9C%EF%BC%9A&quot; tabindex=&quot;-1&quot;&gt;效果：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-16-listview-sticky-header-1.gif?imageslim&quot; alt=&quot;效果图&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E4%BB%A3%E7%A0%81%EF%BC%9A&quot; tabindex=&quot;-1&quot;&gt;代码：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;[MainActivity.java]&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bingyan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hacklistview&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Activity&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Bundle&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LayoutInflater&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;widget&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AbsListView&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;widget&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ArrayAdapter&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;widget&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LinearLayout&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;widget&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ListView&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ListView&lt;/span&gt; listView&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LinearLayout&lt;/span&gt; sectionB&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; aHeight&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Bundle&lt;/span&gt; savedInstanceState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;savedInstanceState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activity_main&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        sectionB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;LinearLayout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;main_section_b_outside&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        aHeight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDimensionPixelSize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dimen&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;main_a_height&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;initListView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initListView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        listView &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ListView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;main_list_view&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;ArrayAdapter&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; adapter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayAdapter&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;simple_expandable_list_item_1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            adapter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;item &quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        listView&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;adapter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt; headerView &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LayoutInflater&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;main_header&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        listView&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addHeaderView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headerView&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        listView&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setOnScrollListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AbsListView&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OnScrollListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onScrollStateChanged&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AbsListView&lt;/span&gt; view&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; scrollState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AbsListView&lt;/span&gt; view&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; firstVisibleItem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; visibleItemCount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; totalItemCount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getScrollY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; aHeight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sectionB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getVisibility&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INVISIBLE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                        sectionB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setVisibility&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;VISIBLE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getScrollY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; aHeight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sectionB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getVisibility&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;VISIBLE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                        sectionB&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setVisibility&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INVISIBLE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;//获取滚动距离&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getScrollY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; listView&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getChildAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; firstVisiblePosition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; listView&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFirstVisiblePosition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; top &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; headerHeight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstVisiblePosition &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            headerHeight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; listView&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;top &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; firstVisiblePosition &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; headerHeight&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;[activity_main.xml]&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;FrameLayout&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;android&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://schemas.android.com/apk/res/android&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;tools&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://schemas.android.com/tools&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;tools:&lt;/span&gt;context&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;.MainActivity&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ListView&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@+id/main_list_view&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;background&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@color/material_deep_teal_200&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;LinearLayout&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@+id/main_section_b_outside&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wrap_content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;visibility&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;invisible&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;include&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@layout/main_section_b&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wrap_content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;LinearLayout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;FrameLayout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;[main_header.xml]&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;LinearLayout&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;android&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://schemas.android.com/apk/res/android&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;orientation&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;vertical&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;RelativeLayout&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@+id/main_section_a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@dimen/main_a_height&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;background&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@color/material_blue_grey_800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TextView&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wrap_content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wrap_content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_centerInParent&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;textSize&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@dimen/main_text_size&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;text&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@string/main_section_a&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;RelativeLayout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;include&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@+id/main_section_b_inside&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wrap_content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@layout/main_section_b&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;LinearLayout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;main_section_b.xml&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;LinearLayout&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;android&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://schemas.android.com/apk/res/android&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;orientation&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;vertical&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TextView&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@+id/main_section_b&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;match_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@dimen/main_b_height&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;background&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@android:color/holo_orange_light&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;gravity&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;center&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;textSize&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@dimen/main_text_size&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;text&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@string/main_section_b&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;LinearLayout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;备注：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果 View B 是一个复杂的 View，上面的方案可能需要改进。因为对 内外两个 View B 的一些代码操作可能要写两遍。我现在想的是把 headerView 的 B 去掉，保留同样大小的白色区域，然后外部的 B 根据 ListView 的滚动同步网上滚。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有个小 bug 是滚动条在外部的 B 刚显示时会被遮住一部分 = = 不过现在很多设计都不用滚动条了，实在没办法就自己写一个吧。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%9A&quot; tabindex=&quot;-1&quot;&gt;第二种情况：&lt;/h2&gt;
&lt;p&gt;类似于联系人列表的场景，即按首字母对ListView进行分段，并且当前分段标头会停留在ListView最上方。&lt;/p&gt;
&lt;h3 id=&quot;%E4%BB%8E%E3%80%8A50-android-hacks%E3%80%8B%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9A&quot; tabindex=&quot;-1&quot;&gt;从《50 Android Hacks》中学到的方法：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一方面，每个 List Item 都添加一个隐藏的&lt;strong&gt;分段标头&lt;/strong&gt;，当第 n 个 Item 与第 n-1 个 Item 的首字母不相同时（或者其他分割条件下的不同），显示这个分段标头。另一方面，在ListView的上层放一个隐藏的标头，标识当前显示的组别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E6%95%88%E6%9E%9C%EF%BC%9A-1&quot; tabindex=&quot;-1&quot;&gt;效果：&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-16-listview-sticky-header-2.gif?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Macarse/50AH-code/tree/master/hack026&quot;&gt;源码地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E4%BB%A3%E7%A0%81%EF%BC%9A-1&quot; tabindex=&quot;-1&quot;&gt;代码：&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;[header.xml]&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TextView&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;android&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://schemas.android.com/apk/res/android&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@+id/header&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;@&lt;span class=&quot;token property&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;style/TextAppearance.Small&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fill_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wrap_content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;background&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@color/material_deep_teal_200&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;[activity_main.xml]&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;FrameLayout&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;android&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://schemas.android.com/apk/res/android&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fill_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fill_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ListView&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@android:id/list&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fill_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fill_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;include&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@layout/header&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;FrameLayout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;[list_item.xml]&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;LinearLayout&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;android&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://schemas.android.com/apk/res/android&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fill_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wrap_content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;orientation&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;vertical&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;include&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@layout/header&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TextView&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;@+id/label&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;@&lt;span class=&quot;token property&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;style/TextAppearance.Large&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fill_parent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;layout_height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wrap_content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;LinearLayout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;[MainActivity.java]&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ListActivity&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Bundle&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;widget&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AbsListView&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;widget&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ListActivity&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TextView&lt;/span&gt; topHeader&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; topVisiblePosition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Bundle&lt;/span&gt; savedInstanceState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;savedInstanceState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activity_main&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        topHeader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;header&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setListAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SectionAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Countries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;COUNTRIES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// Countries.COUNTRIES 是一个静态String数组&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;getListView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setOnScrollListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AbsListView&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OnScrollListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onScrollStateChanged&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AbsListView&lt;/span&gt; view&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                                                     &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; scrollState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token comment&quot;&gt;// Empty.&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AbsListView&lt;/span&gt; view&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; firstVisibleItem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                                         &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; visibleItemCount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; totalItemCount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstVisibleItem &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; topVisiblePosition&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                            topVisiblePosition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; firstVisibleItem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token function&quot;&gt;setTopHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstVisibleItem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;setTopHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTopHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; pos&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Countries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;COUNTRIES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        topHeader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;[SectionAdapter.java]&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Activity&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ViewGroup&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;widget&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ArrayAdapter&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token import&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;widget&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SectionAdapter&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayAdapter&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Activity&lt;/span&gt; activity&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SectionAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Activity&lt;/span&gt; activity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; objects&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;activity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;list_item&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;label&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; objects&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; activity&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt; view&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ViewGroup&lt;/span&gt; parent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;view &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            view &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; activity&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLayoutInflater&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;inflate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;list_item&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                    parent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;TextView&lt;/span&gt; header &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;header&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; label &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;position&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;position &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;position &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; label&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setVisibility&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;VISIBLE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;label&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setVisibility&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;GONE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;position&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; view&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; parent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;备注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;没有下一个分段标头把上一个顶出去的效果，而只能对置顶的分段标头setText。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;listview 从下面快速滑动到顶部后，会有回弹效果，造成分段标头瞬间变高（或出现两个分段标头）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lollipop #2 Material Design</title>
    <link href="https://2bab.me/zh/blog/2014-12-15-Lollipop-2-Material-Design-Resource/"/>
    <updated>2014-12-15T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2014-12-15-Lollipop-2-Material-Design-Resource/</id>
    <content type="html">&lt;p&gt;开发的各个流程会用到的 Material Design 资源整合。&lt;/p&gt;
&lt;h2 id=&quot;for-pm&quot; tabindex=&quot;-1&quot;&gt;For PM&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.yorgi.net/ux/free-android-l-widget-library-for-axure/&quot;&gt;Lollipop Widget Library for Axure RP&lt;/a&gt; ( &lt;a href=&quot;http://pan.baidu.com/s/1qWJRa5e&quot;&gt;下载&lt;/a&gt; )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-28.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wearebridge.co/ux-tools/Axure-MATERIAL-UI-Kit/home.html&quot;&gt;Material Design UI Kit for Axure RP&lt;/a&gt; ( 需付费 )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-29.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如果能从高保真原型开始那是极好的 ( 星星眼 )。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;for-designer&quot; tabindex=&quot;-1&quot;&gt;For Designer&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/design/spec/material-design/introduction.html#&quot;&gt;Material design 官方文档&lt;/a&gt; &lt;strong&gt;必看文档！！！不用多说，英文好的直接忽略下面中文版( 英文不好也要看看啊喂 )。注意看 Metrics &amp;amp; keylines 以及在倒数第二个章节 Resources 里有大量的官方设计参考资源可供下载。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-30.jpeg?imageslim&quot; alt=&quot;最重要的尺寸规范&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-31.jpeg?imageslim&quot; alt=&quot;请一定优先选择官方资源&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://design.1sters.com/&quot;&gt;Material design 官方文档中文版( 1 )&lt;/a&gt; 民间翻译，每个章节翻译的人都不一样，总体质量还可以。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-1.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ui.cn/Material/&quot;&gt;Material design 官方文档中文版( 2 )&lt;/a&gt; UI 中国的半民间翻译，排版比上一个强一点，原版动态视频的地方在这里都是GIF，看起来很舒服。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-1.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ui.cn/project.php?id=22315&quot;&gt;Material Design UI Kit for Illustrator&lt;/a&gt; 包含基本的界面元素和布局 AI 素材。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-2.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/material-design-icons&quot;&gt;material-design-icons&lt;/a&gt; Google提供的极为完整的各种图标（包含 iOS 各种精度及 SVG ）设计资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-3.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sketchappsources.com/free-source/633-material-design-android-sketch-freebie-resource.html&quot;&gt;Material Design Android .sketch &lt;/a&gt;  包含了 App Bars, Tabs, Status Bars, Navigation Bar, Navigation Drawers, Buttons, Grids, Lists, Switches 等等 UI 组件的 Sketch 资源包。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-4.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dribbble.com/shots/1652300-Android-L-Tablet-UI-Template-sketch&quot;&gt;Android L Tablet UI Template .sketch&lt;/a&gt; 包含了 12 个 Material Design 的平板模板。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-5.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dribbble.com/shots/1627499-Freebie-Android-L-Contats-UI&quot;&gt;Android L Contats UI .PSD&lt;/a&gt; Lollipop 联系人界面的 PSD 模板。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-6.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/thoughts-dng/19914396&quot;&gt;Android UI 设计工具 (Photoshop, Android 4.4, Nexus 4)&lt;/a&gt; NovaDNG 的作品。介绍如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;大概在十个月前, 我踏着 +Taylor Ling 走过的道路, 将他制作的 Android UI Design Kit 4.4 移植给 Nexus 4 使用. 一晃将近一年过去, Android 5.0 发布, Nexus 6 开始流行. 显然有很多人认为 Nexus 4 已经是落后的, 被遗忘的设备了.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;但是 Nexus 4 作为我最喜欢的 Nexus 设备, 我显然希望 Nexus 4 在手中能够继续焕发活力, 更何况 Google 也依然在给 Nexus 4 推送最新的 Android. 于是早些时候我许下了诺言, 答应不论如何一定会把这套工具更新到 Android 5.0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;等到 Material Design 终于发布正式版的时候, 就到了我兑现这个诺言的时候了. 十个月前我还可以直接从 Taylor 的 Nexus 5 Toolkit 里搬运控件到 Nexus 4 上, 但是 Taylor 还没有做 5.0 的 Toolkit. 所以这个版本里所有的控件都是我自己画的.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;于是就有了这么一套设计工具, 给和我一样怀旧的人.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-7.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dribbble.com/shots/1618777-Android-L-Icon-Grid-System&quot;&gt;Icon Grid .AI&lt;/a&gt; 图标的栅格模板，AI实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-8.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dribbble.com/shots/1634601-Android-Grid-Psd-Template-for-Android-L-icon&quot;&gt;Icon Grid .PSD&lt;/a&gt; 同上，PSD实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-9.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;for-developer&quot; tabindex=&quot;-1&quot;&gt;For Developer&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;for-fe&quot; tabindex=&quot;-1&quot;&gt;For FE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fezvrasta.github.io/bootstrap-material-design/&quot;&gt;bootstrap-material-design&lt;/a&gt; Bootstrap 的 Material Design 主题，在Github上获得了 6k+ Star。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-10.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/FezVrasta/bootstrap-material-design&quot;&gt;bootstrap-material-design for rails asset pipeline&lt;/a&gt; 上面那个主题的 Ruby Gem 包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://material.angularjs.org/&quot;&gt;AngularJS Material UI&lt;/a&gt; AngularJS 官方发布的 AngularJS Material UI。通过Directive更快地实现了Custom Element、易于开发的UI。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-11.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;for-android-compatibility&quot; tabindex=&quot;-1&quot;&gt;For Android Compatibility&lt;/h3&gt;
&lt;p&gt;整理这些库的过程中我看了其中一部分的源码，觉得既是一些有趣的库，也是很棒的学习材料。不过就在前两天，突然在一个群里发现了已经有人做了兼容库的整理，并且相当完整。所以就直接抛出整理地址了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lightSky/MaterialDesignCenter&quot;&gt;MaterialDesignCenter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-12.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这里基于其中一部分我用过或者了解过的做个总结。&lt;/p&gt;
&lt;h4 id=&quot;floating-action-button&quot; tabindex=&quot;-1&quot;&gt;Floating Action Button&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/futuresimple/android-floating-action-button&quot;&gt;android-floating-action-button&lt;/a&gt; FAB的库我只用过这个，多级菜单的特效在几个FAB里面做的最好，遗憾的是它没有与 ListView 等布局绑定的功能（即另外几个FAB库做的列表滑动时的自动隐藏特效）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-13.gif?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;menu-%26-drawer-%26-widget&quot; tabindex=&quot;-1&quot;&gt;Menu &amp;amp; Drawer &amp;amp; Widget&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;这里的库大部分是实现了 Drawer Indicator 的特效，因为 Android 官方提供的 Support 包里现已经包含了该特效，所以大可不必用它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-14.gif?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;下面有个 MenuAnimation 的库实现的动画没有 FAB 里的回弹效果，还是放弃了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AnderWeb/discreteSeekBar&quot;&gt;discreteSeekBar&lt;/a&gt; 这个拖动的进度条有一定想象空间，不过我还没用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-15.gif?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-16.gif?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;tricks&quot; tabindex=&quot;-1&quot;&gt;Tricks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MrEngineer13/SnackBar&quot;&gt;SnackBar&lt;/a&gt; 这个项目获得了近 600 Star (不是在 MaterialDesignCenter 里的那个)。在我尝试后发现，使用不当时会出现一些莫名奇妙的bug(和 RecyclerView 结合可能会出现永久占位而不显示内容的bug)。而 MaterialDesignCenter 收录的 Kennyc1012 的 SnackBar 似乎没什么人气，还未做尝试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-17.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-18.gif?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;ripple&quot; tabindex=&quot;-1&quot;&gt;Ripple&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/traex/RippleEffect&quot;&gt;RippleEffect&lt;/a&gt; 使用中总感觉这个 Ripple 点多了就卡，并且适用范围仅限于类按钮的控件。建议尝试一下另外几个效果绚丽的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-19.gif?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;transition-%26-vector&quot; tabindex=&quot;-1&quot;&gt;Transition &amp;amp; Vector&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/andkulikov/transitions-everywhere&quot;&gt;transitions-everywhere&lt;/a&gt; KitKat 和 Lollipop 的 Transition API 的低版本兼容包，可以用它发挥想象做出些有趣的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-20.gif?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;dialog&quot; tabindex=&quot;-1&quot;&gt;Dialog&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/drakeet/MaterialDialog&quot;&gt;MaterialDialog&lt;/a&gt; 国人写的一个库，在微博火过几天，可定制性强，用起来也不麻烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-21.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-22.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;reveal&quot; tabindex=&quot;-1&quot;&gt;Reveal&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ozodrukh/CircularReveal&quot;&gt;CircularReveal&lt;/a&gt; 和之前的 Ripple 异曲同工，可以搭配 CardView 等使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-23.gif?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;for-ios-compatibility&quot; tabindex=&quot;-1&quot;&gt;For iOS Compatibility&lt;/h3&gt;
&lt;p&gt;不要打我...虽然在 iOS 上实现 Android 的设计并不对。不过也要让大家体会一下有时候只有 iOS 设计稿的时候要 Android 适配的痛苦！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nghialv/MaterialKit&quot;&gt;MaterialKit&lt;/a&gt; 一套 Material Design 的 UI 组件库，作者已经施工了70%。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-24.gif?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/google/material-design-icons/tree/master/hardware&quot;&gt;material-design-icons / hardware - iOS &lt;/a&gt; 不要忘了在一开始提到谷歌的 icon 设计资料里藏有 iOS 的 1x 2x 3x 完整版图标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-25.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%8A%9B%E7%A0%96%E5%BC%95%E7%8E%89&quot; tabindex=&quot;-1&quot;&gt;抛砖引玉&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;嘛...嘛...其实粗略的看了这些设计规范，设计指南我还是没有悟到 Material 到底是什么 = =，这一点还需要多多努力。&lt;/p&gt;
&lt;p&gt;不过类似于 “控件间隔必须是 8dp 的倍数” 的基础尺寸规范，需要每个 Android 开发者、设计者都了解和遵守。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-26.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;而一些开源第三方库，使用之余研究一下源码会有不小的收获 ~&lt;/p&gt;
&lt;p&gt;最后推一个网站，以及一个有意思的人。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.phonekr.com/&quot;&gt;锋客网&lt;/a&gt; 及其核心成员 &lt;a href=&quot;http://weibo.com/geoffreyr&quot;&gt;@ NovaDNG&lt;/a&gt;，他也是&lt;a href=&quot;http://book.douban.com/subject/25873119/&quot;&gt;《Android App 视觉与体验设计指南》&lt;/a&gt;这本书的作者，国内 Android Design 较早的布道者，现就职知乎。贴两个关于他的评价帖 &lt;a href=&quot;http://www.zhihu.com/question/25957126&quot;&gt;《知乎上关于四次元微博客户端的很多提问、回答、甚至“四次元”的话题都被删了吗？》&lt;/a&gt;( 记得查看所有答案 ) , &lt;a href=&quot;http://www.zhihu.com/question/25912049&quot;&gt;《如何评价 NovaDNG 放出的知乎新版 Android 客户端的设计图？》&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-15-lollipop-material-design-27.jpeg?imageslim&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Android 里不能改变的东西 [译]</title>
    <link href="https://2bab.me/zh/blog/2014-12-11-Things-That-Cannnot-Change/"/>
    <updated>2014-12-11T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2014-12-11-Things-That-Cannnot-Change/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2011/06/things-that-cannot-change.html&quot;&gt;原文链接&lt;/a&gt; , 翻译 by 2BAB。&lt;/p&gt;
&lt;p&gt;[本文作者 Dianne Hackborn, 一位足迹遍布所有安卓应用框架的工程师 - Tim Bray]&lt;/p&gt;
&lt;p&gt;有时，一位开发者会对他的应用做一些改变(然后发布新版本)。当新版本的应用覆盖旧版的安装时，发生了一些意想不到的结果——快捷方式失效，桌面小部件(锁屏小部件)消失，甚至是应用根本无法覆盖安装。这是因为，一个应用里的某些部分在应用发布后就不可改变。通过深入理解它们，你可以避免这些“意外”。&lt;/p&gt;
&lt;h2 id=&quot;your-package-name-and-certificate-(-%E5%8C%85%E5%90%8D%E5%92%8C%E7%AD%BE%E5%90%8D-)&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Your package name and certificate ( 包名和签名 )&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;首先，最显而易见的是“manifest里的包名”，即你在app的AndoridManifest.xml里定义独特的包名。它遵循Java的包命名规则，使用你的个人(或公司)域名，避免命名冲突。举个例子，自从谷歌拥有了“&lt;a href=&quot;http://google.com/&quot;&gt;google.com&lt;/a&gt;”这个域名，谷歌的所有app就开始使用“&lt;a href=&quot;http://com.google.xxx/&quot;&gt;com.google.xxx&lt;/a&gt;”作为它的mainfest包名。对开发者来说，遵循这个命名规则极其重要，它有助于避免命名冲突。&lt;/p&gt;
&lt;p&gt;一旦你发布了你的应用，它manifest 里的包名就是你应用永远独一无二的身份证明。如果包名进行了变更，新的app将无法覆盖旧app(因为它被识别为一个全新的app)。&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;p&gt;和包名同样重要的还有app的签名。签名代表着app的作者，如果你改变一个app已经存在的签名，该app就会因为“作者”改变而被认为是与原来完全不同的app。这个新的app发布到市场时不能作为原来app的升级版本，同理也不能在一台Android设备上覆盖安装。&lt;/p&gt;
&lt;p&gt;当用户安装一个被上述两种改动之一改变过的app时，用户看到的实际情况是不一样的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若包名被更改，新app将会和旧app共存&lt;/li&gt;
&lt;li&gt;若签名被更改，试图安装新app时将会提示安装失败，除非你能删除该app的旧版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你改变了app的签名，你应该同时改变其包名，避免它安装失败。换句话说，app的不同作者使其识别为不同的应用，所以它的包名应进行合理地更改从而反应出这一情况。(当然，实验性的项目使用相同的包名以及测试签名是ok的，因为它们并不会被发布。)&lt;/p&gt;
&lt;h2 id=&quot;your-androidmanifest.xml-is-a-public-api-(-androidmanifest%E6%96%87%E4%BB%B6%E6%98%AF%E5%85%AC%E5%85%B1%E7%9A%84%E6%8E%A5%E5%8F%A3-)&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Your AndroidManifest.xml is a public API ( AndroidManifest文件是公共的接口 )&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;事实上不只是你的包名是不可变的。&lt;a href=&quot;http://developer.android.com/guide/topics/manifest/manifest-intro.html&quot;&gt;AndroidManifest.xml&lt;/a&gt; 的一个主要功能是声明app的public API，并提供给使用它的其他app和安卓系统。在Manifest里声明的每一个组件，都应被当做一个public API而不是private(即意味着它的 &lt;a href=&quot;http://developer.android.com/guide/topics/manifest/activity-element.html#exported&quot;&gt;android:exported&lt;/a&gt; 状态是ture，能被其他程序调用)。同时它们不应被改变，否则在某种程度上就是破坏兼容性。&lt;/p&gt;
&lt;p&gt;可能构成兼容性破坏的一个微小却重要的部分就是 &lt;a href=&quot;http://developer.android.com/guide/topics/manifest/activity-element.html#nm&quot;&gt;android:name&lt;/a&gt; 属性，一般存在于activity，service，receiver等组件。这可能会令人惊讶，因为我们总觉得 android:name 是指向我们实现app接口的私有属性( as pointing to the private code implementing our application )。但是它同样是这个组件的官方唯一public name ，作为 &lt;a href=&quot;http://developer.android.com/reference/android/content/ComponentName.html&quot;&gt;ComponenName&lt;/a&gt; 类的具现。&lt;/p&gt;
&lt;p&gt;改变app内部组件的命名将会对你的用户带来一些负面影响，如以下例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若app主 activity name 被改变，用户创建的快捷方式将无效。一个快捷方式就是直指它所要运行的组件名的Intent。&lt;/li&gt;
&lt;li&gt;若实现了 Live Wallpaper 的 service name 被改变，使用你的 Live Wallpaper 的用户的壁纸会恢复到系统默认壁纸。同理，一些Input Methods，Accessibility Services，Honeycomb的新Widgets 等也会失效。&lt;/li&gt;
&lt;li&gt;若实现了Device Admin的receiver name 被更改，同上的Live Wallpaper例子， device admin将会失效。这结果同样适用于其他receiver，比如app widget。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些动作(即那些被做出的改变)是Android如何运用 &lt;strong&gt;Intent&lt;/strong&gt; 系统的结果。有两种主要的Intent：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐式Intent：只指定他们应该匹配“什么”，做出什么行动，分类，数据，MIME的类型等等。而他们真正要寻找的组件只在运行时去找，针对当前的app通过Package Manager匹配。&lt;/li&gt;
&lt;li&gt;显式Intent：单一而明确指定它们通过组件名匹配“谁”。不管是什么东西在Intent，它只和“准确的清单包名”以及“组件名给予的类名”相关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种Intent类型在Android与你的app交互时都发挥了重要的的作用。一个典型的例子就是用户是如何浏览和选择动态壁纸。&lt;/p&gt;
&lt;p&gt;为了让用户能选择一张动态壁纸，Android要做的第一件事就是显示一个可用的动态壁纸服务列表给用户。它为动态壁纸创建一个隐式的Intent(包含一些适当的操作)，然后向Package Manager请求所有能支持该Intent的services。而结果就是live wallpaper的列表展现给了用户。&lt;/p&gt;
&lt;p&gt;当用户真的选择了他们想要用的动态壁纸，此时Android却需要创建一个显式的Intent用来标识这张特别的动态壁纸，这就能告诉壁纸管理器该显式那张壁纸。&lt;/p&gt;
&lt;p&gt;这就是为什么改变manifest组件名会导致壁纸消失的原因：因为组件名的引用已不存在，故预先存储的显式Intent现在也无效了。而我们没有任何可用信息预测新的组件名是什么(比如，假设你的app有两个不同的动态壁纸服务可供用户选择)。所以，Android必须把那些动态壁纸当做已被卸载了，而后回到默认的壁纸。&lt;/p&gt;
&lt;p&gt;这就是input methods, device administrators, account managers, app widgets, 以及application shortcuts 如何工作的原理。所以组件名是你在manifest里声明的公共且唯一的名字，并且在对其他app可见的情况下他们不允许更改。&lt;/p&gt;
&lt;p&gt;总结：你的App里有些部分是不可更改的，请务必小心。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lollipop #1 Android 5.0 APIs Guide</title>
    <link href="https://2bab.me/zh/blog/2014-12-11-Lollipop-1-Android-5-0-APIs-Guide/"/>
    <updated>2014-12-11T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2014-12-11-Lollipop-1-Android-5-0-APIs-Guide/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/about/versions/android-5.0.html&quot;&gt;原文链接&lt;/a&gt; , 翻译 by 2BAB。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;API Level: 21&lt;/p&gt;
&lt;p&gt;Android 5.0 ( &lt;a href=&quot;https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#LOLLIPOP&quot;&gt;LOLLIPOP&lt;/a&gt; ) 的到来，给用户和开发者提供了许多新的特性。这篇文档将会把最值得关注的新 API 做一个介绍。&lt;/p&gt;
&lt;h3 id=&quot;start-developing&quot; tabindex=&quot;-1&quot;&gt;Start developing&lt;/h3&gt;
&lt;p&gt;要构建 Android 5.0 的应用，首先得下载 &lt;a href=&quot;https://developer.android.com/sdk/index.html&quot;&gt;Android SDK&lt;/a&gt;，然后通过SDK Manager下载 Android 5.0 SDK Platform 和 System Images。&lt;/p&gt;
&lt;p&gt;为了在真机上测试应用，请将你手头的 Nexus 5 或者 Nexus 7 刷成 &lt;a href=&quot;https://developer.android.com/preview/index.html#Start&quot;&gt;预览版固件&lt;/a&gt;( 现大部分 Nexus 设备已经支持正式版5.0，固件见此 - 译者注 ) 。&lt;/p&gt;
&lt;h3 id=&quot;update-your-target-api-level&quot; tabindex=&quot;-1&quot;&gt;Update your target API Level&lt;/h3&gt;
&lt;p&gt;为了在运行 Android 5.0 的设备上优化你的应用，请先将 &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#target&quot;&gt;targetSdkVersion&lt;/a&gt; 设为“21”，并在 Android 5.0 环境下进行测试，然后才是发布这个升级版应用。&lt;/p&gt;
&lt;p&gt;你可以使用 Android 5.0 的 API 但也同时兼容老版本，具体来说就是在代码中添加条件判断——在使用不兼容你的 &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#min&quot;&gt;minSdkVersion&lt;/a&gt; 的API前，检查你的system API level。关于维持应用向后兼容的更多信息，请看 &lt;a href=&quot;https://developer.android.com/training/basics/supporting-devices/platforms.html&quot;&gt;Support Different Platform Versions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;更多关于 API level 工作原理的信息，请看 &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels&quot;&gt;What is API Level?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;important-behavior-changes&quot; tabindex=&quot;-1&quot;&gt;Important Behavior Changes&lt;/h2&gt;
&lt;p&gt;如果你在之前发布过 Android 应用，请注意它可能会被 Android 5.0 的改变所影响。&lt;/p&gt;
&lt;h3 id=&quot;if-you-haven&#39;t-tested-your-app-against-the-new-android-runtime-(art)...&quot; tabindex=&quot;-1&quot;&gt;If you haven&#39;t tested your app against the new Android Runtime (ART)...&lt;/h3&gt;
&lt;p&gt;在4.4发布时我们引入了一个全新的、实验性的 Android runtime，名为ART。但是在4.4时，ART只是一个可选项，而默认的 runtime 依旧是Dalvik。随着 Android 5.0 的发布，ART成为了默认的 runtime。&lt;/p&gt;
&lt;p&gt;关于ART的新特性概览，请看 &lt;a href=&quot;https://source.android.com/devices/tech/dalvik/art.html&quot;&gt;Introducing ART&lt;/a&gt; 。主要的新特性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预编译 (AOT)&lt;/li&gt;
&lt;li&gt;更先进的垃圾回收 (GC)&lt;/li&gt;
&lt;li&gt;更先进的调试支持 (debugging support)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数的 Android 应用不需要任何适配就能在ART下正常运行。然而，有些在Dalvik下使用的技术在ART下却无法工作。关于这个重要问题的更多信息，请看 &lt;a href=&quot;https://developer.android.com/guide/practices/verifying-apps-art.html&quot;&gt;Verifying App Behavior on the Android Runtime&lt;/a&gt;。特别注意，如果你的应用编写有如下行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用了 JNI( Java Native Interface ) 来运行 C / C++ 代码。&lt;/li&gt;
&lt;li&gt;使用了开发工具生成一些非标准的代码，例如某些混淆器（obfuscators）&lt;/li&gt;
&lt;li&gt;使用了某些和压缩垃圾回收法 (compacting garbage collection) 不兼容的技术 ( 因为 ART 目前没有实现compacting GC，不过compacting GC 在Android Open Source Project中已处于开发状态 )&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;if-your-app-implements-notifications...&quot; tabindex=&quot;-1&quot;&gt;If your app implements notifications...&lt;/h3&gt;
&lt;p&gt;请确保你的 notifications 考虑了 Android 5.0 的相关改动。关于设计 Android 5.0 或更高版本的 notification，你可以在&lt;a href=&quot;https://developer.android.com/design/patterns/notifications.html&quot;&gt;这里 ( notifications design guide )&lt;/a&gt; 学习到更多。&lt;/p&gt;
&lt;h4 id=&quot;material-design-style&quot; tabindex=&quot;-1&quot;&gt;Material design style&lt;/h4&gt;
&lt;p&gt;Notification ( 在5.0下的 ) 显示效果为：在白色 ( 或其他亮色 ) 背景上配上黑色文字，十分切合 material design 风格。请确保你所有的 notification 符合新的配色方案，即它看起来不错 ( 和 5.0 够搭 )。如果你的notification看起来有问题，那么请按照如下方式解决：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 setColor( ) 在 icon 后面的圆里设置一个强调性的颜色。&lt;/li&gt;
&lt;li&gt;更新或者删除那些会影响配色的资源。因为系统会忽略 action icons 和 main notification icon 里的所有所有非透明的通道，所以你应该假定这些 icon 只能是透明的。系统会将 notification icons 绘制在白色背景上，将 action icons 绘制在深灰色背景上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sound-and-vibration&quot; tabindex=&quot;-1&quot;&gt;Sound and vibration&lt;/h3&gt;
&lt;p&gt;如果你已经使用 &lt;a href=&quot;https://developer.android.com/reference/android/media/Ringtone.html&quot;&gt;Ringtone&lt;/a&gt;, &lt;a href=&quot;https://developer.android.com/reference/android/media/MediaPlayer.html&quot;&gt;MediaPlayer&lt;/a&gt;, &lt;a href=&quot;https://developer.android.com/reference/android/os/Vibrator.html&quot;&gt;Vibrator&lt;/a&gt;等为你的 notification 添加了声音、震动，请移除这些代码——以便系统能以 priority 模式正确地展示 notification。取而代之的是，使用 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html&quot;&gt;Notification.Builder&lt;/a&gt; 方法来添加声音和震动。&lt;/p&gt;
&lt;p&gt;当你把设备设置为 RINGER_MODE_SILENT ( 静音模式 )，会触发设备进入一个全新的 priority 模式。而当你将设备设置为 RINGER_MODE_NORMAL  (普通模式) 或者 RINGER_MODE_VIBRATE (震动模式) 时，设备将会关闭priority 模式。&lt;/p&gt;
&lt;p&gt;在 Android 5.0 之前，Android 使用 STREAM_MUSIC 作为控制平板声音的主要控制流(master stream)。在 Android 5.0，我们使用STREAM_RING 和 STREAM_NOTIFICATION 作为控制流，手机和平板的声音控制得到了统一。&lt;/p&gt;
&lt;h3 id=&quot;lock-screen-visibility&quot; tabindex=&quot;-1&quot;&gt;Lock screen visibility&lt;/h3&gt;
&lt;p&gt;默认情况下，Android 5.0 的 notification 会在用户的锁屏界面展示。用户可以选择保护敏感的信息不暴露在锁屏上，在这种情况下系统会自动编写提醒文字进行展示，你可以使用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html#setPublicVersion(android.app.Notification)&quot;&gt;https://developer.android.com/reference/android/app/Notification.Builder.html#setPublicVersion(android.app.Notification)&lt;/a&gt;&amp;quot;&amp;gt;setPublicVersion( )&amp;lt;/a&amp;gt; 自定义文字提醒。&lt;/p&gt;
&lt;p&gt;如果你的 notification 不包含个人信息，或者你想将多媒体控制保留在notification，请调用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html#setVisibility(int)&quot;&gt;https://developer.android.com/reference/android/app/Notification.Builder.html#setVisibility(int)&lt;/a&gt;&amp;quot;&amp;gt;setVisibility( )&amp;lt;/a&amp;gt; 方法并且将visibility Level 设置为 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PUBLIC&quot;&gt;VISIBILITY_PUBLIC&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;media-playback&quot; tabindex=&quot;-1&quot;&gt;Media playback&lt;/h3&gt;
&lt;p&gt;如果你将 notification 用来实现多媒体的状态展示或者播放控制栏，请考虑将自定义的 &lt;a href=&quot;https://developer.android.com/reference/android/widget/RemoteViews.RemoteView.html&quot;&gt;RemoteViews.RemoteView&lt;/a&gt; 对象替换成新的  &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.MediaStyle.html&quot;&gt;Notification.MediaStyle&lt;/a&gt; 模板。无论你选择了那种方案，请确保设置 notification 的 visibility 属性为 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PUBLIC&quot;&gt;VISIBILITY_PUBLIC&lt;/a&gt;，才能使其在锁屏界面展示。请注意，从 Android 5.0 开始，系统将不再于锁屏界面显示 &lt;a href=&quot;https://developer.android.com/reference/android/media/RemoteControlClient.html&quot;&gt;RemoteControlClient&lt;/a&gt; 对象，更多相关信息请看 &lt;a href=&quot;https://developer.android.com/about/versions/android-5.0.html#BehaviorMediaControl&quot;&gt;If your app uses RemoteControlClient&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;heads-up-notification&quot; tabindex=&quot;-1&quot;&gt;Heads-up notification&lt;/h3&gt;
&lt;p&gt;在设备处于活动状态时 ( 换句话说就是已解锁并且屏幕亮着 )，Notification 会显示为一个小型浮动窗口 ( 通常我们也叫它 heads-up notification ) 。这些 notification 看起来很像一个个紧凑的表单 ( 除了他们还显示 action button 这点 )，用户可以在不离开当前 app 的情况下操作 heads-up notification 或者让其消失。&lt;/p&gt;
&lt;p&gt;下面举一些会触发 heads-up notifications 的情况，包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户当前的 activity 处于 fullsrceen mode （ 该 app 使用了 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.html#fullScreenIntent&quot;&gt;fullScreenIntent&lt;/a&gt; ）&lt;/li&gt;
&lt;li&gt;该 notification 拥有较高的权限以及使用了铃声或者震动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你的 app 以上述任意一种方案实现了 notification，请确保 heads-up notification 会正确地显示。&lt;/p&gt;
&lt;h3 id=&quot;if-your-app-uses-remotecontrolclient...&quot; tabindex=&quot;-1&quot;&gt;If your app uses RemoteControlClient...&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/media/RemoteControlClient.html&quot;&gt;RemoteControlClient&lt;/a&gt; 类现已被弃用，请尽快切换到新的 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaSession.html&quot;&gt;MediaSession&lt;/a&gt; 接口。&lt;/p&gt;
&lt;p&gt;在 Android 5.0 中锁屏不会显示由 MediaSession 或 RemoteControlClient 生成的播放控制，取而代之的是你通过 notification 在锁屏上提供媒体播放。带来的好处是，通过显示媒体按钮给了你的 app 更多的控制权，同时提供给用户一个在锁屏和解锁状态下持续不变的用户体验。&lt;/p&gt;
&lt;p&gt;Android 5.0 引入一个新的 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.MediaStyle.html&quot;&gt;Notification.MediaStyle&lt;/a&gt; 模板就是为了达到上述的目的。&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.MediaStyle.html&quot;&gt;Notification.MediaStyle&lt;/a&gt; 将 notification 的动作( 使用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html#addAction&quot;&gt;https://developer.android.com/reference/android/app/Notification.Builder.html#addAction&lt;/a&gt;(int, java.lang.CharSequence, android.app.PendingIntent)&amp;quot;&amp;gt;Notification.Builder.addAction( )&amp;lt;/a&amp;gt; 添加的紧凑的按钮 )并入你的媒体播放 notification 中。你需要传入你的 session token 到 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.MediaStyle.html#setMediaSession(android.media.session.MediaSession.Token)&quot;&gt;https://developer.android.com/reference/android/app/Notification.MediaStyle.html#setMediaSession(android.media.session.MediaSession.Token)&lt;/a&gt;&amp;quot;&amp;gt;setSession( )&amp;lt;/a&amp;gt; 方法中，以此通知系统这个 notification 控制着一个持续的播放会话 ( ongoing media session )。&lt;/p&gt;
&lt;p&gt;请确保设置了 notification 的可见属性 ( visibility ) 为 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PUBLIC&quot;&gt; VISIBILITY_PUBLIC &lt;/a&gt; ，以此标志 notification 可以安全的显示在任何锁屏 (在安全锁屏或者其他锁屏)。想了解更多，请看&lt;a href=&quot;https://developer.android.com/about/versions/android-5.0.html#LockscreenNotifications&quot;&gt; Lock screen notifications &lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你的 app 运行在 Android TV 或者 Wear 平台，你需要实现  MediaSession 类才能显示媒体播放控制。当然，如果你的 app 需要接收多媒体控制按钮的事件 ( 任意Android设备上 )，你同样要实现 MediaSession。&lt;/p&gt;
&lt;h3 id=&quot;if-your-app-uses-getrecenttasks()...&quot; tabindex=&quot;-1&quot;&gt;If your app uses getRecentTasks()...&lt;/h3&gt;
&lt;p&gt;随着一个新的 concurrent documents and activities tasks 特性的引入 ( 资料请看 &lt;a href=&quot;https://developer.android.com/about/versions/android-5.0.html#Recents&quot;&gt; Concurrent documents and activities in the recents screen&lt;/a&gt;)，&amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/ActivityManager.html#getRecentTasks&quot;&gt;https://developer.android.com/reference/android/app/ActivityManager.html#getRecentTasks&lt;/a&gt;(int, int)&amp;quot;&amp;gt;ActivityManager.getRecentTasks( )&amp;lt;/a&amp;gt; 方法现已被弃用，为的是更好地保护用户的隐私。当然，为了向下兼容，这个方法仍然会返回原本数据中的一小部分，包括唤醒 application 本身的 task 以及可能不敏感的其他 task ( 比如桌面 )。如果你的 app 正在使用这个方法取回自己的 task， 请替换成 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/ActivityManager.html#getAppTasks()&quot;&gt;https://developer.android.com/reference/android/app/ActivityManager.html#getAppTasks()&lt;/a&gt;&amp;quot;&amp;gt;getAppTasks( )&amp;lt;/a&amp;gt; 方法。&lt;/p&gt;
&lt;h3 id=&quot;if-you-are-using-the-android-native-development-kit-(ndk)...&quot; tabindex=&quot;-1&quot;&gt;If you are using the Android Native Development Kit (NDK)...&lt;/h3&gt;
&lt;p&gt;Android 5.0 引入了64位系统的支持。首先，64位系统增加了寻址空间，提高了性能，同时还完全兼容32位的 app。其次，64位的引入改善了OpenSSL的加密。最后，这次升级还带来了全新的原生多媒体 NDK API，以及OpenGL ES (GLES) 3.1 的支持。&lt;/p&gt;
&lt;p&gt;如果要使用 Android 5.0 的这些64位特性，请到 &lt;a href=&quot;https://developer.android.com/tools/sdk/ndk/index.html&quot;&gt;Android NDK page&lt;/a&gt; 下载并安装 NDK 修正版 10c。&lt;/p&gt;
&lt;h3 id=&quot;if-your-app-binds-to-a-service&quot; tabindex=&quot;-1&quot;&gt;If your app binds to a Service&lt;/h3&gt;
&lt;p&gt;&amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/content/Context.html#bindService&quot;&gt;https://developer.android.com/reference/android/content/Context.html#bindService&lt;/a&gt;(android.content.Intent, android.content.ServiceConnection, int)&amp;quot;&amp;gt;Context.bindService( )&amp;lt;/a&amp;gt; 方法现在要求添加一个显式的 &lt;a href=&quot;https://developer.android.com/reference/android/content/Intent.html&quot;&gt;Intent&lt;/a&gt;，如果添加的是隐式 intent 就会抛出错误。为了确保 app 的安全，在绑定 &lt;a href=&quot;https://developer.android.com/reference/android/app/Service.html&quot;&gt;Service&lt;/a&gt; 时请务必使用显式 intent，并且不要给 service 声明 intent filters。&lt;/p&gt;
&lt;h2 id=&quot;user-interface&quot; tabindex=&quot;-1&quot;&gt;User Interface&lt;/h2&gt;
&lt;h3 id=&quot;material-design-support&quot; tabindex=&quot;-1&quot;&gt;Material design support&lt;/h3&gt;
&lt;p&gt;即将到来新版中添加了全新的 material design style。你可以使用material design 创建 app，它会使你的 app 看起来极具动感，充满 UI 元素的过渡变换，其中包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Material 主题&lt;/li&gt;
&lt;li&gt;View 阴影&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html&quot;&gt;RecyclerView&lt;/a&gt; 部件&lt;/li&gt;
&lt;li&gt;Drawable animation 和 Styling effects&lt;/li&gt;
&lt;li&gt;Material design 动画 和 activity 过渡动画&lt;/li&gt;
&lt;li&gt;View 属性的动画基于 view 的状态&lt;/li&gt;
&lt;li&gt;可定制的 UI 部件 以及 可控制颜色调配的 app bars&lt;/li&gt;
&lt;li&gt;动态和非动态的 drawables 可基于 XML 矢量图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想了解更多关于 “添加 material design 特性到你的 app中”，请看 &lt;a href=&quot;https://developer.android.com/training/material/index.html&quot;&gt;Material Design&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;concurrent-documents-and-activities-in-the-recents-screen&quot; tabindex=&quot;-1&quot;&gt;Concurrent documents and activities in the recents screen&lt;/h3&gt;
&lt;p&gt;在之前的版本中，&lt;a href=&quot;https://developer.android.com/guide/components/recents.html&quot;&gt;多任务栏( recents screen )&lt;/a&gt; 里每个app只能显示用户最后使用的一个task ( 界面截图 )。而现在，如果你需要多个并发的activity来显示文档，你的 app 就能同时打开多个任务（显示在多任务界面）。与所有app之间切换的体验一样，从多任务中切换的特性，能加快用户切换独立 activity 和文档的速度。更多并发任务的举例：打开多个 tab 的浏览器，打开多个文档的办公&amp;amp;生产 app，打开多个比赛的游戏，打开多个聊天窗口的 SMS。你的 app 可以使用 &lt;a href=&quot;https://developer.android.com/reference/android/app/ActivityManager.AppTask.html&quot;&gt;ActivityManeger.AppTask&lt;/a&gt; 来管理它的 task。&lt;/p&gt;
&lt;p&gt;为了使系统能把你的 activity 当做新的 task，在使用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)&quot;&gt;https://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)&lt;/a&gt;&amp;quot;&amp;gt;startActivity( )&amp;lt;/a&amp;gt; 启动 activity 的是时候，请加上 &lt;a href=&quot;https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_DOCUMENT&quot;&gt;FLAG_ACTIVITY_NEW_DOCUMENT&lt;/a&gt;参数，以此来添加一个逻辑上的划分( logical break )。通过设置 manifest 的&lt;a href=&quot;https://developer.android.com/guide/topics/manifest/activity-element.html&quot;&gt;&amp;lt;activity&amp;gt;&lt;/a&gt;标签的&amp;quot;documentLaunchMode&amp;quot;属性为&amp;quot;intoExisting&amp;quot;或者&amp;quot;always&amp;quot;，也可以达到这个目的。&lt;/p&gt;
&lt;p&gt;为了避免把多任务界面搅浑，你可以设置你的app最大可显示的task数量。具体来说，设置 &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/application-element.html&quot;&gt;&amp;lt;application&amp;gt;&lt;/a&gt; 标签的 &lt;a href=&quot;https://developer.android.com/reference/android/R.attr.html#maxRecents&quot;&gt;android:maxRecents&lt;/a&gt; 属性。目前可指定的最大标签数量为每个用户50个( 在低内存的设备上为25个 )。&lt;/p&gt;
&lt;p&gt;多任务界面里的 task 现在可以设置为重启也保留，通过设置 &lt;a href=&quot;https://developer.android.com/reference/android/R.attr.html#persistableMode&quot;&gt;android:persistableMode&lt;/a&gt; 属性来控制这一行为。此外，task的视觉属性现在也可以自定义，例如 activity 的颜色，标签，图标等，通过调用 setTaskDescription( )。&lt;/p&gt;
&lt;h3 id=&quot;webview-updates&quot; tabindex=&quot;-1&quot;&gt;WebView updates&lt;/h3&gt;
&lt;p&gt;Android 5.0 升级了 &lt;a href=&quot;https://developer.android.com/reference/android/webkit/WebView.html&quot;&gt;WebView&lt;/a&gt; ，目前基于Chromium M37，带来了安全性和稳定性的提升，同时修复了诸多bug。此外 WebView 的UA 已经升级到合并版的37.0.0.0  ( The default user-agent string for a WebView running on Android 5.0 has been updated to incorporate 37.0.0.0 as the version number )。&lt;/p&gt;
&lt;p&gt;Android 5.0 引入了 &lt;a href=&quot;https://developer.android.com/reference/android/webkit/PermissionRequest.html&quot;&gt;PermissionRequest&lt;/a&gt; ，允许你的 app 授权 WebView 进入被保护资源的权限( 比如相机和麦克风，通过调用诸如 &lt;a href=&quot;https://2bab.me/zh/blog/2014-12-11-Lollipop-1-Android-5-0-APIs-Guide/&quot;&gt;getUserMedia( )&lt;/a&gt; 的web API实现 )。请合理地分配上述的资源使用权限给 WebView。&lt;/p&gt;
&lt;p&gt;通过调用新的 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowFileChooser&quot;&gt;https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowFileChooser&lt;/a&gt;(android.webkit.WebView, android.webkit.ValueCallback&amp;lt;android.net.Uri[]&amp;gt; , android.webkit.WebChromeClient.FileChooserParams)&amp;quot;&amp;gt;onShowFileChooser( )&amp;lt;/a&amp;gt; 方法，你还可以在WebView中使用表单输入，并且可以打开文件选择器进行本地图片和文件的选择。&lt;/p&gt;
&lt;p&gt;此外，此次升级还带来了WebAudio，WebGL，WebRTC标准的支持。想了解更多新特性，请看 &lt;a href=&quot;https://developer.chrome.com/multidevice/webview/overview&quot;&gt;WebView for Android&lt;/a&gt; 。&lt;/p&gt;
&lt;h3 id=&quot;screen-capturing-and-sharing&quot; tabindex=&quot;-1&quot;&gt;Screen capturing and sharing&lt;/h3&gt;
&lt;p&gt;Android 5.0 提供了调用截屏和屏幕共享的新API &lt;a href=&quot;https://developer.android.com/reference/android/media/projection/package-summary.html&quot;&gt;android.media.projection&lt;/a&gt;。这是一个相当有用的功能，举个例子，比如你想在视频会议中共享屏幕就可以轻松实现。&lt;/p&gt;
&lt;p&gt;新的 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/media/projection/MediaProjection.html#createVirtualDisplay&quot;&gt;https://developer.android.com/reference/android/media/projection/MediaProjection.html#createVirtualDisplay&lt;/a&gt;(java.lang.String, int, int, int, int, android.view.Surface, android.hardware.display.VirtualDisplay.Callback, android.os.Handler)&amp;quot;&amp;gt;createVirtualDisplay( )&amp;lt;/a&amp;gt; 方法允许你的 app 捕捉主屏幕的内容装载到一个 &lt;a href=&quot;https://developer.android.com/reference/android/view/Surface.html&quot;&gt;Surface&lt;/a&gt; 对象，这意味着你可以在稍后通过网络发送它。该API只允许捕捉没有安全限制的屏幕内容，以及非系统的声音。想要开启屏幕捕捉，你需要调用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/media/projection/MediaProjectionManager.html#createScreenCaptureIntent()&quot;&gt;https://developer.android.com/reference/android/media/projection/MediaProjectionManager.html#createScreenCaptureIntent()&lt;/a&gt;&amp;quot;&amp;gt;createScreenCaptureIntent( )&amp;lt;/a&amp;gt; 方法获取一个 &lt;a href=&quot;https://developer.android.com/reference/android/content/Intent.html&quot;&gt;Intent&lt;/a&gt;，然后使用该 Intent 弹出一个允许屏幕捕捉dialog来获得用户的权限。&lt;/p&gt;
&lt;p&gt;关于如何使用这些新的API，请参考 ApiDemos project 中的 MediaProjectionDemo 类。&lt;/p&gt;
&lt;h2 id=&quot;notifications&quot; tabindex=&quot;-1&quot;&gt;notifications&lt;/h2&gt;
&lt;h3 id=&quot;lock-screen-notifications&quot; tabindex=&quot;-1&quot;&gt;Lock screen notifications&lt;/h3&gt;
&lt;p&gt;在 Android 5.0 中，锁屏界面允许展示 notification。用户可以通过“系统设置”选择是否允许敏感的 notification 显示在安全的锁屏上。&lt;/p&gt;
&lt;p&gt;你的 app 可以控制它的 notification 在安全锁屏界面上具体显示的内容等级。具体操作上，调用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html#setVisibility(int)&quot;&gt;https://developer.android.com/reference/android/app/Notification.Builder.html#setVisibility(int)&lt;/a&gt;&amp;quot;&amp;gt;setVisibility( )&amp;lt;/a&amp;gt; 方法并且指定它的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PRIVATE&quot;&gt;VISIBILITY_PRIVATE&lt;/a&gt;：显示基础信息，包括 notification 的 icon，但是隐藏 notification 的所有内容。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PUBLIC&quot;&gt;VISIBILITY_PUBLIC&lt;/a&gt;：显示 notification 的所有信息&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_SECRET&quot;&gt;VISIBILITY_SECRET&lt;/a&gt;：不显示任何东西，包括 icon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当显示等级为 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PRIVATE&quot;&gt;VISIBILITY_PRIVATE&lt;/a&gt; 时，你还可以提供一个编写好的 notification 内容模板进行显示，而隐藏掉个人的详细信息。举个例子，一个SMS app 可能会显示一条内容为&amp;quot;你有三条新消息&amp;quot; 的 notification ，而隐藏掉信息的内容和发件人。想要提供这样的可替换 notification，首先你需要调用 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html&quot;&gt;Notification.Builder&lt;/a&gt; 新建一个替补的 notification，当你在创建 private notification 对象时，调用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html#setPublicVersion(android.app.Notification)&quot;&gt;https://developer.android.com/reference/android/app/Notification.Builder.html#setPublicVersion(android.app.Notification)&lt;/a&gt;&amp;quot;&amp;gt;setPublicVersion( )&amp;lt;/a&amp;gt; 方法将替补的 notification 绑定上去。&lt;/p&gt;
&lt;h3 id=&quot;notification-metadata&quot; tabindex=&quot;-1&quot;&gt;Notification metadata&lt;/h3&gt;
&lt;p&gt;Android 5.0 使用 metadata 与 app 的 notification 进行关联，这使得 notification 的排序更加智能。当你构建 notification 时，可以调用 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html&quot;&gt;Notification.Builder&lt;/a&gt; 方法来设置 metadata ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html#setCategory(java.lang.String)&quot;&gt;https://developer.android.com/reference/android/app/Notification.Builder.html#setCategory(java.lang.String)&lt;/a&gt;&amp;quot;&amp;gt;setCategory( )&amp;lt;/a&amp;gt;：在设备处于 priority 模式时，告诉系统如何处理你的 app 的 notification ( 例如，一条 notification 展示的是来电，简讯，或者闹钟 )&lt;/li&gt;
&lt;li&gt;&amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html#setPriority(int)&quot;&gt;https://developer.android.com/reference/android/app/Notification.Builder.html#setPriority(int)&lt;/a&gt;&amp;quot;&amp;gt;setPriority( )&amp;lt;/a&amp;gt;：标志一条 notification 比普通 notification 重要或不重要。一条设置 priority 属性为 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.html#PRIORITY_MAX&quot;&gt;PRIORITY_MAX&lt;/a&gt; 或者 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.html#PRIORITY_HIGH&quot;&gt;PRIORITY_HIGH&lt;/a&gt; 的 notification 如果还带有声音或者震动，就会显示为一个小型浮动窗口。&lt;/li&gt;
&lt;li&gt;&amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.Builder.html#addPerson(java.lang.String)&quot;&gt;https://developer.android.com/reference/android/app/Notification.Builder.html#addPerson(java.lang.String)&lt;/a&gt;&amp;quot;&amp;gt;addPerson( )&amp;lt;/a&amp;gt;：你可以添加一个或多个联系人与 notification 进行关联。系统会根据这个标志决定把特殊联系人的 notification 集中起来，或者把重要联系人的 notification 排在前头。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;graphics&quot; tabindex=&quot;-1&quot;&gt;Graphics&lt;/h2&gt;
&lt;h3 id=&quot;support-for-opengl-es-3.1&quot; tabindex=&quot;-1&quot;&gt;Support for OpenGL ES 3.1&lt;/h3&gt;
&lt;p&gt;Android 5.0 添加了 OpenGL ES 3.1 的 Java 接口和原生支持。OpenGL ES 3.1 提供的主要新功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算着色器 ( Compute shaders )&lt;/li&gt;
&lt;li&gt;分离阴影对象 (Separate shader objects)&lt;/li&gt;
&lt;li&gt;间接呼叫指令 (Indirect draw commands )&lt;/li&gt;
&lt;li&gt;多重采样和模板纹理 ( Multisample and stencil textures )&lt;/li&gt;
&lt;li&gt;着色语言改进 ( Shading language improvements )&lt;/li&gt;
&lt;li&gt;丰富的扩展，包括高级混合模式，和更好的 debug ( Extensions for advanced blend modes and debugging )&lt;/li&gt;
&lt;li&gt;向下兼容 OpenGL ES 2.0/3.0 ( Backward compatibility with OpenGL ES 2.0 and 3.0 )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Android 5.0 中，&lt;a href=&quot;https://developer.android.com/reference/android/opengl/GLES31.html&quot;&gt;GLES31&lt;/a&gt; 类提供了 OpenGL ES 3.1 的 Java 接口。在使用OpenGL ES 3.1 时，请确认你在你的 manifest 中使用 &lt;a href=&quot;https://developer.android.com/guide/topics/manifest/uses-feature-element.html&quot;&gt;&amp;lt;uses-feature&amp;gt;&lt;/a&gt; 标签 和 android:glEsVersion 属性对它进行声明&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;manifest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;uses-feature&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;glEsVersion&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0x00030001&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    ...&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;manifest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关于“使用 OpenGL ES”的更多信息，包括如何在运行时动态监测设备对 OpenGL ES 版本的支持，请看 &lt;a href=&quot;https://developer.android.com/guide/topics/graphics/opengl.html&quot;&gt;OpenGL ES API guide&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;android-extension-pack&quot; tabindex=&quot;-1&quot;&gt;Android Extension Pack&lt;/h3&gt;
&lt;p&gt;作为 OpenGL ES 3.1 的补充，针对高级的图像功能，Android 5.0 提供了一个 java 接口和本地支持的扩展包。这些扩展被当做一个 Android 提供的独立包存在。( 如果 ANDROID_extension_pack_es3la 扩展包已经存在，那么你的 app 可以声明包里所有已经存在的扩展，并且可以使用简单的  #extension 声明实现着色语言特性 )&lt;/p&gt;
&lt;p&gt;这些扩展包支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对着色缓存器，图片，粒子等片段着色支持的保证 ( 片段着色支持在OpenGL ES 3.1 中为可选项 )( Guaranteed fragment shader support for shader storage buffers, images, and atomics (Fragment shader support is optional in OpenGL ES 3.1.))&lt;/li&gt;
&lt;li&gt;平面填充(密铺)和几何着色 (Tessellation and geometry shaders
)&lt;/li&gt;
&lt;li&gt;自适应可伸缩纹理压缩格式（ ASTC (LDR) texture compression format ）&lt;/li&gt;
&lt;li&gt;单样本插入与着色 ( Per-sample interpolation and shading )&lt;/li&gt;
&lt;li&gt;帧缓存上每个颜色附加的不同混合模式 ( Different blend modes for each color attachment in a frame buffer )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GLES3lExt 是扩展包提供的 Java 接口。在你的 manifest 中，可以声明你的 app 必须安装再支持扩展包的设备上。如下：&lt;/p&gt;
&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;manifest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;uses-feature&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;android.hardware.opengles.aep&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;android:&lt;/span&gt;required&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;manifest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;media&quot; tabindex=&quot;-1&quot;&gt;Media&lt;/h2&gt;
&lt;h3 id=&quot;camera-api-for-advanced-camera-capabilities&quot; tabindex=&quot;-1&quot;&gt;Camera API for advanced camera capabilities&lt;/h3&gt;
&lt;p&gt;Android 5.0 引入了新的 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/package-summary.html&quot;&gt;android.hardware.camera2&lt;/a&gt; 的API，使拍摄精细的照片以及图像的处理都变得容易。现在开发者们可以通过系统提供的接口从软件层面接入相机设备，具体来说，先调用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#getCameraIdList()&quot;&gt;https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#getCameraIdList()&lt;/a&gt;&amp;quot;&amp;gt;getCameraIdList( )&amp;lt;/a&amp;gt; 获取可用的相机设备，然后选取具体的一个设备调用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#openCamera&quot;&gt;https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#openCamera&lt;/a&gt;(java.lang.String, android.hardware.camera2.CameraDevice.StateCallback, android.os.Handler)&amp;quot;&amp;gt;openCamera( )&amp;lt;/a&amp;gt; 方法进行连接。要拍摄一张照片，首先要创建一个 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html&quot;&gt;CameraCaptureSession&lt;/a&gt; 并且指定 &lt;a href=&quot;https://developer.android.com/reference/android/view/Surface.html&quot;&gt;Surface&lt;/a&gt; 对象来传递拍摄到的照片。 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html&quot;&gt;CameraCaptureSession&lt;/a&gt; 既可以配置为只拍摄一张照片，也允许设置为连拍。&lt;/p&gt;
&lt;p&gt;如何在拍摄照片后进行通知回调？实现一个 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.CaptureCallback.html&quot;&gt;CameraCaptureSession.CaptureCallback&lt;/a&gt; 监听器，然后在你的 capture 请求中设置它。当系统完成照片拍摄请求后，你的 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.CaptureCallback.html&quot;&gt;CameraCaptureSession.CaptureCallback&lt;/a&gt; 监听器就会在 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.CaptureCallback.html#onCaptureCompleted&quot;&gt;https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.CaptureCallback.html#onCaptureCompleted&lt;/a&gt;(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.TotalCaptureResult)&amp;quot;&amp;gt;onCaptureCompleted( )&amp;lt;/a&amp;gt; 接收到回调信息，并提供 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html&quot;&gt;CaptureResult&lt;/a&gt; 类型的照片元数据给你。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html&quot;&gt;CameraCharateristics&lt;/a&gt; 类可以让你的app检测所在设备的相机具备的功能。其中它的 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#INFO_SUPPORTED_HARDWARE_LEVEL&quot;&gt;INFO_SUPPORTED_HARDWARE_LEVEL&lt;/a&gt; 属性显示了相机的功能级别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的设备都至少达到 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY&quot;&gt;INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY&lt;/a&gt; 的硬件级别，意味着其兼容性大致等同于被弃用的 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/Camera.html&quot;&gt;Camera&lt;/a&gt; API 级别。&lt;/li&gt;
&lt;li&gt;而支持 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_FULL&quot;&gt;INFO_SUPPORTED_HARDWARE_LEVEL_FULL&lt;/a&gt; 硬件级别的设备，意味着可以手动控制拍照和后期处理，以及在高帧率下拍摄高分辨率的照片。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看更多关于“如何使用升级后的 &lt;a href=&quot;https://developer.android.com/reference/android/hardware/camera2/package-summary.html&quot;&gt;Camera&lt;/a&gt; API”，参考 Android 5.0 的 Camera2Basic 和 CameraVideo 的 samples。&lt;/p&gt;
&lt;h3 id=&quot;audio-playback&quot; tabindex=&quot;-1&quot;&gt;Audio playback&lt;/h3&gt;
&lt;p&gt;这次的 &lt;a href=&quot;https://developer.android.com/reference/android/media/AudioTrack.html&quot;&gt;AudioTrack&lt;/a&gt; 更新包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你的 app 现在可以提供浮点格式( &lt;a href=&quot;https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_FLOAT&quot;&gt;ENCODING_PCM_FLOAT&lt;/a&gt; )的音频数据。这项许可增大了动态的范围，更一致的精确度，以及更大的动态余量。浮点算法在中间计算的时候特别有效。播放器端使用整数格式的音频数据，和较低的位深度。( 在 Android 5.0 中，部分内部传递途径也还不是浮点格式 )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你的 app 现在可以提供 &lt;a href=&quot;https://developer.android.com/reference/java/nio/ByteBuffer.html&quot;&gt;ByteBuffer&lt;/a&gt; 格式的音频数据，与 &lt;a href=&quot;https://developer.android.com/reference/android/media/MediaCodec.html&quot;&gt;MediaCodec&lt;/a&gt; 所提供的格式相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/media/AudioTrack.html#WRITE_NON_BLOCKING&quot;&gt;WRITE_NON_BLOCKING&lt;/a&gt; 选项可以简化某些 app 的缓冲和多线程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;media-playback-control&quot; tabindex=&quot;-1&quot;&gt;Media playback control&lt;/h3&gt;
&lt;p&gt;请使用新的 notification 和 media API 以确保系统 UI 知道你的多媒体播放器并且提取和展示专辑封面。调用全新的 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaSession.html&quot;&gt;MediaSession&lt;/a&gt; 以及 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaController.html&quot;&gt;MediaController&lt;/a&gt;，会使得通过 UI 和 service 控制多媒体播放变得更加容易。&lt;/p&gt;
&lt;p&gt;全新的 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaSession.html&quot;&gt;MediaSession&lt;/a&gt; 类取代了被弃用的 &lt;a href=&quot;https://developer.android.com/reference/android/media/RemoteControlClient.html&quot;&gt;RemoteControlClient&lt;/a&gt; 类，并且提供了一套回调方法来处理控制的传递以及多媒体按钮( transport controls and media buttons )。如果你的 app 提供媒体播放并且运行在 Android &lt;a href=&quot;https://developer.android.com/tv/index.html&quot;&gt;TV&lt;/a&gt; 或者&lt;a href=&quot;https://developer.android.com/wear/index.html&quot;&gt;手表&lt;/a&gt;平台，请使用 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaSession.html&quot;&gt;MediaSession&lt;/a&gt; 类使用同样的回调方法来处理控制传递。&lt;/p&gt;
&lt;p&gt;现在，你可以使用 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaController.html&quot;&gt;MediaController&lt;/a&gt; 来构建自己的 media controller app，这个类提供了一个线程安全的方法，可以在 app 的UI 程序中来观察和控制媒体播放。在构建一个控制器( controller )时，指定一个 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaSession.Token.html&quot;&gt;MediaSession.Token&lt;/a&gt; 对象，以便于 app 与 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaSession.html&quot;&gt;MediaSession&lt;/a&gt; 进行交互。调用 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html&quot;&gt;MediaController.TransportControls&lt;/a&gt; 方法，你可以发送诸如 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html#play()&quot;&gt;https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html#play()&lt;/a&gt;&amp;quot;&amp;gt;play( )&amp;lt;/a&amp;gt;，&amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html#stop()&quot;&gt;https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html#stop()&lt;/a&gt;&amp;quot;&amp;gt;stop( )&amp;lt;/a&amp;gt;，&amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html#skipToNext()&quot;&gt;https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html#skipToNext()&lt;/a&gt;&amp;quot;&amp;gt;skipToNext( )&amp;lt;/a&amp;gt; 以及 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html#setRating(android.media.Rating)&quot;&gt;https://developer.android.com/reference/android/media/session/MediaController.TransportControls.html#setRating(android.media.Rating)&lt;/a&gt;&amp;quot;&amp;gt;setRating( )&amp;lt;/a&amp;gt; 等命令，以控制在 session 中的媒体播放。你可以给 controller 注册一个 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaController.Callback.html&quot;&gt;MediaController.Callback&lt;/a&gt; 对象，用来监听 session 中元数据和状态的改变。&lt;/p&gt;
&lt;p&gt;此外，你还可以构建一个丰富的 notification —— 通过 &lt;a href=&quot;https://developer.android.com/reference/android/app/Notification.MediaStyle.html&quot;&gt;Notification.MediaStyle&lt;/a&gt; 类使播放控制绑定到 media session。&lt;/p&gt;
&lt;h3 id=&quot;media-browsing&quot; tabindex=&quot;-1&quot;&gt;Media browsing&lt;/h3&gt;
&lt;p&gt;在 Android 5.0，新的 &lt;a href=&quot;https://developer.android.com/reference/android/media/browse/package-summary.html&quot;&gt;android.media.browse&lt;/a&gt; API 可以使一个 app 浏览其他 app 媒体内容库。要想在你的 app 中显示媒体内容，请继承 &lt;a href=&quot;https://developer.android.com/reference/android/service/media/MediaBrowserService.html&quot;&gt;MediaBrowserService&lt;/a&gt; 类。在你实现的 &lt;a href=&quot;https://developer.android.com/reference/android/service/media/MediaBrowserService.html&quot;&gt;MediaBrowserService&lt;/a&gt; 中请提供一个 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaSession.Token.html&quot;&gt;MediaSeesion.Token&lt;/a&gt; 的使用权，以便于让你的 app 可以使用你的 service 来播放多媒体内容。&lt;/p&gt;
&lt;p&gt;我们使用 &lt;a href=&quot;https://developer.android.com/reference/android/media/browse/MediaBrowser.html&quot;&gt;MediaBrowser&lt;/a&gt; 类来与 media browser service 进行交互。当你在创建一个  &lt;a href=&quot;https://developer.android.com/reference/android/media/browse/MediaBrowser.html&quot;&gt;MediaBrowser&lt;/a&gt; 实例时，请为 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaSession.html&quot;&gt;MediaSession&lt;/a&gt; 指定一个组件名，你的 app 可以在之后连接这个关联的 service 并且获得一个 &lt;a href=&quot;https://developer.android.com/reference/android/media/session/MediaSession.Token.html&quot;&gt;MediaSesson.Token&lt;/a&gt; 对象，以便通过 service 播放那些外部的内容。&lt;/p&gt;
&lt;h2 id=&quot;storage&quot; tabindex=&quot;-1&quot;&gt;Storage&lt;/h2&gt;
&lt;h3 id=&quot;directory-selection&quot; tabindex=&quot;-1&quot;&gt;Directory selection&lt;/h3&gt;
&lt;p&gt;Android 5.0 继承了 &lt;a href=&quot;https://developer.android.com/guide/topics/providers/document-provider.html&quot;&gt;Storage Access Framework&lt;/a&gt;，这让用户可以在整个文件树中进行选择，并且给予 app 无需用户同意就能读写文件树中包含的每个条目的权限。&lt;/p&gt;
&lt;p&gt;想要选择一个目录树，需构建并发送一个 &lt;a href=&quot;https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT_TREE&quot;&gt;OPEN_DOCUMENT_TREE&lt;/a&gt; 的 intent。系统会显示所有提供子目录选择的 &lt;a href=&quot;https://developer.android.com/reference/android/provider/DocumentsProvider.html&quot;&gt;DocumentProvider&lt;/a&gt; 实例，用户可以浏览并选择一个文件。返回的 URI 代表了选择的子目录的路径。你可以使用&amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/provider/DocumentsContract.html#buildChildDocumentsUriUsingTree&quot;&gt;https://developer.android.com/reference/android/provider/DocumentsContract.html#buildChildDocumentsUriUsingTree&lt;/a&gt;(android.net.Uri, java.lang.String)&amp;quot;&amp;gt;buildChildDocumentsUriUsingTree( )&amp;lt;/a&amp;gt;  、 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/provider/DocumentsContract.html#buildDocumentUriUsingTree&quot;&gt;https://developer.android.com/reference/android/provider/DocumentsContract.html#buildDocumentUriUsingTree&lt;/a&gt;(android.net.Uri, java.lang.String)&amp;quot;&amp;gt;buildDocumentUriUsingTree&amp;lt;/a&amp;gt; 以及 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/content/ContentResolver.html#query&quot;&gt;https://developer.android.com/reference/android/content/ContentResolver.html#query&lt;/a&gt;(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)&amp;quot;&amp;gt;query( )&amp;lt;/a&amp;gt; 来浏览该目录。&lt;/p&gt;
&lt;p&gt;新的 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/provider/DocumentsContract.html#createDocument&quot;&gt;https://developer.android.com/reference/android/provider/DocumentsContract.html#createDocument&lt;/a&gt;(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String)&amp;quot;&amp;gt;createDocument( )&amp;lt;/a&amp;gt; 方法让你可以在任何子目录下创建新的文件或者文件夹。要管理已经存在的文件夹，调用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/provider/DocumentsContract.html#renameDocument&quot;&gt;https://developer.android.com/reference/android/provider/DocumentsContract.html#renameDocument&lt;/a&gt;(android.content.ContentResolver, android.net.Uri, java.lang.String)&amp;quot;&amp;gt;renameDocument( )&amp;lt;/a&amp;gt; 和 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/provider/DocumentsProvider.html#deleteDocument(java.lang.String)&quot;&gt;https://developer.android.com/reference/android/provider/DocumentsProvider.html#deleteDocument(java.lang.String)&lt;/a&gt;&amp;quot;&amp;gt;deleteDocument( )&amp;lt;/a&amp;gt; 方法。请在调用之前检查 COLUMN_FLAGS 以验证提供者的支持程度，防止出现问题。&lt;/p&gt;
&lt;p&gt;如果你实现了一个 &lt;a href=&quot;https://developer.android.com/reference/android/provider/DocumentsProvider.html&quot;&gt;DocumentProvider&lt;/a&gt; 并且想支持子目录选择，需实现 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/provider/DocumentsProvider.html#isChildDocument&quot;&gt;https://developer.android.com/reference/android/provider/DocumentsProvider.html#isChildDocument&lt;/a&gt;(java.lang.String, java.lang.String)&amp;quot;&amp;gt;isChildDocument( )&amp;lt;/a&amp;gt; 并且在你的 &lt;a href=&quot;https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#COLUMN_FLAGS&quot;&gt;COLUMN_FLAGS&lt;/a&gt; 中包含 &lt;a href=&quot;https://developer.android.com/reference/android/provider/DocumentsContract.Root.html#FLAG_SUPPORTS_IS_CHILD&quot;&gt;FLAG_SUPPORTS_IS_CHILD&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Android 5.0 在 shared storage ( 你的app可以存储多媒体文件并包含在 &lt;a href=&quot;https://developer.android.com/reference/android/provider/MediaStore.html&quot;&gt;MediaStore&lt;/a&gt; 的地方 ) 中引入了新的包名所在文件夹规范。新的 [getExternalMediaDirs( )](&lt;a href=&quot;https://developer.android.com/reference/android/content/Context.html#getExternalMediaDirs()&quot;&gt;https://developer.android.com/reference/android/content/Context.html#getExternalMediaDirs()&lt;/a&gt; 返回了所有在 shared storage 这些文件夹的路径。同样对于 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/content/Context.html#getExternalFilesDir(java.lang.String)&quot;&gt;https://developer.android.com/reference/android/content/Context.html#getExternalFilesDir(java.lang.String)&lt;/a&gt;&amp;quot;&amp;gt;getExternalFilesDir( )&amp;lt;/a&amp;gt;，你的 app 不需要任何额外的权限就能调用和返回路径。平台周期性地在这些文件夹里扫描新的多媒体文件，不过你也可以使用 &lt;a href=&quot;https://developer.android.com/reference/android/media/MediaScannerConnection.html&quot;&gt;MediaScannerConnection&lt;/a&gt; 主动地(明确地)扫描新内容。&lt;/p&gt;
&lt;h2 id=&quot;wireless%26connectivity&quot; tabindex=&quot;-1&quot;&gt;Wireless&amp;amp;Connectivity&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;multiple-network-connections&quot; tabindex=&quot;-1&quot;&gt;Multiple network connections&lt;/h3&gt;
&lt;p&gt;Android 5.0 提供了多种网络 API，你的 app 可以在指定网络特征( 指网络所提供的能力 )前提下，动态地扫描可用的网络，并且与它们建立连接。当你的 app 需要一个特殊的网络时，这个特性是相当有用的，比如 SUPL，MMS，计费网络，以及你想要通过特殊的传输协议发送数据。&lt;/p&gt;
&lt;p&gt;想要在你的 app 中动态的选择和链接一个网络，按照一下这些步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建一个 &lt;a href=&quot;https://developer.android.com/reference/android/net/ConnectivityManager.html&quot;&gt;ConnectivityManager&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&quot;https://developer.android.com/reference/android/net/NetworkRequest.Builder.html&quot;&gt;NetWorkRequest.Builder&lt;/a&gt; 类来构建一个 &lt;a href=&quot;https://developer.android.com/reference/android/net/NetworkRequest.html&quot;&gt;NetworkRequest&lt;/a&gt; 对象，并指定网络的特性以及 app 需要的( interested in )传输的协议。&lt;/li&gt;
&lt;li&gt;要扫描一个适合的网络，调用 [requestNetwork( )](&lt;a href=&quot;https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork&quot;&gt;https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork&lt;/a&gt;(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback) 或者 [registerNetworkCallback( )](&lt;a href=&quot;https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback&quot;&gt;https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback&lt;/a&gt;(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)，并传入一个 &lt;a href=&quot;https://developer.android.com/reference/android/net/NetworkRequest.html&quot;&gt;NetworkRequest&lt;/a&gt; 对象以及实现一个 &lt;a href=&quot;https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html&quot;&gt;ConnectivityManager.NetworkCallback&lt;/a&gt;。在一个合适的网络被检测到时，如果你想主动地切换过去，调用 [requestNetwork( )](&lt;a href=&quot;https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork&quot;&gt;https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork&lt;/a&gt;(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback) 方法；而如果你只想接收到扫描结果的通知而不是主动去切换，请使用 [registerNetworkCallback( )](&lt;a href=&quot;https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback&quot;&gt;https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback&lt;/a&gt;(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback) 方法替换它。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当系统检测到合适的网络，它会连接到网络并且唤起 [onAvailable( )](&lt;a href=&quot;https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onAvailable(android.net.Network)&quot;&gt;https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onAvailable(android.net.Network)&lt;/a&gt; 的回调。你可以在回调的使用 &lt;a href=&quot;https://developer.android.com/reference/android/net/Network.html&quot;&gt;Network&lt;/a&gt; 的对象获取关于该网络的信息，或者直接访问去使用该网络。&lt;/p&gt;
&lt;h3 id=&quot;bluetooth-low-energy&quot; tabindex=&quot;-1&quot;&gt;Bluetooth Low Energy&lt;/h3&gt;
&lt;p&gt;Android 4.3 在核心区域的引入了平台级支持的 &lt;a href=&quot;https://developer.android.com/guide/topics/connectivity/bluetooth-le.html&quot;&gt;Bluetooth Low Energy&lt;/a&gt; ( Bluetooth LE ) 。在 Android 5.0 中，一个 Android 设备能够与一个 Bluetooth LE 的外围设备进行交互。App 可以使用这个能力让周围的设备发现他们。举个例子，你可以构建一个 app ，它允许一个设备作为一个计步器或者健康检测器来使用，并且将它的数据与另外一个 Bluetooth LE 设备进行交互。&lt;/p&gt;
&lt;p&gt;新的 &lt;a href=&quot;https://developer.android.com/reference/android/bluetooth/le/package-summary.html&quot;&gt;android.bluetooth.le&lt;/a&gt; API 允许你的 app 广播通告( broadcast advertisements )，检索回应，以及与周围的 Bluetooth LE 设备建立连接。要使用新的通告和检索特性，需在你的 mainifest 文件中添加 &lt;a href=&quot;https://developer.android.com/reference/android/Manifest.permission.html#BLUETOOTH_ADMIN&quot;&gt;BLUETOOTH_ADMIN&lt;/a&gt; 权限。当用户从 Play Store 升级或者下载了你的 app，它们会询问是否授权以下的权限给你的app：“Bluetooth connection information:Allows the app to control Bluetooth, including broadcasting to or getting information about nearby Bluetooth devices.”(蓝牙连接信息：允许此应用控制蓝牙包括向周围蓝夜设备发送广播和从周围设备获得信息)&lt;/p&gt;
&lt;p&gt;为了让 Bluetooth LE 开始通知 ( advertising )，以便其他设别能发现你的 app，请调用 [starrtAdvertising( )](&lt;a href=&quot;https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#startAdvertising&quot;&gt;https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html#startAdvertising&lt;/a&gt;(android.bluetooth.le.AdvertiseSettings, android.bluetooth.le.AdvertiseData, android.bluetooth.le.AdvertiseCallback) 并且传入 &lt;a href=&quot;https://developer.android.com/reference/android/bluetooth/le/AdvertiseCallback.html&quot;&gt;AdvertiseCallback&lt;/a&gt; 类的实现。回调对象会接收一个 advertising 操作成功或失败的报告。&lt;/p&gt;
&lt;p&gt;Android 5.0 引入了 &lt;a href=&quot;https://developer.android.com/reference/android/bluetooth/le/ScanFilter.html&quot;&gt;ScanFilter&lt;/a&gt; 类，以便于你的 app 可以只检索它需要的( interested in )指定类型设备。为了检索 Bluetooth LE 设备，调用 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(android.bluetooth.le.ScanCallback)&quot;&gt;https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(android.bluetooth.le.ScanCallback)&lt;/a&gt;&amp;quot;&amp;gt;startScan( )&amp;lt;/a&amp;gt; 方法并且传入一个过滤的列表( a list of filters )。在调用该方法时，你还必须提供一个 &lt;a href=&quot;https://developer.android.com/reference/android/bluetooth/le/ScanCallback.html&quot;&gt;ScanCallback&lt;/a&gt; 的实现，在 Bluetooth LE 的 advertisement 被发现时进行报告。&lt;/p&gt;
&lt;h3 id=&quot;nfc-enhancements&quot; tabindex=&quot;-1&quot;&gt;NFC enhancements&lt;/h3&gt;
&lt;p&gt;Android 5.0 为 NFC 做了一些改进，使得它运用得更广泛更灵活。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Beam 现在可以在“分享”菜单( share menu )中使用&lt;/li&gt;
&lt;li&gt;你的 app 可以使用 [invokeBeam( )](&lt;a href=&quot;https://developer.android.com/reference/android/nfc/NfcAdapter.html#invokeBeam(android.app.Activity)&quot;&gt;https://developer.android.com/reference/android/nfc/NfcAdapter.html#invokeBeam(android.app.Activity)&lt;/a&gt; 唤醒 ( invoke ) Android Beam 在用户的设备间进行数据的分享。这个功能避免了用户必须手动轻触其他 NFC 设备才能完成数据的传输。&lt;/li&gt;
&lt;li&gt;你可以使用新的 [createTextRecord( )](&lt;a href=&quot;https://developer.android.com/reference/android/nfc/NdefRecord.html#createTextRecord&quot;&gt;https://developer.android.com/reference/android/nfc/NdefRecord.html#createTextRecord&lt;/a&gt;(java.lang.String, java.lang.String) 方法来构建一个 NDEF record 来容纳 UTF-8 格式的文本数据。&lt;/li&gt;
&lt;li&gt;如果你在开发一个支付相关的 app，那么现在你可以调用 [registerAidsForService( )](&lt;a href=&quot;https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#registerAidsForService&quot;&gt;https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#registerAidsForService&lt;/a&gt;(android.content.ComponentName, java.lang.String, java.util.List&amp;lt;java.lang.String&amp;gt;)  动态地注册一个 NFC 应用的 ID ( AID )。你可以使用 [setPreferredService( )](&lt;a href=&quot;https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#setPreferredService&quot;&gt;https://developer.android.com/reference/android/nfc/cardemulation/CardEmulation.html#setPreferredService&lt;/a&gt;(android.app.Activity, android.content.ComponentName) 来设置偏好的卡仿真服务 ( preferred card emulation service &lt;a href=&quot;http://blog.csdn.net/jwzhangjie/article/details/21983131&quot;&gt;具体参考此处&lt;/a&gt; )，即规定指定的活动在前台发生时被调用的后台服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;project-volta&quot; tabindex=&quot;-1&quot;&gt;Project Volta&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;除了这些新特性之外，Android 5.0 还强调了电池续航的改进。你可以使用新的 API 和工具可来理解和改进 app 的电量消耗。&lt;/p&gt;
&lt;h3 id=&quot;scheduling-jobs&quot; tabindex=&quot;-1&quot;&gt;Scheduling jobs&lt;/h3&gt;
&lt;p&gt;Android 5.0 提供了新的 &lt;a href=&quot;https://developer.android.com/reference/android/app/job/JobScheduler.html&quot;&gt;JobScheduler&lt;/a&gt; API，使你可以向系统定义自己的 jobs 是在稍后异步执行抑或在某个指定条件下执行 ( 比如设备充电时 )。Job scheduling 对这些场景特别有效：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;App 有一些你可以推迟的“无用户正在查看的”工作&lt;/li&gt;
&lt;li&gt;App 有一些你想在电源插上时做的工作&lt;/li&gt;
&lt;li&gt;App 有需要网络连接或者 Wi-Fi 连接的任务&lt;/li&gt;
&lt;li&gt;App 有一些定时批量处理的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个工作单元被封装在一个 JobInfo 对象里，这个对象指定了 scheduling 的执行条件。&lt;/p&gt;
&lt;p&gt;请使用 JobInfo.Builder 类配置计划任务如何运行。你可以安排任务在符合指定条件的情况下运行，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当设备充电时开始&lt;/li&gt;
&lt;li&gt;当设备连接到不限流量的网络时开始&lt;/li&gt;
&lt;li&gt;当设备空闲时&lt;/li&gt;
&lt;li&gt;在一个确切的 deadline 前完成或者有些许推迟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的例子，你可以添加这段代码，使你的任务在一个不限流量的网络中执行：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;    &lt;span class=&quot;token class-name&quot;&gt;JobInfo&lt;/span&gt; uploadTask &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JobInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Builder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mJobId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                                         mServiceComponent &lt;span class=&quot;token comment&quot;&gt;/* JobService component */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setRequiredNetworkCapabilities&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;JobInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NetworkType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UNMETERED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;JobScheduler&lt;/span&gt; jobScheduler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;JobScheduler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JOB_SCHEDULER_SERVICE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    jobScheduler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uploadTask&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你的设备有“稳定的电力”( 意思是，设备已经被插上电源超过2分钟，并且电量保持在一个&lt;a href=&quot;https://developer.android.com/reference/android/content/Intent.html#ACTION_BATTERY_OKAY&quot;&gt;健康的等级&lt;/a&gt; )，那么系统将会运行所有准备好要执行的计划任务，甚至是还未到 deadline 的任务。&lt;/p&gt;
&lt;p&gt;查看如何使用 &lt;a href=&quot;https://developer.android.com/reference/android/app/job/JobScheduler.html&quot;&gt;JobScheduler&lt;/a&gt;，参考本次放出的实现案例 —— JobSchedulerSample。&lt;/p&gt;
&lt;h3 id=&quot;developer-tools-for-battery-usage&quot; tabindex=&quot;-1&quot;&gt;Developer tools for battery usage&lt;/h3&gt;
&lt;p&gt;新的 dumpsys batterystats 命令，可生成有趣的设备电量使用的统计数据，并且按照唯一用户标识 (UID) 进行分组。这些统计包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电量相关的历史事件&lt;/li&gt;
&lt;li&gt;对设备的全局统计&lt;/li&gt;
&lt;li&gt;每个 UID 和系统组件的大致电量消耗&lt;/li&gt;
&lt;li&gt;每个 app 移动通信的每个数据包&lt;/li&gt;
&lt;li&gt;系统 UID 总计&lt;/li&gt;
&lt;li&gt;App UID 总计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 --help 选项来了解有关不同选项对输出的定制。举个例子，对于给定的 app 包名，要打印从上次充电结束开始的电池使用统计，请运行这段代码：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;    $ adb shell dumpsys batterystats &lt;span class=&quot;token parameter variable&quot;&gt;--charged&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;package-name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以对 dumpsys 命令的输出 log 里使用 Battery Historian 工具，以生成一个可视化的电量使用相关事件的 HTML 网页。这个信息能让你更加轻松的理解和诊断，是否有电池相关的问题存在。&lt;/p&gt;
&lt;h2 id=&quot;android-in-the-workplace-and-in-eudcation&quot; tabindex=&quot;-1&quot;&gt;Android in the Workplace and in Eudcation&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;managed-provisioning&quot; tabindex=&quot;-1&quot;&gt;Managed provisioning&lt;/h3&gt;
&lt;p&gt;Android 5.0 提供了在企业环境下运行app时的新功能。如果用户已经拥有一个私人账户，&lt;a href=&quot;https://developer.android.com/guide/topics/admin/device-admin.html&quot;&gt;设备管理员&lt;/a&gt;可以启动一个代理配置程序，来添加一个可共处但相对独立的管理账户到设备。和管理账户相关联的 App 会和非管理账户的 app 共同显示在用户的桌面启动器，多任务窗，以及通知里 ( Launcher, recents screen, and notifications )。&lt;/p&gt;
&lt;p&gt;要开始代理配置程序，发送带有 &lt;a href=&quot;https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROVISION_MANAGED_PROFILE&quot;&gt;ACTION_PROVISION_MANAGED_PROFILE&lt;/a&gt; 的 &lt;a href=&quot;https://developer.android.com/reference/android/content/Intent.html&quot;&gt;Intent&lt;/a&gt;。如果发送成功，系统会触发 [onProfileProvisioningComplete( )](&lt;a href=&quot;https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onProfileProvisioningComplete&quot;&gt;https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onProfileProvisioningComplete&lt;/a&gt;(android.content.Context, android.content.Intent) 的回调。你可以在之后调用 [setProfileEnabled( )](&lt;a href=&quot;https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setProfileEnabled(android.content.ComponentName)&quot;&gt;https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setProfileEnabled(android.content.ComponentName)&lt;/a&gt; 激活这个管理账户。&lt;/p&gt;
&lt;p&gt;默认情况下，只有小部分的 app 允许在管理账户中运行。你可以调用 [enableSystemApp( )](&lt;a href=&quot;https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#enableSystemApp&quot;&gt;https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#enableSystemApp&lt;/a&gt;(android.content.ComponentName, android.content.Intent) 在管理账户中安装额外的 app。&lt;/p&gt;
&lt;p&gt;如果你正在开发一个启动器 app，对于当前用户和任何相关的管理账户，你可以使用新的 &lt;a href=&quot;https://developer.android.com/reference/android/content/pm/LauncherApps.html&quot;&gt;LauncherApps&lt;/a&gt; 类来得到一个可启动的 activities 列表。你的启动器可以给管理账户相关的 app 的 icon 追加一个明显的标记。想要检索标记图标，使用 [getUserBadgedIcon( )](&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#getUserBadgedIcon&quot;&gt;https://developer.android.com/reference/android/content/pm/PackageManager.html#getUserBadgedIcon&lt;/a&gt;(android.graphics.drawable.Drawable, android.os.UserHandle)。&lt;/p&gt;
&lt;p&gt;想要了解如何使用这些新特性，参考 BasicManagedProfile 实现案例。&lt;/p&gt;
&lt;h3 id=&quot;device-owner&quot; tabindex=&quot;-1&quot;&gt;Device owner&lt;/h3&gt;
&lt;p&gt;Android 5.0 引入了部署设备拥有者 app 的特性 ( Android 5.0 introduces the ability to deploy a device owner app)。“设备拥有者” ( device owner ) 指的是一种特殊的&lt;a href=&quot;https://developer.android.com/guide/topics/admin/device-admin.html&quot;&gt;设备管理员&lt;/a&gt;，它拥有额外的能力去创建和移除次级用户，并且可以配置该设备的全局设置。你的 device owner 可以使用 &lt;a href=&quot;https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html&quot;&gt;DevicePolicyManager&lt;/a&gt; 类里面的方法，来细致控制管理设备里的配置，安全，以及  app。一台设备在同一时间里只能有唯一一个活跃的 device owner。&lt;/p&gt;
&lt;p&gt;想部署和激活一个 device owner，你必须执行一个从 programming app 到该设备的NFC数据传输，并当设备处于一个未配置的状态。这个数据传输和 &lt;a href=&quot;https://developer.android.com/about/versions/android-5.0.html#ManagedProvisioning&quot;&gt;Managed provisioning&lt;/a&gt; 里描述的 provisioning intent 发送的是相同信息。&lt;/p&gt;
&lt;h3 id=&quot;screen-pinning&quot; tabindex=&quot;-1&quot;&gt;Screen pinning&lt;/h3&gt;
&lt;p&gt;Android 5.0 引入了一个新的 screen pinning API，可以让你暂时性地限制用户，不能离开你的task或者被通知所打断。应用的案例有：如果你在 Android 上开发一个教育 app 需要高风险的评估要求支持，或者是一个单一用途的应用，抑或是一个公共多媒体服务应用。一旦你的 app 激活 screen pinning，用户便无法看到通知、进入其他 app 、或者返回主界面，直到你的 app 退出该模式。&lt;/p&gt;
&lt;p&gt;有两种开启 screen pinning 的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动实现：用户可以在设置 &amp;gt; 安全 &amp;gt; 屏幕固定 中开启这个功能，并且通过在多任务界面触摸绿色的固定图标，选择一个他们想要固定的任务。&lt;/li&gt;
&lt;li&gt;代码实现：在你的 app 中调用 [startLockTask( )](&lt;a href=&quot;https://developer.android.com/reference/android/app/Activity.html#startLockTask()%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%8F%91%E5%87%BA%E8%AF%B7%E6%B1%82%E7%9A%84&quot;&gt;https://developer.android.com/reference/android/app/Activity.html#startLockTask()，如果发出请求的&lt;/a&gt; app 不是 device owner，用户会及时收到警告。而一个 device owner 的 app 可以调用 [setLockTaskPackages( )](&lt;a href=&quot;https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLockTaskPackages&quot;&gt;https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLockTaskPackages&lt;/a&gt;(android.content.ComponentName, java.lang.String[]) 方法允许 app 可被固定，而不需要用户确认的步骤。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当任务锁定被启动，会有以下一些动作发生：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态栏将会置空，用户的 notification 和状态信息将会被隐藏。&lt;/li&gt;
&lt;li&gt;Honme 键和多任务键无效。&lt;/li&gt;
&lt;li&gt;其他的 app 不能启动新的 activity。&lt;/li&gt;
&lt;li&gt;只要该动作不是创建一个新任务，当前的 app 可以启动新的 activity。&lt;/li&gt;
&lt;li&gt;如果 screen pinning 是被 device owner 所触发，那么用户保留对你 app 的锁定直到你的 app 调用 stopLockTask( )。&lt;/li&gt;
&lt;li&gt;如果 screen pinning 是被其他的 app 激活，而不是 device owner 或者用户直接触发的，那么用户可以同时按住 Back 键和 多任务键以退出固定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;printing-framework&quot; tabindex=&quot;-1&quot;&gt;Printing Framework&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;render-pdf-as-bitmap&quot; tabindex=&quot;-1&quot;&gt;Render PDF as bitmap&lt;/h3&gt;
&lt;p&gt;现在你可以把一个 PDF 文件页面渲染为位图，并使用新的 PdfRenderer 类进行打印。在系统写入可打印内容时，你必须指定一个可随机存取的 &lt;a href=&quot;https://developer.android.com/reference/android/os/ParcelFileDescriptor.html&quot;&gt;ParcelFileDescriptor&lt;/a&gt;。你的 app 可以调用 [openPage( )](&lt;a href=&quot;https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html#openPage(int)&quot;&gt;https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html#openPage(int)&lt;/a&gt; 来获得一个待渲染的页面，然后调用 [render( )](&lt;a href=&quot;https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#render&quot;&gt;https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#render&lt;/a&gt;(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Matrix, int) 将打开的 &lt;a href=&quot;https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html&quot;&gt;PdfRenderer.Page&lt;/a&gt; 转化为 bitmap。当然，如果你只是想转换一部分的文档为位图，你可以设置额外的参数来达到目的 ( 例如，实现 &lt;a href=&quot;http://en.wikipedia.org/wiki/Tiled_rendering&quot;&gt;tiled rendering&lt;/a&gt; 以缩放文档)。&lt;/p&gt;
&lt;p&gt;关于如何使用这个新 API 的例子，请看 PdfRendererBasic 。&lt;/p&gt;
&lt;h2 id=&quot;system&quot; tabindex=&quot;-1&quot;&gt;System&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;app-usage-statistics&quot; tabindex=&quot;-1&quot;&gt;App usage statistics&lt;/h3&gt;
&lt;p&gt;现在你可以通过新的 &lt;a href=&quot;https://developer.android.com/reference/android/app/usage/package-summary.html&quot;&gt;android.app.usage&lt;/a&gt; API 来访问 app 使用情况。这个 API 比已弃用的 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/ActivityManager.html#getRecentTasks&quot;&gt;https://developer.android.com/reference/android/app/ActivityManager.html#getRecentTasks&lt;/a&gt;(int, int)&amp;quot;&amp;gt;getRecentTasks( )&amp;lt;/a&amp;gt; 方法提供了更详细数据。要使用这个 API，首先你必须在你的 mainifest 文件声明 &amp;quot;android.permission.PACKAGE_USAGE_STATS&amp;quot; 权限。然后在 &lt;em&gt;设置 &amp;gt; 安全 &amp;gt; 有权查看使用情况的应用&lt;/em&gt; 里，用户必须允许该 app 的访问。&lt;/p&gt;
&lt;p&gt;系统会以每个 app 为基础收集使用数据，并且每隔一天，一周，一月，一年，都会得出统计数据。系统保存的数据的最长持续时间如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日数据：保留7天&lt;/li&gt;
&lt;li&gt;周数据：保留4周&lt;/li&gt;
&lt;li&gt;月数据：保留6个月&lt;/li&gt;
&lt;li&gt;年数据：保留2年&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于每个 app，系统会记录下列数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app 最后一次被使用的时间&lt;/li&gt;
&lt;li&gt;app 在前台显示的总时长 ( 日，周，月，年 )&lt;/li&gt;
&lt;li&gt;在一天内，某个控件( 通常用包名或者 activity 名辨别 )转移到前台或者后台的时间戳&lt;/li&gt;
&lt;li&gt;当设备的配置发生改变时的时间戳 ( 比如设备显示方向因为重力感应被改变 )&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;testing-%26-accessibility&quot; tabindex=&quot;-1&quot;&gt;Testing &amp;amp; Accessibility&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;testing-and-accessibility-improvements&quot; tabindex=&quot;-1&quot;&gt;Testing and accessibility improvements&lt;/h3&gt;
&lt;p&gt;Android 5.0 添加了如下一些测试和辅助功能的支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新的 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/UiAutomation.html#getWindowAnimationFrameStats()&quot;&gt;https://developer.android.com/reference/android/app/UiAutomation.html#getWindowAnimationFrameStats()&lt;/a&gt;&amp;quot;&amp;gt;getWindowAnimationFrameStats( )&amp;lt;/a&amp;gt; 和 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/app/UiAutomation.html#getWindowContentFrameStats(int)&quot;&gt;https://developer.android.com/reference/android/app/UiAutomation.html#getWindowContentFrameStats(int)&lt;/a&gt;&amp;quot;&amp;gt;getWindowContentFrameStats( )&amp;lt;/a&amp;gt; 方法可获得窗口动画和内容显示的帧数统计。这些方法可以让你编写测试，评估一个 app 渲染帧数是否达到足够的刷新速率，以提供一个流畅的用户体验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新的 executeShellCommand( ) 方法让你可以从你的 instrumentation test 中执行一段 shell 指令。这个命令的执行和运行 adb shell 把主机和设备连接起来非常相像，它允许你使用 诸如 dumpsys，am，content，以及 pm 等 shell-based 工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;辅助功能和测试工具使用的 accessibility API ( 例如 &lt;a href=&quot;https://developer.android.com/tools/help/uiautomator/index.html&quot;&gt;UiAutomator&lt;/a&gt; )，现在可以获取用户可交互窗口的属性的具体信息。调用新的 [getWindows( )](&lt;a href=&quot;https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getWindows()&quot;&gt;https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getWindows()&lt;/a&gt; 方法可获得 &lt;a href=&quot;https://developer.android.com/reference/android/view/accessibility/AccessibilityWindowInfo.html&quot;&gt;AccessibilityWindowInfo&lt;/a&gt; 对象的列表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新的 &lt;a href=&quot;https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html&quot;&gt;AccessibilityNodeInfo.AccessibilityAction&lt;/a&gt; 类让你可定义一个标准或者定制的动作，并显示在一个 &lt;a href=&quot;https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html&quot;&gt;AccessibilityNodeInfo&lt;/a&gt; 中。&lt;a href=&quot;https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html&quot;&gt;AccessibilityNodeInfo.AccessibilityAction&lt;/a&gt; 类替换了之前 &lt;a href=&quot;https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html&quot;&gt;AccessibilityNodeInfo&lt;/a&gt; 里的 actions-related APIs。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Android 5.0 提供了文本转语音合成 ( TTS synthesis ) 的细致控制。新的 Voice 类允许你的 app 使用指定地区、质量、延迟率 ( latency rating，指基于网络的预计合成延迟 )的声音，以及 TTS 引擎的指定参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ime&quot; tabindex=&quot;-1&quot;&gt;IME&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;easier-switching-between-input-languages&quot; tabindex=&quot;-1&quot;&gt;Easier switching between input languages&lt;/h3&gt;
&lt;p&gt;从 Android 5.0 开始，通过平台级的支持，用户可以更轻松的在所有输入法里切换。所有的 &lt;a href=&quot;https://developer.android.com/guide/topics/text/creating-input-method.html&quot;&gt;输入法 ( input method editors，IME )&lt;/a&gt; 都能执行指定的切换动作循环 (通常是触摸软键盘上的地球图标完成这一动作)，这个行为变化通过
[shouldOfferSwitchingToNextInputMethod( )](&lt;a href=&quot;https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#shouldOfferSwitchingToNextInputMethod(android.os.IBinder)&quot;&gt;https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#shouldOfferSwitchingToNextInputMethod(android.os.IBinder)&lt;/a&gt; 方法实现。&lt;/p&gt;
&lt;p&gt;此外，framework) 现在会检查下一个输入法是否包含切换机制。一个包含切换机制的输入法不会被切换到一个未包含的输入法。这个行为变化通过 &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#switchToNextInputMethod&quot;&gt;https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#switchToNextInputMethod&lt;/a&gt;(android.os.IBinder, boolean)&amp;quot;&amp;gt;switchToNextInputMethod( )&amp;lt;/a&amp;gt; 方法实现。&lt;/p&gt;
&lt;p&gt;想查看“如何使用升级后的 IME-switching APIs”的例子，参考此次放出的 updated soft-keyboard sample。想了解更多关于“如何实现 IME 之间切换”的信息，请看 &lt;a href=&quot;https://developer.android.com/guide/topics/text/creating-input-method.html&quot;&gt;Creating an Input Method&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;manifest-declarations&quot; tabindex=&quot;-1&quot;&gt;Manifest Declarations&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;declarable-reuired-features&quot; tabindex=&quot;-1&quot;&gt;Declarable reuired features&lt;/h3&gt;
&lt;p&gt;以下参数值现已加入 &amp;lt;uses-feature&amp;gt; 支持，你可以确保你的 app 仅安装在支持它所需特性的设备上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUDIO_OUTPUT&quot;&gt;FEATURE_AUDIO_OUTPUT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING&quot;&gt;FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR&quot;&gt;FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_CAPABILITY_RAW&quot;&gt;FEATURE_CAMERA_CAPABILITY_RAW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_LEVEL_FULL&quot;&gt;FEATURE_CAMERA_LEVEL_FULL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_GAMEPAD&quot;&gt;FEATURE_GAMEPAD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LIVE_TV&quot;&gt;FEATURE_LIVE_TV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_MANAGED_USERS&quot;&gt;FEATURE_MANAGED_USERS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LEANBACK&quot;&gt;FEATURE_LEANBACK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_OPENGLES_EXTENSION_PACK&quot;&gt;FEATURE_OPENGLES_EXTENSION_PACK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SECURELY_REMOVES_USERS&quot;&gt;FEATURE_SECURELY_REMOVES_USERS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_AMBIENT_TEMPERATURE&quot;&gt;FEATURE_SENSOR_AMBIENT_TEMPERATURE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_HEART_RATE_ECG&quot;&gt;FEATURE_SENSOR_HEART_RATE_ECG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_RELATIVE_HUMIDITY&quot;&gt;FEATURE_SENSOR_RELATIVE_HUMIDITY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VERIFIED_BOOT&quot;&gt;FEATURE_VERIFIED_BOOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WEBVIEW&quot;&gt;FEATURE_WEBVIEW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;user-permissions&quot; tabindex=&quot;-1&quot;&gt;User permissions&lt;/h3&gt;
&lt;p&gt;以下权限现已加入 &amp;lt;uses-permission&amp;gt; 支持，请声明你的 app 所需要获取的确切API。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/reference/android/Manifest.permission.html#BIND_DREAM_SERVICE&quot;&gt;BIND_DREAM_SERVICE&lt;/a&gt;：当 target API level 为 21 或更高时，Daydream 服务需要这项权限，以确保只有系统可以与之绑定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://2bab.me/zh/blog/2014-12-10-hello-world/"/>
    <updated>2014-12-10T00:00:00Z</updated>
    <id>https://2bab.me/zh/blog/2014-12-10-hello-world/</id>
    <content type="html">&lt;p&gt;从 Octopress 转到 Hexo，新的开始，新的不同。&lt;/p&gt;
&lt;p&gt;它将仅是一个技术博，只做好这一件事。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://2bab-images.lastmayday.com/blog/2014-12-10-hello-world-avatar.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎关注我的&lt;a href=&quot;https://2bab.me/about&quot;&gt;公众号和微博&lt;/a&gt;。&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
</feed>